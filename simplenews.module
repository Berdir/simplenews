<?php
// $Id$

/**
 * @defgroup simplenews
 * Enable nodes to be used as newsletter, manage subscriptions and sent
 * email newsletter to subscribers.
 */

/**
 * @file
 * Simplnews node handling, sent email, newsletter block and general hooks
 *
 * @ingroup simplenews
 * @todo Redo all database functions: http://drupal.org/node/224333#dbtng
 * @todo Where possible build re-usable functions wrapped around database calls.
 * @todo Replace taxonomy_ and vocabulary_ CRUD functions: http://drupal.org/node/224333#taxonomy_crud AND http://drupal.org/node/224333#taxonomy_node
 * @todo Investigate the use of static API: http://drupal.org/node/224333#static_variable_api
 * @todo Change documentation of hook_foo implementations: http://drupal.org/node/224333#implementation_hook_comment
 * @todo Concider context support for t(): http://drupal.org/node/224333#locale_context
 * @todo Language code in t() now as array: http://drupal.org/node/224333#locale_context
 * @todo Coding standards: string concatenation, 'else if', type hinting
 * @todo Implement hook_requirements()?; http://api.drupal.org/api/function/hook_requirements/7
 * @todo Separate token function into simplenews.tokens.inc
 */

/**
 * NEWSLETTER MAIL PRIORITY
 */
define('SIMPLENEWS_PRIORITY_NONE', 0);
define('SIMPLENEWS_PRIORITY_HIGHEST', 1);
define('SIMPLENEWS_PRIORITY_HIGH', 2);
define('SIMPLENEWS_PRIORITY_NORMAL', 3);
define('SIMPLENEWS_PRIORITY_LOW', 4);
define('SIMPLENEWS_PRIORITY_LOWEST', 5);

/**
 * NEWSLETTER SEND COMMAND
 */
define('SIMPLENEWS_COMMAND_SEND_NONE', 0);
define('SIMPLENEWS_COMMAND_SEND_NOW', 1);
define('SIMPLENEWS_COMMAND_SEND_TEST', 2);

/**
 * NEWSLETTER SUBSCRIPTION STATUS
 */
define('SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED', 1);
define('SIMPLENEWS_SUBSCRIPTION_STATUS_UNSUBSCRIBED', 0);

/**
 * NEWSLETTER SENT STATUS
 */
define('SIMPLENEWS_STATUS_SEND_NOT', 0);
define('SIMPLENEWS_STATUS_SEND_PENDING', 1);
define('SIMPLENEWS_STATUS_SEND_READY', 2);

/**
 * MAIL SPOOL SENT STATUS
 */
define('SIMPLENEWS_SPOOL_HOLD', 0);
define('SIMPLENEWS_SPOOL_PENDING', 1);
define('SIMPLENEWS_SPOOL_DONE', 2);

/**
 * AFTER EACH 100 NEWSLETTERS
 * simplenews_mail_spool() CHECKS IF LIMITS ARE EXCEEDED
 */
define('SIMPLENEWS_SEND_CHECK_INTERVAL', 100);

/**
 * AT 80% OF PHP MAX EXECUTION TIME EMAIL SENDING IS INTERRUPTED
 */
define('SIMPLENEWS_SEND_TIME_LIMIT', 0.8);

/**
 * CAPTURE THE PHP MAX EXUCUTION TIME BEFORE drupal_cron_run() CHANGES THIS.
 * THIS IS A WORK AROUND FOR DRUPAL6.14 BUG. SEE http://drupal.org/node/584334
 */
define('SIMPLENEWS_MAX_EXECUTION_TIME', ini_get('max_execution_time'));

/**
 * SUBSCRIPTION STATUS
 */
define('SIMPLENEWS_SUBSCRIPTION_INACTIVE', 0);
define('SIMPLENEWS_SUBSCRIPTION_ACTIVE', 1);

/**
 * Implementation of hook_permission().
 * @todo Change array format and add titles where required: http://drupal.org/node/224333#descriptions_permissions
 * @todo Change sort order where required: http://drupal.org/node/224333#sorting_permissions
 * @todo Review the use of 'administer nodes': http://drupal.org/node/224333#bypass_node_access
 * @todo hook_perm() renamed: http://drupal.org/node/224333#hook_permission
 */
function simplenews_permission() {
  return array(
    'administer newsletters' => array(
      'title' => t('administer newsletters'),
      'description' => t('TODO Add a description for administer newsletters'),
    ),
    'administer simplenews subscriptions' => array(
      'title' => t('administer simplenews subscriptions'),
      'description' => t('TODO Add a description for administer simplenews subscriptions'),
    ),
    'administer simplenews settings' => array(
      'title' => t('administer simplenews settings'),
      'description' => t('TODO Add a description for administer simplenews settings'),
    ),
    'send newsletter' => array(
      'title' => t('send newsletter'),
      'description' => t('TODO Add a description for send newsletter'),
    ),
    'subscribe to newsletters' => array(
      'title' => t('subscribe to newsletters'),
      'description' => t('TODO Add a description for subscribe to newsletters'),
    ),
  );
}

/**
 * Implementation of hook_init().
 * @todo Check parameters of drupal_add_css: http://drupal.org/node/224333#drupal_add_js_options
 */
function simplenews_init() {
  drupal_add_css(drupal_get_path('module', 'simplenews') . '/simplenews.css');

  // Simplenews can not work without this variable.
  if ((variable_get('simplenews_vid', '')) == '') {
    drupal_set_message(t('Missing newsletter vocabulary. Please set a vocabulary at <a href="@settings">Simplenews settings</a>.', array('@settings' => url('admin/config/simplenews/general'))), 'error');
  }

}

/**
 * Implementation of hook_menu().
 * @todo Add $form to drupal_get_form() calback functions: http://drupal.org/node/224333#hook_forms_signature
 * @todo Review admin path due to D7's changed information architecture
 */
function simplenews_menu() {
    $items['admin/content/simplenews'] = array(
    'title' => 'Newsletters',
    'description' => 'List newsletters and newsletter sent status.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_admin_newsletter_issues'),
    'access arguments' => array('administer newsletters'),
    'file' => 'simplenews.admin.inc',
  );
  $items['admin/structure/simplenews'] = array(
    'title' => 'Newsletters',
    'description' => 'List, add and edit newsletter series.',
    'page callback' => 'simplenews_admin_newsletter_series',
    'access arguments' => array('administer newsletters'),
    'file' => 'simplenews.admin.inc',
  );
  $items['admin/content/simplenews/list'] = array(
    'title' => 'List newsletters',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/structure/simplenews/edit/%'] = array(
    'title' => 'Newsletters',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_admin_types_form', 4),
    'access arguments' => array('administer newsletters'),
    'file' => 'simplenews.admin.inc',
  );
  $items['admin/structure/simplenews/delete/%'] = array(
    'title' => 'Newsletters',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_admin_types_delete', 4),
    'access arguments' => array('administer newsletters'),
    'file' => 'simplenews.admin.inc',
  );
  $items['admin/structure/simplenews/add'] = array(
    'title' => 'Add newsletter',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_admin_types_form'),
    'access arguments' => array('administer newsletters'),
    'file' => 'simplenews.admin.inc',
    'weight' => -9,
  );

  $items['admin/content/simplenews/subscriptions/delete'] = array(
    'title' => 'Delete',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_subscription_multiple_delete_confirm'),
    'access arguments' => array('administer simplenews subscriptions'),
    'file' => 'simplenews.admin.inc',
  );
  $items['admin/people/simplenews'] = array(
    'title' => 'Newsletter subscriptions',
    'description' => 'Newsletter subscription management.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_admin_subscription'),
    'access arguments' => array('administer simplenews subscriptions'),
    'file' => 'simplenews.admin.inc',
  );
  $items['admin/people/simplenews/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/people/simplenews/edit/%'] = array(
    'title' => 'Subscriptions',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_admin_users_form', 4),
    'access arguments' => array('administer simplenews subscriptions'),
    'file' => 'simplenews.subscription.inc',
  );
  $items['admin/people/simplenews/import'] = array(
    'title' => 'Mass subscribe',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_subscription_list_add'),
    'access arguments' => array('administer simplenews subscriptions'),
    'file' => 'simplenews.admin.inc',
    'weight' => 8,
  );
  $items['admin/people/simplenews/unsubscribe'] = array(
    'title' => 'Mass unsubscribe',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_subscription_list_remove'),
    'access arguments' => array('administer simplenews subscriptions'),
    'file' => 'simplenews.admin.inc',
    'weight' => 9,
  );
  $items['admin/people/simplenews/export'] = array(
    'title' => 'Export',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_subscription_list_export'),
    'access arguments' => array('administer simplenews subscriptions'),
    'file' => 'simplenews.admin.inc',
    'weight' => 10,
  );

  $items['admin/config/simplenews'] = array(
    'title' => 'Simplenews',
    'description' => 'Manage simplenews configuration.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer simplenews settings'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'), 
  );

  $items['admin/config/simplenews/general'] = array(
    'title' => 'General',
    'description' => 'Simplenews content type and vocabulary settings.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_admin_settings'),
    'access arguments' => array('administer simplenews settings'),
    'file' => 'simplenews.admin.inc',
    'weight' => 1,
  );
  $items['admin/config/simplenews/newsletter'] = array(
    'title' => 'Newsletter',
    'description' => 'Newsletter default settings and sender data.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_admin_settings_newsletter'),
    'access arguments' => array('administer simplenews settings'),
    'file' => 'simplenews.admin.inc',
    'weight' => 2,
  );
  $items['admin/config/simplenews/subscription'] = array(
    'title' => 'Subscription',
    'description' => 'Subscription settings, opt-in/out confirmation email text.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_admin_settings_subscription'),
    'access arguments' => array('administer simplenews settings'),
    'file' => 'simplenews.admin.inc',
    'weight' => 3,
  );
  $items['admin/config/simplenews/mail'] = array(
    'title' => 'Send mail',
    'description' => 'Send mail, cron and debug options.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_admin_settings_mail'),
    'access arguments' => array('administer simplenews settings'),
    'file' => 'simplenews.admin.inc',
    'weight' => 4,
  );

  $items['newsletter/confirm'] = array(
    'title' => 'Confirm newsletter subscriptions',
    'type' => MENU_CALLBACK,
    'page callback' => 'simplenews_confirm_subscription',
    'access arguments' => array('subscribe to newsletters'),
    'file' => 'simplenews.subscription.inc',
  );

  $items['newsletter/subscriptions'] = array(
    'title' => 'Manage newsletter subscriptions',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_subscription_manager_form'),
    'access arguments' => array('subscribe to newsletters'),
    'file' => 'simplenews.subscription.inc',
  );

  return $items;
}

/**
 * Menu item access callback.
 *
 * Access for both newsletter and subscriber admins.
 */
function simplenews_newsletter_access() {
  return user_access('administer newsletters') || user_access('administer simplenews subscriptions');
}

/**
 * Implements hook_node_type_delete.
 */
function simplenews_node_type_delete($info) {
  $simplenews_types = variable_get('simplenews_content_types', array());
  if (isset($simplenews_types[$info->type])) {
    unset($simplenews_types[$info->type]);
    variable_set('simplenews_content_types', $simplenews_types);
  }
}

/**
 * Implements hook_node_type_update.
 */
function simplenews_node_type_update($info) {
  $simplenews_types = variable_get('simplenews_content_types', array());
  if (isset($info->old_type) && isset($simplenews_types[$info->old_type]) && $info->old_type != $info->type) {
    unset($simplenews_types[$info->old_type]);
    $simplenews_types[$info->type] = $info->type;
    variable_set('simplenews_content_types', $simplenews_types);
  }
}

/**
 * Implementation of hook_node_type().
 *
 * Update 'simplenews_content_types' on node update and delete.
 * Related vocabulary settings are updated by taxonomy module.
 */
function simplenews_node_type_OLD($op, $info) { }

/**
 * Implements hook_node_build_alter.
 */
function simplenews_node_build_alter($build) {
  // Don't replace the tokens when node alter is called by simplenews_mail.
  if (!isset($node->simplenews_mail)) {
    global $language;
    $context['node'] = $node;

    if (isset($node->body)) {
      $node->body = token_replace($node->body, array('node' => $node));
    }
    if (isset($node->teaser)) {
      $node->teaser = token_replace($node->teaser, array('node' => $node));
    }
  }
}

/**
 * Implements hook_node_validate.
 */
function simplenews_node_validate($node, $form) {
/*
  $vid = variable_get('simplenews_vid', '');
  if (!isset($node->taxonomy[$vid]) || empty($node->taxonomy[$vid]) || simplenews_validate_taxonomy($node->taxonomy) == FALSE) {
    form_set_error('taxonomy', t('No newsletter term is selected, the newsletter taxonomy term is probably not configured correctly.<br /> Check and <strong>save</strong> the <a href="@settings">Simplenews general settings</a>.', array('%name' => $vocabulary->name, '@settings' => url('admin/config/simplenews/general'))));
  }
  elseif (isset($node->simplenews['send']) && $node->simplenews['send'] == SIMPLENEWS_COMMAND_SEND_TEST) {
    if (!empty($node->simplenews['test_address'])) {
      $mails = explode(',', $node->simplenews['test_address']);
      foreach ($mails as $mail) {
        $mail = trim($mail);
        if ($mail == '') {
          form_set_error('simplenews][test_address', t('Test email address is empty.'));
        }
        elseif (!valid_email_address($mail)) {
          form_set_error('simplenews][test_address', t('Invalid email address %mail.', array('%mail' => $mail)));
        }
      }
    }
    else {
      form_set_error('simplenews][test_address', t('Missing test email address.'));
    }
  }
*/
}

/**
 * Implements hook_node_presave.
 */
function simplenews_node_presave($node) {
/*
  $node->simplenews = array_merge(_simplenews_get_node_form_defaults(), is_array($node->simplenews) ? $node->simplenews : array());
  $term = simplenews_validate_taxonomy($node->taxonomy);
  $tid = is_array($term) ? array_values($term) : FALSE;
  $node->simplenews['tid'] = $tid ? $tid[0] : 0;
*/
}

/**
 * Implements hook_node_insert.
 */
function simplenews_node_insert($node) {
/*
  // Flatten the simplenews 'advanced' settings array.
  // This makes sure the $node array after insert/update is equal to the
  // $node array after load.
  $node->simplenews = _simplenews_flatten_array($node->simplenews);

  $send_with_permission = $node->simplenews['send'] == SIMPLENEWS_COMMAND_SEND_NOW && user_access('send newsletter');
  if ($op == 'insert') {
    // Insert node
    $s_status = $send_with_permission ? SIMPLENEWS_STATUS_SEND_PENDING : SIMPLENEWS_STATUS_SEND_NOT;
    db_insert('simplenews_newsletters')
      ->fields(array(
        'nid' => $node->nid,
        'vid' => $node->vid,
        'tid' => $node->simplenews['tid'],
        's_status' => $s_status,
        's_format' => $node->simplenews['s_format'],
        'priority' => $node->simplenews['priority'],
        'receipt' => $node->simplenews['receipt'],
      ))
      ->execute();
  }
  else {
    // Update node
    if ($send_with_permission) {
      db_update('simplenews_newsletters')
        ->condition('nid', $node->nid)
        ->fields(array(
          'vid' => $node->vid,
          'tid' => $node->simplenews['tid'],
          's_status' => SIMPLENEWS_STATUS_SEND_PENDING,
          's_format' => $node->simplenews['s_format'],
          'priority' => $node->simplenews['priority'],
          'receipt' => $node->simplenews['receipt'],
        ))
        ->execute();
    }
    else {
      db_update('simplenews_newsletters')
        ->condition('nid', $node->nid)
        ->fields(array(
          'tid' => $node->simplenews['tid'],
          's_format' => $node->simplenews['s_format'],
          'priority' => $node->simplenews['priority'],
          'receipt' => $node->simplenews['receipt'],
        ))
        ->execute();
    }
  }

  // When this node is selected for translation all translation of this node
  // will be sent too.
  // All translated nodes will receive the same send states (priority, confirmation, format).
  if (module_exists('translation') && translation_supported_type($node->type) && $send_with_permission) {
    if ($translations = translation_node_get_translations($node->tnid)) {
      foreach ($translations as $translation) {
      db_update('simplenews_newsletters')
        ->condition('nid', $translation->nid)
        ->fields(array(
          's_status' => SIMPLENEWS_STATUS_SEND_PENDING,
          's_format' => $node->simplenews['s_format'],
          'priority' => $node->simplenews['priority'],
          'receipt' => $node->simplenews['receipt'],
        ))
        ->execute();
      }
    }
  }

  // Send newsletter or test newsletter
  if ($send_with_permission) {
    // Send newsletter to all subscribers
    simplenews_send_node($node);
  }
  elseif ($node->simplenews['send'] == SIMPLENEWS_COMMAND_SEND_TEST) {
    // Send test newsletter to test address(es)
    simplenews_send_test($node);
  }
*/
}

/**
 * Implements hook_node_update.
 */
function simplenews_node_update($node) {
/*
  // Flatten the simplenews 'advanced' settings array.
  // This makes sure the $node array after insert/update is equal to the
  // $node array after load.
  $node->simplenews = _simplenews_flatten_array($node->simplenews);

  $send_with_permission = $node->simplenews['send'] == SIMPLENEWS_COMMAND_SEND_NOW && user_access('send newsletter');
  if ($op == 'insert') {
    // Insert node
    $s_status = $send_with_permission ? SIMPLENEWS_STATUS_SEND_PENDING : SIMPLENEWS_STATUS_SEND_NOT;
    db_insert('simplenews_newsletters')
      ->fields(array(
        'nid' => $node->nid,
        'vid' => $node->vid,
        'tid' => $node->simplenews['tid'],
        's_status' => $s_status,
        's_format' => $node->simplenews['s_format'],
        'priority' => $node->simplenews['priority'],
        'receipt' => $node->simplenews['receipt'],
      ))
      ->execute();
  }
  else {
    // Update node
    if ($send_with_permission) {
      db_update('simplenews_newsletters')
        ->condition('nid', $node->nid)
        ->fields(array(
          'vid' => $node->vid,
          'tid' => $node->simplenews['tid'],
          's_status' => SIMPLENEWS_STATUS_SEND_PENDING,
          's_format' => $node->simplenews['s_format'],
          'priority' => $node->simplenews['priority'],
          'receipt' => $node->simplenews['receipt'],
        ))
        ->execute();
    }
    else {
      db_update('simplenews_newsletters')
        ->condition('nid', $node->nid)
        ->fields(array(
          'tid' => $node->simplenews['tid'],
          's_format' => $node->simplenews['s_format'],
          'priority' => $node->simplenews['priority'],
          'receipt' => $node->simplenews['receipt'],
        ))
        ->execute();
    }
  }

  // When this node is selected for translation all translation of this node
  // will be sent too.
  // All translated nodes will receive the same send states (priority, confirmation, format).
  if (module_exists('translation') && translation_supported_type($node->type) && $send_with_permission) {
    if ($translations = translation_node_get_translations($node->tnid)) {
      foreach ($translations as $translation) {
        db_update('simplenews_newsletters')
          ->condition('nid', $translation->nid)
          ->fields(array(
            's_status' => SIMPLENEWS_STATUS_SEND_PENDING,
            's_format' => $node->simplenews['s_format'],
            'priority' => $node->simplenews['priority'],
            'receipt' => $node->simplenews['receipt'],
          ))
          ->execute();
      }
    }
  }

  // Send newsletter or test newsletter
  if ($send_with_permission) {
    // Send newsletter to all subscribers
    simplenews_send_node($node);
  }
  elseif ($node->simplenews['send'] == SIMPLENEWS_COMMAND_SEND_TEST) {
    // Send test newsletter to test address(es)
    simplenews_send_test($node);
  }
*/
}

/**
 * Implements hook_node_delete.
 */
function simplenews_node_delete($node) {
/*
  $result = db_delete('simplenews_newsletters')
    ->condition('nid', $node->nid)
    ->execute();
  if ($result) {
    drupal_set_message(t('Newsletter %title was deleted.', array('%title' => $node->title)));
  }
*/
}

/**
 * Implements hook_node_load.
 */
function simplenews_node_load($node, $types) {
/*
  $node->simplenews = db_query('SELECT * FROM {simplenews_newsletters} WHERE nid = :nid', array(':node' => $node->nid))->fetchAssoc();
*/
}

/**
 * Implementation of hook_nodeapi().
 *
 * @todo: http://drupal.org/node/224333#php_version (&&node >> $node)
 * @todo break-up by $op: http://drupal.org/node/224333#remove_op
 * @todo Rename to hook_node_xxx(): http://drupal.org/node/224333#hook_node_xxx
 * @todo $teaser parameter changed: http://drupal.org/node/224333#build_mode
 */
function simplenews_nodeapi_OLD(&$node, $op, $teaser, $page) { }

/**
 * Validate if selected terms are Newsletter taxonomy terms.
 *
 * @param array $taxonomy Taxonomy form array of newsletter node.
 *
 * @return
 *   Array of selected Newsletter terms. Example: array(4, 12)
 *   FALSE: no Newsletter term is selected
 *
 * NOTE: This function can not handle free tagging tags.
 *       In case of free tagging see taxonomy_node_save() for example code.
 *       Note that free tagging can create new terms at node add/edit. This
 *       contradicts with the current set-up of simpelnews.
 * @todo Rename table term_data -> taxonomy_term_data: http://drupal.org/node/224333#taxonomy_tables
 */
function simplenews_validate_taxonomy($taxonomy) {
  // Get newsletter tids.
  $vid = variable_get('simplenews_vid', '');
  $terms = db_select('term_data', 't')
    ->fields('t', array('tid'))
    ->condition('vid', $vid)
    ->execute();
  foreach ($terms as $term) {
    $newsletter_tids[] = $term->tid;
  }
  // Extract selected tid's from the taxonomy form.
  if (isset($newsletter_tids) && !empty($taxonomy)) {
    $selected_terms = array();
    if (is_array($taxonomy)) {
      foreach ($taxonomy as $term) {
        if (is_array($term)) {
          foreach ($term as $tid) {
            if ($tid) {
              $selected_terms[] = $tid;
            }
          }
        }
        else if (is_object($term)) {
          $selected_terms[] = $term->tid;
        }
        else if ($term) {
          $selected_terms[] = $term;
        }
      }
    }
    // Compare selected tid's and newsletter tid's.
    $valid_terms = array_intersect($newsletter_tids, $selected_terms);
    return empty($valid_terms) ? FALSE : $valid_terms;
  }

  return FALSE;
}

/**
 * Implementation of hook_form_alter().
 * @todo Symplify the check for node form: http://drupal.org/node/224333#node_form
 * @todo Check parameters of drupal_add_js: http://drupal.org/node/224333#drupal_add_js_options
 * @todo Replace 'module' in drupal_add_js: http://drupal.org/node/224333#drupal_add_js_weight
 * @todo Perhaps add drupal_add_js to form element: http://drupal.org/node/224333#attached_js
 * @todo Replace 'class' string by array: http://drupal.org/node/224333#class_attribute_array
 */
function simplenews_form_field_ui_field_edit_form_alter(&$form, $form_state) {
//drupal_set_message('<pre>' . print_r($form, 1) . '</pre>');
  if (isset($form['vid']) && $form['vid']['#value'] == variable_get('simplenews_vid', '')) {
    // Hide critical options from newsletter vocabulary.
/*
    $form['help_simplenews_vocab'] = array(
      '#value' => t('This is the designated simplenews vocabulary.'),
      '#weight' => -1,
    );
*/
    // We display the current content type settings in a disabled form element
    // to the user. The real value passed in the form separately because
    // disabled elements do not get saved at submit.
/*
    $form['content_types']['display_only'] = $form['content_types']['nodes'];
    $form['content_types']['display_only']['#disabled'] = TRUE;
    $form['content_types']['display_only']['#description'] = t('These content type(s) are used as newsletter. They can be set in !simplenews_settings.', array('!simplenews_settings' => l('Simplenews settings', 'admin/config/simplenews/general')));
    $form['content_types']['nodes'] = array(
      '#type' => 'value',
      '#value' => $form['content_types']['nodes']['#default_value'],
    );
*/
/*
    // Free tagging can not be allowed see: simplenews_validate_taxonomy().
    $form['settings']['tags'] = array(
      '#type' => 'value',
      '#value' => FALSE,
    );
    // Multiple select does not work with simplenews.
    $form['settings']['multiple'] = array(
      '#type' => 'value',
      '#value' => FALSE,
    );
    $form['settings']['required'] = array(
      '#type' => 'value',
      '#value' => TRUE,
    );
*/
  }
}

function simplenews_form_alter(&$form, $form_state, $form_id) {
  $vid = variable_get('simplenews_vid', '');

  // Simplenews newsletter node form
  if (strpos($form_id, '_node_form')) {
    if (in_array($form['type']['#value'], variable_get('simplenews_content_types', array('simplenews')))) {

      // Available variables are based on user_mail_tokens().
      // But uses only those which can be used with uid = 0 since simplenews also sends to anonymous users.
      if (isset($form['body_field'])) {
        $form['body_field']['body']['#description'] = t("This will be the body of your newsletter. See 'Replacement patterns' for available variables.)");
      }
      //TODO It seems that core does not support any list of available tokens in the user interface :(
      $form['simplenews_subscription']['subscription_mail']['token_help'] = array(
        '#title' => t('Replacement patterns'),
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#weight' => -20,
        '#description' => t('These tokens can be used in all text fields and will be replaced on-screen and in the email. Note that simplenews-receiver tokens are not suitable for on-screen use.'),
      );
      /*
      $form['simplenews_subscription']['subscription_mail']['token_help']['help'] = array(
        '#value' => theme('token_help', 'simplenews'),
      );
      */

      if (isset($form['#node']->simplenews)) {
        $simplenews_values = $form['#node']->simplenews;
      }
      $vocabulary = taxonomy_vocabulary_load(variable_get('simplenews_vid', ''));
      if (!empty($vocabulary) && !isset($vocabulary->nodes[$form['type']['#value']])) {
        drupal_set_message(t('Invalid vocabulary setting detected. Check and <strong>save</strong> the <a href="@settings">Simplenews general settings</a>.', array('%name' => $vocabulary->name, '@settings' => url('admin/config/simplenews/general'))), 'error');
      }
      $form['simplenews'] = array(
        '#type' => 'fieldset',
        '#title' => t('Send newsletter'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#tree' => TRUE,
      );

      // Translations of newsletters don't have send and format options. Only the
      // translation source (and non translated) newsletters will get these options.
      if (module_exists('translation') && translation_supported_type($form['#node']->type) && 
          (isset($form['#node']->translation_source) || ($form['#node']->tnid && $form['#node']->tnid != $form['#node']->nid))) {
        $form['simplenews']['#description'] = t('This newsletter issue is part of a translation set. Sending this set is controlled from the <a href="@link">translation source newsletter</a>.', array('@link' => '/node/' . $form['tnid']['#value']));
        // Send option of translated newsletters are not used, but a default is
        // required to prevent errors when data is stored in the database.
        $form['simplenews']['send'] = array(
          '#type' => 'hidden',
          '#value' => SIMPLENEWS_COMMAND_SEND_NONE,
        );
        $form['simplenews']['advanced']['s_format'] = array(
          '#type' => 'hidden',
          '#value' => variable_get('simplenews_format', 'plain'),
        );
        $form['simplenews']['advanced']['priority'] = array(
          '#type' => 'hidden',
          '#value' => variable_get('simplenews_priority', SIMPLENEWS_PRIORITY_NONE),
        );
        $form['simplenews']['advanced']['receipt'] = array(
          '#type' => 'hidden',
          '#value' => variable_get('simplenews_receipt', 0),
        );
      }
      else {
        // Show newsletter sending options if newsletter has not been send yet.
        // If send a nodification is shown.
        if (!isset($simplenews_values['s_status']) || (isset($simplenews_values['s_status']) && $simplenews_values['s_status'] == SIMPLENEWS_STATUS_SEND_NOT)) {

          // Add dynamic text for send button.
          drupal_add_js(drupal_get_path('module', 'simplenews') . '/simplenews.js', 'file');

          if (user_access('send newsletter')) {
            $options[SIMPLENEWS_COMMAND_SEND_NONE] = t("Don't send now");
            $options[SIMPLENEWS_COMMAND_SEND_TEST] = t('Send one test newsletter to the test address');
            $options[SIMPLENEWS_COMMAND_SEND_NOW] = t('Send newsletter');
            $form['simplenews']['send'] = array(
              '#type' => 'radios',
              '#title' => t('Send action'),
              '#default_value' => isset($simplenews_values['send']) ? $simplenews_values['send'] : variable_get('simplenews_send', SIMPLENEWS_COMMAND_SEND_NONE),
              '#options' => $options,
              '#attributes' => array(
                'class' => 'simplenews-command-send',
              ),
            );
          }
          else {
            $options[SIMPLENEWS_COMMAND_SEND_NONE] = t("Don't send now");
            $options[SIMPLENEWS_COMMAND_SEND_TEST] = t('Send one test newsletter to the test address');
            $form['simplenews']['send'] = array(
              '#type' => 'radios',
              '#title' => t('Sending'),
              '#default_value' => isset($simplenews_values['send']) ? $simplenews_values['send'] : SIMPLENEWS_COMMAND_SEND_NONE,
              '#options' => $options,
              '#description' => t('You have no privileges to send this newsletter'),
              '#attributes' => array(
                'class' => 'simplenews-command-send',
              ),
            );
          }

          $address_default = variable_get('site_mail', ini_get('sendmail_from'));
          if (variable_get('simplenews_test_address_override', 0)) {
            $form['simplenews']['test_address'] = array(
              '#type' => 'textfield',
              '#title' => t('Test email addresses'),
              '#description' => t('Supply a comma-separated list of email addresses to be used as test addresses.'),
              '#default_value' => isset($simplenews_values['test_address']) ? $simplenews_values['test_address'] : variable_get('simplenews_test_address', $address_default),
              '#size' => 60,
              '#maxlength' => 128,
            );
          }
          else {
            $form['simplenews']['test_address'] = array(
              '#type' => 'hidden',
              '#value' => variable_get('simplenews_test_address', $address_default),
            );
          }

          $form['simplenews']['advanced'] = array(
            '#type' => 'fieldset',
            '#title' => t('Email options'),
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
          );
          // Hide format selection if there is nothing to choose.
          // The default format is plain text.
          $format_options = simplenews_format_options();
          if (count($format_options) > 1) {
            $form['simplenews']['advanced']['s_format'] = array(
              '#type' => 'select',
              '#title' => t('Email format'),
              '#default_value' => isset($simplenews_values['s_format']) ? $simplenews_values['s_format'] : variable_get('simplenews_format', 'plain'),
              '#options' => simplenews_format_options(),
            );
          }
          else {
            $form['simplenews']['advanced']['s_format'] = array(
              '#type' => 'hidden',
              '#value' => key($format_options),
            );
          }

          $form['simplenews']['advanced']['priority'] = array(
            '#type' => 'select',
            '#title' => t('Email priority'),
            '#default_value' => isset($simplenews_values['priority']) ? $simplenews_values['priority'] : variable_get('simplenews_priority', SIMPLENEWS_PRIORITY_NONE),
            '#options' => array(
              SIMPLENEWS_PRIORITY_NONE => t('none'),
              SIMPLENEWS_PRIORITY_HIGHEST => t('highest'),
              SIMPLENEWS_PRIORITY_HIGH => t('high'),
              SIMPLENEWS_PRIORITY_NORMAL => t('normal'),
              SIMPLENEWS_PRIORITY_LOW => t('low'),
              SIMPLENEWS_PRIORITY_LOWEST => t('lowest'),
            ),
          );
          $form['simplenews']['advanced']['receipt'] = array(
            '#type' => 'checkbox',
            '#title' => t('Request receipt'),
            '#return_value' => 1,
            '#default_value' => isset($simplenews_values['receipt']) ? $simplenews_values['receipt'] : variable_get('simplenews_receipt', 0),
          );
        }
        else {
          $form['simplenews']['none'] = array(
            '#type' => 'checkbox',
            '#title' => t('This newsletter has been sent'),
            '#return_value' => 0,
            '#attributes' => array(
              'checked' => 'checked',
              'disabled' => 'disabled',
            ),
          );
          $form['simplenews']['advanced']['s_format'] = array(
            '#type' => 'hidden',
            '#value' => $simplenews_values['s_format'],
          );
          $form['simplenews']['advanced']['priority'] = array(
            '#type' => 'hidden',
            '#value' => $simplenews_values['priority'],
          );
          $form['simplenews']['advanced']['receipt'] = array(
            '#type' => 'hidden',
            '#value' => $simplenews_values['receipt'],
          );
        }
      }
      $form['simplenews']['s_status'] = array(
        '#type' => 'hidden',
        '#value' => isset($simplenews_values['s_status']) ? $simplenews_values['s_status'] : SIMPLENEWS_STATUS_SEND_NOT,
      );
    }
  }
}

/**
 * Implementation of hook_cron().
 */
function simplenews_cron() {
  simplenews_mail_spool();
  simplenews_clear_spool();
}

/**
 * Implementation of hook_taxonomy_term_delete().
 *
 * Deletes subscriptions to term when term is deleted, and cleans the blocks
 * table.
 */
function simplenews_taxonomy_term_delete($term) {
  // Delete subscriptions
  db_delete('simplenews_snid_tid')
    ->condition('tid', $term->tid)
    ->execute();
  drupal_set_message(t('All subscriptions to newsletter %newsletter have been deleted.', array('%newsletter' => $term->name)));

  // Delete subscription block 
  db_delete('block')
    ->condition('module', 'simplenews')
    ->condition('delta', $term->tid)
    ->execute();
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Add simplenews subscription fields to user register form.
 * @todo: mode this function to another place in the module.
 */
function simplenews_form_user_register_form_alter(&$form, &$form_state) {
  $options = $default_value = $hidden = array();

  // Determine the newsletters to which a user can choose to subscribe.
  // Determine to which other newsletter a user is automatically subscribed.
  foreach (simplenews_get_newsletters(variable_get('simplenews_vid', ''), TRUE) as $newsletter) {
    $subscribe_new_account = variable_get('simplenews_new_account_' . $newsletter->tid, 'none');
    $opt_inout_method = variable_get('simplenews_opt_inout_' . $newsletter->tid, 'double');
    if (($subscribe_new_account == 'on' || $subscribe_new_account == 'off') && ($opt_inout_method == 'single' || $opt_inout_method == 'double')) {
      $options[$newsletter->tid] = check_plain($newsletter->name);
      $default_value[$newsletter->tid] = $subscribe_new_account == 'on';
    }
    else {
      if ($subscribe_new_account == 'silent' || ($subscribe_new_account == 'on' && $opt_inout_method == 'hidden')) {
        $hidden[] = $newsletter->tid;
      }
    }
  }

  if (count($options)) {
    $form['simplenews'] = array(
      '#type' => 'fieldset',
      '#description' => t('Select the newsletter(s) to which you wish to subscribe.'),
      '#weight' => 5,
    );
    // TODO Change 'newsletters' to 'simplenews_newsletters' for namespace.
    $form['simplenews']['newsletters'] = array(
      '#type' => 'checkboxes',
      '#options' => $options,
      '#default_value' => $default_value,
    );
  }
  if (count($hidden)) {
    $form['simplenews_hidden'] = array(
      '#type' => 'hidden',
      '#value' => implode(',', $hidden),
    );
  }
}


/**
 * Implements hook_user_insert.
 *
 * Update uid and preferred language when the new account was already subscribed.
 */
function simplenews_user_insert(&$edit, $account, $category) {
//dpm($edit);
//dpm('--insert--');
  // Use the email addres to check if new account is already subscribed.
  $subscriber = new stdClass();
  $subscriber->mail = $edit['mail'];
  $subscription = simplenews_get_subscription($subscriber);

  // If the user is subscribed, we update the subscriber with uid and language.
  if ($subscription->snid) {
    // TODO Write a function so save/update a subscription and use it here.
    db_update('simplenews_subscriptions')
      ->condition('snid', $subscription->snid)
      ->fields(array(
        'uid' => $edit['uid'],
        'language' => $edit['language'],
      ))
      ->execute();
  }
  
  // $edit['newsletter'] contains newsletters the user should be subscribed to.
  // But we leave this untouched because we only subscribe a new account
  // after account confirmation. In the meantime the content of $edit['newsletter']
  // will be stored in $edit['data'] by user module.
}

/**
 * Implements hook_user_login.
 *
 * Subscribe user to a newsletter as per registration form.
 * @todo Check if $account->data is cleaned up by this function.
 */
function simplenews_user_login(&$edit, $account) {
  // The user registation form may contain (hidden) form element to
  // subscribe to newsletters. Data of these elements are stored in
  // the $account->data variable.
  // We subscribe the user according to the (hidden) form elements.
  if (isset($account->data)) {
    $data = unserialize($account->data);
    $processed = FALSE;

    // Process hidden (automatic) subscriptions.
    if (isset($data['simplenews_hidden'])) {
      foreach (explode(',', $data['simplenews_hidden']) as $tid) {
        simplenews_subscribe_user($account->mail, $tid, FALSE, 'automatically');
      }
      unset($data['simplenews_hidden']);
      $processed = TRUE;
    }

    // Process subscription check boxes.
    if (isset($data['newsletters'])) {
      foreach (array_keys(array_filter($data['newsletters'])) as $tid) {
        simplenews_subscribe_user($account->mail, $tid, FALSE, 'website');
        $newsletters = simplenews_get_newsletters(variable_get('simplenews_vid', ''), TRUE);
        drupal_set_message(t('You have been subscribed to %newsletter.', array('%newsletter' => $newsletters[$tid]->name)));
      }
      unset($data['newsletters']);
      $processed = TRUE;
    }

    // If subscription data is processes, we remove it form the data variable.
    if ($processed) {
      $account->data = serialize($data);
    }
  }
}

/**
 * Implements hook_user_presave.
 *
 * User data (mail, status, language) is synchronized with subscriber.
 * This function handles existing user account, simplenews_user_insert takes
 * care of new accounts.
 * @see simplenews_user_insert
 */
function simplenews_user_presave(&$edit, $account, $category) {
  switch ($category) {
    case 'account':
      // We only process existing accounts.
      if ($account->uid) {
        $subscription = simplenews_get_subscription((object)array('uid' => $account->uid));
        // Only process existing subscriptions.
        if ($subscription->snid) {
          // Update mail, status and language if they are changed.
          // TODO convert this code to simplenews_subscriber_save().
          $fields = array();
          if (isset($edit['mail'])) {
            $fields['mail'] = $edit['mail'];
          }
          if (isset($edit['status']) && variable_get('simplenews_sync_account', TRUE)) {
            $fields['activated'] = $edit['status'];
          }
          if (isset($edit['language'])) {
            $fields['language'] = $edit['language'];
          }
          if (!empty($fields)) {
            $query = db_update('simplenews_subscriptions')
              ->condition('snid', $subscription->snid)
              ->fields($fields)
              ->execute();
          }
        }
      }
      break;
    case 'simplenews':
      if (user_access('subscribe to newsletters')) {
        foreach ($edit['newsletters'] as $tid => $checked) {
          if ($checked) {
            simplenews_subscribe_user($account->mail, $tid, FALSE, 'website');
          }
          else {
            simplenews_unsubscribe_user($account->mail, $tid, FALSE, 'website');
          }
        }
      }
      break;
  }
}

/**
 * Implements hook_user_cancel.
 */
function simplenews_user_cancel($edit, $account, $method) {
  // Delete subscription and all newsletter subscriptions when account is removed.
  // We don't use simplenews_get_subscription() here because the user is already
  // deleted from the {user} table.
  // TODO investigate if we perhaps /can/ use simplenews_get_subscription().
  $query = db_query("SELECT snid FROM {simplenews_subscriptions} WHERE mail = :mail", array(':mail' => $account->mail));
  if ($snid = $query->fetch()->snid) {
    if (variable_get('simplenews_sync_account', TRUE)) {
  
      // TODO Replace database calls with function.
      db_delete('simplenews_snid_tid')
        ->condition('snid', $snid)
        ->execute();
      db_delete('simplenews_subscriptions')
        ->condition('snid', $snid)
        ->execute();
    }
    else {
      // Only remove uid from subscription data when account is removed
      // TODO Replace database calls with function.
      db_update('simplenews_subscriptions')
        ->condition('uid', $account->uid)
        ->fields(array('uid' => 0))
        ->execute();
    }
  }
}

/**
 * Implements hook_user_categories.
 */
function simplenews_user_categories() {
  $output[] = array(
    'name' => 'simplenews',
    'title' => t('Newsletters'),
    'weight' => 10,
    'access callback' => 'user_access',
    'access arguments' => array('subscribe to newsletters'),
  );
  return $output;
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Add simplenews subscription management form to account category 'Newsletters'
 */
function simplenews_form_user_profile_form_alter(&$form, &$form_state) {
  if ($form['#user_category'] == 'simplenews') {
    $subscription = simplenews_get_subscription((object)$form['#user']);
    $form += _simplenews_subscription_manager_form($subscription);
    $form['subscriptions']['#title'] =  t('Newsletter subscriptions');
    unset($form['update'], $form['subscriptions']['mail']);    
  }
}

/**
 * Implements hook_user_view.
 *
 * @todo Check if hidden newsletters are not listed.
 */
function simplenews_user_view($account, $build_mode) {
  global $user;
  if ($user->uid == $account->uid || user_access('administer users')) {
    $account->content['simplenews'] = array(
      '#type' => 'user_profile_category',
      '#title' => t('Newsletters'),
    );
    // Collect newsletter to which the current user is subscribed.
    // 'hidden' newsletters are not listed.
    $newsletters = simplenews_get_newsletters(variable_get('simplenews_vid', ''));
    $subscription = simplenews_get_subscription($account);

    foreach ($newsletters as $newsletter) {
      if (isset($subscription->newsletter_subscription[$newsletter->tid]) && $subscription->newsletter_subscription[$newsletter->tid]->status == TRUE) {
        $links[] = l($newsletter->name, 'taxonomy/term/' . $newsletter->tid);
      }
    }
    if (isset($links)) {
      // TODO replace with theme('links', $links) to form a list of newsletters?
      $links = implode(', ', $links);
    }
    else {
      $links = t('None');
    }

    // When a user has no permission to subscribe and is not subscribed
    // we do not display the 'no subscriptions' message.
    if (user_access('subscribe to newsletters') || $links != t('None')) {
      $account->content['simplenews']['subscriptions'] = array(
        '#type' => 'user_profile_item',
        '#title' => t('Subscribed to'),
        '#markup' => $links,
      );
    }
    if (user_access('subscribe to newsletters')) {
      $account->content['simplenews']['my_newsletters'] = array(
        '#type' => 'user_profile_item',
        '#markup' => t('Manage <a href="!url">subscriptions</a>', array('!url' => url('user/'. $account->uid .'/edit/simplenews'))),
      );
    }
  }
}

/**
 * Implementation of hook_block().
 * @todo break-up by $op: http://drupal.org/node/224333#remove_op
 */
function simplenews_block_OLD($op = 'list', $delta = 0, $edit = array()) { }

/**
 * Implementation of hook_forms().
 *
 * All form blocks are build using simplenews_block_form().
 * hook_forms() is required to provide unique form id for each block form.
 */
function simplenews_forms() {
  foreach (simplenews_get_newsletters(variable_get('simplenews_vid', ''), TRUE) as $newsletter) {
    $forms['simplenews_block_form_' . $newsletter->tid] = array(
      'callback' => 'simplenews_block_form',
      'callback arguments' => array($newsletter->tid),
    );
  }
  return $forms;
}

/**
 * Load a user or creates a dummy anonymous user.
 *
 * @return account
 *   object (
 *     mail,   email address
 *     uid,    uid or 0 for anonymous
 *   )
 * @todo Rewrite to use the new user_load(): http://drupal.org/node/224333#user_load_multiple
 */
function _simplenews_user_load($mail) {
  $account = user_load_by_mail($mail);
  if ($account === FALSE) {
    // Construct anonymous user since we don't have a user that matches that e-amil.
    $account = new stdClass();
    $account->uid = 0;
    $account->mail = $mail;
  }
  return $account;
}

/**
 * Subscribe a user to a newsletter or send a confirmation mail.
 *
 * The $confirm parameter determines the action:
 *   FALSE = The user is subscribed
 *   TRUE  = User receives an email to verify the address and complete the subscription
 * A new subscription account is created when the user is subscribed to the first newsletter
 *
 * @param string $mail
 *   The email address to subscribe to the newsletter.
 * @param integer $tid
 *   The term ID of the newsletter.
 * @param boolean $confirm
 *   TRUE = send confirmation mail; FALSE = subscribe immediate to the newsletter
 * @param string $preferred_language
 *   The language code (i.e. 'en', 'nl') of the user preferred language.
 *   Use '' for the site default language.
 *   Use NULL for the language of the current page.
 * @param string $source
 *   Indication for source of subscription. Simplenews uses these sources:
 *    website: via any website form (with or without confirmation email)
 *    mass subscribe: mass admin UI
 *    mass unsubscribe: mass admin UI
 *    action: Drupal actions
 * @todo Replace time(): http://drupal.org/node/224333#time
 */
function simplenews_subscribe_user($mail, $tid, $confirm = TRUE, $source = 'unknown', $preferred_language = NULL) {
  global $language;

  // Get current subscriptions if any.
  $account = (object) array(
    'mail' => $mail,
  );
  $subscription = simplenews_get_subscription($account);

  // If user is not subscribed to ANY newsletter, create a subscription account
  if ($subscription->snid == 0) {
    // To subscribe a user:
    //   - Fetch the users uid.
    //   - Determine the user preferred language.
    //   - Add the user to the database.
    //   - Get the full subscription object based on the mail address.
    // Note that step 3 gets subscription data based on mail address because the uid can be 0 (for anonymous users)
    $account = _simplenews_user_load($mail);

    // If the site is multilingual:
    //  - Anonymous users are subscribed with their preferred language
    //    equal to the language of the current page.
    //  - Registered users will be subscribed with their default language as
    //    set in their account settings.
    // By default the preferred language is not set.
    if (variable_get('language_count', 1) > 1) {
      if ($account->uid) {
        $preferred_language = $account->language;
      }
      else {
        $preferred_language = isset($preferred_language) ? $preferred_language : $language->language;
      }
    }
    else {
      $preferred_language = '';
    }

    db_insert('simplenews_subscriptions')
      ->fields(array(
        'mail' => $mail,
        'uid' => $account->uid,
        'language' => $preferred_language,
        'activated' => 1,
      ))
      ->execute();
    $subscription = simplenews_get_subscription($account);
  }

  if ($confirm) {
    // Send confirmation email to user to complete subscription or to tell
    // them that he or she is already subscribed.
    // Confirmation mail is in the user preferred language which is by default the language_default().
    $params['from'] = _simplenews_set_from();
    $params['context']['newsletter'] = taxonomy_term_load($tid);
    $params['context']['account'] = $subscription;
    drupal_mail('simplenews', 'subscribe', $mail, $subscription->language, $params, $params['from']['address']);
  }
  elseif (!isset($subscription->tids[$tid])) {
    // Add user to newsletter relationship if not already subscribed.

    // Check if user is (un)subscribed to this newsletter.
    // Resubscribe or add new subscription.
    if (isset($subscription->newsletter_subscription[$tid])) {
      db_update('simplenews_snid_tid')
        ->condition('snid', $subscription->snid)
        ->condition('tid', $tid)
        ->fields(array(
          'status' => SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED,
          'timestamp' => REQUEST_TIME,
          'source' => $source,
        ))
        ->execute();
    }
    else {
      db_insert('simplenews_snid_tid')
        ->fields(array(
          'snid' => $subscription->snid,
          'tid' => $tid,
          'status' => SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED,
          'timestamp' => REQUEST_TIME,
          'source' => $source,
        ))
        ->execute();
    }

    // Execute simplenews subscribe trigger.
    simplenews_call_actions('subscribe', $subscription);
  }
  return TRUE;
}

/**
 * Unsubscribe a user from a newsletter or send a confirmation mail.
 *
 * The $confirm parameter determines the action:
 *   FALSE = The user is unsubscribed
 *   TRUE  = User receives an email to verify the address and complete the unsubscription
 * The subscription account is deleted when the user is unsubscribed to the last newsletter
 *
 * @param string $mail The email address to unsubscribe from the newsletter.
 * @param integer $tid The term ID of the newsletter.
 * @param boolean $confirm TRUE = send confirmation mail; FALSE = unsubscribe immediate from the newsletter
 * @param string $source
 *   Indication for source of unsubscription. Simplenews uses these sources:
 *    website: via any website form (with or without confirmation email)
 *    mass subscribe: mass admin UI
 *    mass unsubscribe: mass admin UI
 *    action: Drupal actions
 * @todo Replace time(): http://drupal.org/node/224333#time
 */
function simplenews_unsubscribe_user($mail, $tid, $confirm = TRUE, $source = 'unknown') {
  $account = (object) array(
    'mail' => $mail,
  );
  $subscription = simplenews_get_subscription($account);

  // The unlikely case that a user is unsubscribed from a non existing newsletter is logged
  if (!$newsletter = taxonomy_term_load($tid)) {
    watchdog('simplenews', 'Attempt to unsubscribe from non existing newsletter term ID %id', array('%id' => $tid), WATCHDOG_ERROR);
    return FALSE;
  }

  if ($confirm) {
    // Send confirmation email to user to complete unsubscription
    // or to tell them that he or she is not subscribed
    // Confirmation mail is in the user preferred language.
    $params['from'] = _simplenews_set_from();
    $params['context']['newsletter'] = $newsletter;
    $params['context']['account'] = $subscription;
    drupal_mail('simplenews', 'unsubscribe', $mail, $subscription->language, $params, $params['from']['address']);
  }
  elseif (isset($subscription->tids[$tid])) {
    // Unsubscribe the user from the newsletter.
    db_update('simplenews_snid_tid')
        ->condition('snid', $subscription->snid)
        ->condition('tid', $tid)
      ->fields(array(
        'status' => SIMPLENEWS_SUBSCRIPTION_STATUS_UNSUBSCRIBED,
        'timestamp' => REQUEST_TIME,
        'source' => $source
      ))
      ->execute();

    // Execute simplenews unsubscribe trigger
    simplenews_call_actions('unsubscribe', $subscription);
  }

  return TRUE;
}

/**
 * Check if the email address is subscribed to the given newsletter.
 *
 * @param string $mail email address
 * @param integer $tid newsletter term id
 *
 * @return boolean TRUE = email address is subscribed to given newsletter term id
 * @todo Do not use SELECT COUNT: http://drupal.org/node/224333#select_count
 */
//@TODO only return active subscriptions.
function simplenews_user_is_subscribed($mail, $tid, $reset = FALSE) {
  static $subscribed = array();

  if ($reset) {
    $subscribed = array();
  }

  if (!isset($subscribed[$mail][$tid])) {
    $query = db_select('simplenews_subscriptions', 's');
    $query->innerJoin('simplenews_snid_tid', 't', 's.snid = t.snid');
    $query->fields('s', array('snid'))
      ->condition('s.mail', $mail)
      ->condition('t.tid', $tid)
      ->condition('t.status', SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED);    
    $subscribed[$mail][$tid] = (booL)$query->fetchField();
  }

  return $subscribed[$mail][$tid];
}

/**
 * Get the subscription object for the given account.
 *
 * Account is defined by (in order of preference) snid, email address or uid.
 * If the account is not subscribed a default subscription object is returned
 * containing all available account info.
 *
 * @param object $account account details. Containing one or none of these items:
 *  object(
 *    snid :  subscription id
 *    mail :  email address
 *    uid  :  user id
 *  )
 *
 * @return subscription object
 *   object(
 *     snid :  subscription id. 0 if account is not subscribed
 *     tids :  array of tid's of active subscriptions
 *     newsletter_subscriptions : array of newsletter subscription objects
 *     uid  :  user id. 0 if account is anonymous user
 *     mail :  user email address. empty if email is unknown
 *     name :  always empty. Added for compatebility with user account object
 *     language : language object. User preferred or default language
 *   )
 *
 * TODO: Concider changing the subscription object:
 *   subscribed : array of subscription objects of newsletters the user is subscribed to
 *   unsubscribed : array of subscription objects of newsletters the user is unsubscribed from
 *   Both arrays have newsletter ID (tid) as key.
 *   Drop 'tids' and 'newsletter_subscriptions'
 */
function simplenews_get_subscription($account) {
  // Load subscription data based on available account informatioin
  // NOTE that the order of checking for snid, mail and uid is critical. mail must be checked *before* uid. See simplenews_subscribe_user()
  $query = db_select('simplenews_subscriptions', 's');
  $query->leftJoin('users', 'u', 'u.uid = s.uid');
  $query->fields('s', array('snid', 'activated', 'mail', 'uid', 'language'))
    ->fields('u', array('name'));
  if (isset($account->snid)) {
    $query->condition('s.snid', $account->snid);
  }
  elseif (isset($account->mail)) {
    $query->where('LOWER(s.mail) = LOWER(:mail)', array(':mail' => $account->mail));
  }
  elseif (isset($account->uid) && $account->uid > 0) {
    $query->condition('s.uid', $account->uid);
  }
  $result = $query->execute();

  if ($result->rowCount()) {
    $subscription = $result->fetch();
    $newsletter_subscriptions = db_query("SELECT tid, status, timestamp, source FROM {simplenews_snid_tid} WHERE snid = :snid", array(':snid' => $subscription->snid));
    $subscription->tids = array();
    foreach ($newsletter_subscriptions as $newsletter_subscription) {
      if ($newsletter_subscription->status == SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED) {
        $subscription->tids[$newsletter_subscription->tid] = $newsletter_subscription->tid;
      }
      $subscription->newsletter_subscription[$newsletter_subscription->tid] = $newsletter_subscription;
    }
    $subscription->language = user_preferred_language($subscription);
  }
  else {
    // Account is unknown in subscription table. Create default subscription object
    $subscription = new stdClass();
    $subscription->name = '';
    $subscription->uid = isset($account->uid) ? $account->uid : 0;
    $subscription->mail = isset($account->mail) ? $account->mail : '';
    $subscription->language = language_default();
    $subscription->snid = 0;
    $subscription->tids = array();
    $subscription->newsletter_subscription = array();
  }

  return $subscription;
}

/**
 * Delete every subscription for the given subscription ID.
 *
 * @param integer $snid subscription id
 */
function simplenews_delete_subscription($snid) {
  $account = db_query("SELECT mail FROM {simplenews_subscriptions} WHERE snid = :snid", array(':snid' => $snid))->fetch();
    db_delete('simplenews_snid_tid')
      ->condition('snid', $snid)
      ->execute();
    db_delete('simplenews_subscriptions')
      ->condition('snid', $snid)
      ->execute();
  watchdog('simplenews', 'User %email deleted from the mailing list.', array('%email' => $account->mail), WATCHDOG_NOTICE);
}

/**
 * Build subscription manager form.
 *
 * @param object $subscription subscription object
 */
function _simplenews_subscription_manager_form($subscription) {
  $form = array();
  $options = array();
  $default_value = array();
  global $language;

  // Get newsletters for subscription form checkboxes.
  // Newsletters with opt-in/out method 'hidden' will not be listed.
  foreach (simplenews_get_newsletters(variable_get('simplenews_vid', '')) as $newsletter) {
    $options[$newsletter->tid] = check_plain($newsletter->name);
    $default_value[$newsletter->tid] = FALSE;
  }

  $form['subscriptions'] = array(
    '#type' => 'fieldset',
    '#description' => t('Select the newsletter(s) to which you want to subscribe or unsubscribe.'),
  );
  $form['subscriptions']['newsletters'] = array(
    '#type' => 'checkboxes',
    '#options' => $options,
    '#default_value' => array_merge($default_value, (array) $subscription->tids),
  );

  // If current user is logged in, just display email.
  // Anonymous users see an email box and will receive confirmations
  if ($subscription->mail) {
    $form['subscriptions']['#title'] = t('Subscriptions for %mail', array('%mail' => $subscription->mail));
    $form['subscriptions']['mail'] = array(
      '#type' => 'value',
      '#value' => $subscription->mail,
    );
    $form['update'] = array(
      '#type' => 'submit',
      '#value' => t('Update'),
      '#weight' => 20,
    );
  }
  else {
    $form['subscriptions']['#title'] = t('Manage your newsletter subscriptions');
    $form['subscriptions']['mail'] = array(
      '#type' => 'textfield',
      '#title' => t('email'),
      '#size' => 20,
      '#maxlength' => 128,
      '#weight' => 10,
      '#required' => TRUE,
    );
    $form['subscribe'] = array(
      '#type' => 'submit',
      '#value' => t('Subscribe'),
      '#weight' => 20,
    );
    $form['unsubscribe'] = array(
      '#type' => 'submit',
      '#value' => t('Unsubscribe'),
      '#weight' => 30,
    );
  }
  return $form;
}

/**
 * Create a list of recent newsletters.
 *
 * @param integer $tid term id of selected newsletter
 * @param integer $count number of newsletters in the list
 * @todo Rename table term_node -> taxonomy_term_node: http://drupal.org/node/224333#taxonomy_tables
 * @todo Replace 'class' string by array: http://drupal.org/node/224333#class_attribute_array
 */
function simplenews_recent_newsletters($tid, $count = 5) {
  $query = db_select('node', 'n');
  $query->innerJoin('term_node', 't', 'n.vid = t.vid');
  $query->innerJoin('simplenews_newsletters', 'sn', 'n.nid = sn.nid');
  $query->fields('n', array('nid', 'title'))
    ->condition('t.tid', $tid)
    ->condition('n.status', NODE_PUBLISHED)
    ->condition('sn.s_status', SIMPLENEWS_STATUS_SEND_NOT, '!=')
    ->orderBy('n.created', 'DESC')
    ->range(0, $count);
  $titles = array();
  foreach ($query->execute() as $item) {
    $titles[$item->nid]['data'] = l($item->title, 'node/' . $item->nid);
  }
  return $titles;
}

/**
 * Newsletter (un)subscription form for authenticated and anonymous users.
 *
 * @param $tid term id of selected newsletter.
 *
 * @see simplenews_block_form_validate()
 * @see simplenews_block_form_submit()
 * @todo Add $form to drupal_get_form() calback functions: http://drupal.org/node/224333#hook_forms_signature
 */
function simplenews_block_form(&$form_state, $tid) {
  global $user;
  $form = array();

  if ($user->uid) {
    if (simplenews_user_is_subscribed($user->mail, $tid)) {
      $submit_text = t('Unsubscribe');
      $form['action'] = array(
        '#type' => 'value',
        '#value' => 'unsubscribe',
      );
    }
    else {
      $submit_text = t('Subscribe');
      $form['action'] = array(
        '#type' => 'value',
        '#value' => 'subscribe',
      );
    }
    $form['display_mail'] = array(
      '#type' => 'item',
      '#title' => t('User'),
      '#value' => check_plain($user->name),
    );
    $form['mail'] = array(
      '#type' => 'value',
      '#value' => $user->mail,
    );
  }
  else {
    $form['mail'] = array(
      '#type' => 'textfield',
      '#title' => t('Email'),
      '#size' => 20,
      '#maxlength' => 128,
      '#required' => TRUE,
    );
    $submit_text = t('Subscribe');
    $form['action'] = array(
      '#type' => 'value',
      '#value' => 'subscribe',
    );
  }

  // All block forms use the same validate and submit function.
  // #tid carries the tid for processing of the right newsletter issue term.
  $form['#tid'] = $tid;
  $form['#validate'][] = 'simplenews_block_form_validate';
  $form['#submit'][] = 'simplenews_block_form_submit';
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => isset($submit_text) ? $submit_text : t('Save'),
  );
  return $form;
}

function simplenews_block_form_validate($form, &$form_state) {
  if (!valid_email_address($form_state['values']['mail'])) {
    form_set_error('mail', t("The email address you supplied is not valid."));
  }
}

function simplenews_block_form_submit($form, &$form_state) {
  global $user;
  $tid = $form['#tid'];
  $account = _simplenews_user_load($form_state['values']['mail']);

  // If email belongs to the current registered user, don't send confirmation.
  // Other addresses receive a confirmation if double opt-in is selected.
  if ($account->uid && $account->uid == $user->uid) {
    $confirm = FALSE;
  }
  else {
    $confirm = variable_get('simplenews_opt_inout_' . $tid, 'double') == 'double';
  }

  switch ($form_state['values']['action']) {
    case 'subscribe':
      simplenews_subscribe_user($form_state['values']['mail'], $tid, $confirm, 'website');
      if ($confirm) {
        drupal_set_message(t('You will receive a confirmation email shortly containing further instructions on how to complete your subscription.'));
      }
      else {
        drupal_set_message(t('You have been subscribed.'));
      }
      break;
    case 'unsubscribe':
      simplenews_unsubscribe_user($form_state['values']['mail'], $tid, $confirm, 'website');
      if ($confirm) {
        drupal_set_message(t('You will receive a confirmation email shortly containing further instructions on how to complete the unsubscription process.'));
      }
      else {
        drupal_set_message(t('You have been unsubscribed.'));
      }
      break;
  }
}

/**
 * Send newsletter node to subcribers.
 *
 * @param integer or object $node Newsletter node to be sent. integer = nid; object = node object
 * @param array $accounts  account objects to send the newsletter to.
 *   account = object (
 *     snid     = subscription id. 0 if no subscription record exists
 *     tids     = array(tid) array of newsletter tid's
 *     uid      = user id. 0 if subscriber is anonymous user.
 *     mail     = user email address.
 *     name     = <empty>. Added for compatebility with user account object
 *     language = language object. User preferred of default language
 *   )
 *   NOTE: either snid, mail or uid is required.
 */
function simplenews_send_node($node, $accounts = array()) {
  $mails = array();

  if (is_numeric($node)) {
    $node = node_load($node);
  }
  if (is_object($node)) {
    $from = _simplenews_set_from($node);
    $params['context']['node'] = $node;
    $params['from'] = $from;

    $node_data['tid'] = $node->simplenews['tid'];
    $node_data['nid'] = $node->nid;
    $node_data['vid'] = $node->vid;


    if (empty($accounts)) {
      // No accounts specified. Get email address of all accounts subscribed to this newsletter.
      $query = db_select('simplenews_subscriptions', 's');
      $query->innerJoin('simplenews_snid_tid', 't', 's.snid = t.snid');
      $query->fields('s', 'mail')
        ->condition('s.activated', 1)
        ->condition('t.tid', $node_data['tid'])
        ->condition('t.status', SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED);
      foreach ($query->execute() as $account) {
        $mails[] = array(
          'mail' => $account->mail,
        );
      }
    }
    else {
      // Get email address of specified accounts.
      foreach ($accounts as $account) {
        $account = simplenews_get_subscription($account);
        $mails[] = array(
          'mail' => $account->mail,
        );
      }
    }

    // To send the newsletter, the node id and target email addresses
    // are stored in the spool.
    // When cron is not used the newsletter is send immediately to the emails
    // in the spool. When cron is used newsletters are send to addresses in the
    // spool during the next (and following) cron run.
    foreach ($mails as $mail) {
      $data = array_merge($node_data, $mail);
      simplenews_save_spool($data);
    }
    if (variable_get('simplenews_use_cron', TRUE) == FALSE) {
      simplenews_mail_spool($node_data['nid'], $node_data['vid'], 999999);
      drupal_set_message(t('Newsletter sent.'));
      simplenews_clear_spool();
    }
    else {
      drupal_set_message(t('Newsletter pending.'));
    }
  }
}

/**
 * Send test version of newsletter.
 *
 * @param integer or object $node Newsletter node to be sent. Integer = nid; Object = node object
 */
function simplenews_send_test($node) {
  if (is_numeric($node)) {
    $node = node_load($node);
  }
  if (is_object($node)) {
    // Send the test newsletter to the test address(es) specified in the node.
    // Build array of test email addresses
    $mails = explode(',', $node->simplenews['test_address']);

    // Send newsletter to test addresses.
    // Emails are send direct, not using the spool.
    foreach ($mails as $mail) {
      $mail = trim($mail);
      if (!empty($mail)) {
        $result = simplenews_mail_mail($node->nid, $node->vid, $mail, 'test');
      }
    }
    if ($result) {
      drupal_set_message(t('Test newsletter sent to %recipient.', array('%recipient' => $node->simplenews['test_address'])));
    }
  }
}

/**
 * Implementation of hook_mail().
 *
 * Send simplenews mails using drupal mail API
 * @see drupal_mail()
 *
 * @param $key: node | test | subscribe | unsubscribe
 * @param array $message message array
 *          [from]
 *          [headers][From]
 *          [language]            : preferred message language
 * @param array $params parameter array
 *          [context][node]       : node object of message to be sent
 *          [context][snid]       : used for $key = subscribe or unsubscribe
 *          [context][from_name]  : name of mail sender or site name (optional)
 *          [context][account]    : account details of recipient
 *          [from]                : array('address' => 'noreply@example.org', 'formatted' =>  'site name <noreply@example.org>')
 *          [newsletter]          : newsletter object (tid, name)
 *          [tokens]              : tokens for variable replacement. Defaults to: user_mail_tokens()
 * @todo Replace drupal_clone: http://drupal.org/node/224333#drupal_clone
 */
function simplenews_mail($key, &$message, $params) {
  $context = $params['context'];

  switch ($key) {
    case 'node':
    case 'test':

      // Message header, body and mail headers are buffered to increase
      // perfomance when sending multiple mails. Buffered data only contains
      // general data, no recipient specific content. Tokens are used
      // for recipient data and will later be replaced.
      // When mailing multiple newsletters in one page call or cron run,
      // data is once stored and subsequently retreived from the
      // static $messages variable.
      // $message buffer is node and language specific.
      static $messages = array();

      // By default the the node is send which is supplied in the function call.
      // When translation is used, the availability of translations is checked
      // and when available the translation of the preferred language is selected.
      $nid = $context['node']->nid;
      $langcode = $message['language']->language;
      if (module_exists('translation')) {
        // If the node has translations and a translation is required
        // the equivalent of the node in the required langugage is used
        // or the base node (nid == tnid) is used.
        if ($tnid = $context['node']->tnid) {
          if ($langcode != $context['node']->language) {
            $translations = translation_node_get_translations($tnid);
            // A translation is available in the preferred language.
            if ($translation = $translations[$langcode]) {
              $nid = $translation->nid;
              $langcode = $translation->language;
            }
            else {
              // No translation found which matches the preferred language.
              foreach ($translations as $translation) {
                if ($translation->nid == $tnid) {
                  $nid = $tnid;
                  $langcode = $translation->language;
                  break;
                }
              }
            }
          }
        }
        // If a translation of the node is used and this node is not available in
        // the message buffer, then load this node.
        if ($nid != $context['node']->nid && !isset($messages[$nid][$langcode])) {
          $context['node'] = node_load($nid);
        }
      }

      // Check if this node-language pair has been buffered.
      // If not, build the message and store it for later use.
      if (!isset($messages[$nid][$langcode])) {

        // Use the default theme to render the email content.
        // We temporary clear the $custom_theme to prevent the admin theme
        // from being used when the newsletter is sent from the
        // node add/edit form and the admin theme is other than the
        // default theme. When no $custom_theme is set, the 
        // After theming the email $custom_theme is restored.
        global $custom_theme;
        $org_cutom_theme = $custom_theme;
        $custom_theme = '';

        $node = clone $context['node'];

        // Add simplenews specific header data
        $headers = array_merge($message['headers'], _simplenews_headers($node, $params['from']['address']));
        $headers['From'] = $params['from']['formatted'];
        $message['headers'] = $messages[$nid][$langcode]['headers'] = $headers;

        // Build email subject
        if ($tid = $node->simplenews['tid']) {
          $term = taxonomy_term_load($tid);
          // Translate the newsletter term name if simplenews vocabulary uses Localized terms.
          $name = _simplenews_tt_newsletter_name($term, $langcode);
        }
        else {
          $name = t('Unassigned newsletter');
        }
        $subject = variable_get('simplenews_email_subject_' . $term->tid, '[[simplenews-newsletters-name]] [title-raw]');
        //TODO May need to re-build the $context var to support replacement of 'node' type tokens.
        $subject = token_replace($subject, $context, array('sanatize' => FALSE));
        $subject = str_replace(array("\r", "\n"), '', $subject);
        $message['subject'] = $messages[$nid][$langcode]['subject'] = $subject;

        // Build message body
        // Processing node body mimics node_view() with full node view
        $node->build_mode = 'email_' . $node->simplenews['s_format'];
        $node = node_build_content($node, FALSE, TRUE);
        $content = drupal_render($node->content);
        $node->body = $content;
        unset($node->teaser);
        // Set a flag to prevent token replacement during node alter.
        $node->simplenews_mail = TRUE;
        node_invoke_nodeapi($node, 'alter', FALSE, TRUE);
        unset($node->simplenews_mail);

        $body = theme(array('simplenews_newsletter_body__' . $context['node']->simplenews['tid'], 'simplenews_newsletter_body'), array('node' => $node, 'language' => $message['language']));

        // Buffer body text node and language specific
        $messages[$nid][$langcode]['body'] = $body;

        if (variable_get('simplenews_opt_inout_' . $tid, 'double') != 'hidden') {
          // Build and buffer message footer
          $footer = theme(array('simplenews_newsletter_footer__' . $context['node']->simplenews['tid'], 'simplenews_newsletter_footer'), array('node' => $context['node'], 'key' => $key, 'language' => $message['language']));
          $messages[$nid][$langcode]['footer'] = $footer;
        }

        // Restore the custom theme.
        $custom_theme = $org_cutom_theme;
      }
      else {
        // Get message data from buffer
        $message['headers'] = $messages[$nid][$langcode]['headers'];
        $message['subject'] = $messages[$nid][$langcode]['subject'];
        $body               = $messages[$nid][$langcode]['body'];
        $footer             = $messages[$nid][$langcode]['footer'];
      }

      // Build message body, replace tokens.
      // Convert to plain text if required.
      $message['body']['body'] = token_replace($body, $context, array('sanatize' => FALSE));
      if ($context['node']->simplenews['s_format'] == 'plain') {
        $message['body']['body'] = simplenews_html_to_text($message['body']['body'], variable_get('simplenews_hyperlinks_' . $context['node']->simplenews['tid'], 1));
      }

      // Build message footer, replace tokens.
      $message['body']['footer'] = token_replace($footer, $context, array('sanatize' => FALSE));

      // Add user specific header data.
      $message['headers']['List-Unsubscribe'] = token_replace('[simplenews-unsubscribe-url]', $context, array('sanatize' => FALSE));

      break;
    case 'subscribe':
      // Use formatted from address "name" <mail_address>
      $message['headers']['From'] = $params['from']['formatted'];

      $message['subject'] = _simplenews_subscription_confirmation_text('subscribe_subject', $langcode);
      $message['subject'] = token_replace($message['subject'], $context, array('sanatize' => FALSE));

      if (simplenews_user_is_subscribed($context['account']->mail, $context['newsletter']->tid)) {
        $message['body'] = _simplenews_subscription_confirmation_text('subscribe_subscribed', $langcode, array('sanatize' => FALSE));
        $message['body'] = token_replace($message['body'], $context);
      }
      else {
        $message['body'] = _simplenews_subscription_confirmation_text('subscribe_unsubscribed', $langcode);
        $message['body'] = token_replace($message['body'], $context, array('sanatize' => FALSE));
      }
      break;
    case 'unsubscribe':
      // Use formatted from address "name" <mail_address>
      $message['headers']['From'] = $params['from']['formatted'];

      $message['subject'] = _simplenews_subscription_confirmation_text('subscribe_subject', $langcode);
      $message['subject'] = token_replace($message['subject'], $context, array('sanatize' => FALSE));

      if (simplenews_user_is_subscribed($context['account']->mail, $context['newsletter']->tid)) {
        $message['body'] = _simplenews_subscription_confirmation_text('unsubscribe_subscribed', $langcode);
        $message['body'] = token_replace($message['body'], $context, array('sanatize' => FALSE));
      }
      else {
        $message['body'] = _simplenews_subscription_confirmation_text('unsubscribe_unsubscribed', $langcode);
        $message['body'] = token_replace($message['body'], $context, array('sanatize' => FALSE));
      }
      break;
  }

  // Debug message to check for outgoing emails messages.
  // Debug message of node and test emails is set in simplenews_mail_mail().
  if (variable_get('simplenews_debug', FALSE) && $key != 'node' && $key != 'test') {
    watchdog('simplenews', 'Outgoing email. Message type: %type<br />Subject: %subject<br />Recipient: %to', array('%type' => $key, '%to' => $message['to'], '%subject' => $message['subject']), WATCHDOG_DEBUG);
  }

}

/**
 * Send a node to an email address.
 *
 * @param $nid node id of newsletter node
 * @param $vid revision id of newsletter node
 * @param $mail target email address
 * @param $key email key [node|test]
 *
 * @return TRUE if email is succesfully delivered by php mail()
 */
function simplenews_mail_mail($nid, $vid, $mail, $key = 'node') {
  // Get subscription data for recipient and language
  $account = new stdClass();
  $account->mail = $mail;
  $subscription = simplenews_get_subscription($account);
  $params['context']['account'] = $subscription;

  // Get node data for the mail
  $node = node_load($nid, $vid);
  if (is_object($node)) {
    $params['from'] = _simplenews_set_from($node);
    $params['context']['newsletter'] = taxonomy_term_load($node->simplenews['tid']);
    $params['context']['node'] = $node;

    // Send mail
    if (module_exists('mimemail')) {
      // If mimemail module is installed ALL emails are send via this module.
      // drupal_mail() builds the content of the email but does NOT send.
      $message = drupal_mail('simplenews', $key, $subscription->mail, $subscription->language, $params, $params['from']['formatted'], FALSE);
      $to = isset($message['params']['context']['account']) ? $message['params']['context']['account'] : $message['to'];
      $plain = $message['params']['context']['node']->simplenews['s_format'] == 'plain' ? TRUE : NULL;
      $plain_text = $plain ? $message['body'] : simplenews_html_to_text($message['body'], TRUE);
      $files = isset($message['params']['context']['node']->files) ? $message['params']['context']['node']->files : array();
      $message['result'] = mimemail(
        $message['from'], 
        $to, 
        $message['subject'], 
        $message['body'], 
        $plain, 
        $message['headers'], 
        $plain_text, 
        $files, 
        ''
      );
    }
    else {
      $message = drupal_mail('simplenews', $key, $subscription->mail, $subscription->language, $params, $params['from']['formatted'], TRUE);
    }

    // Log sent result in watchdog.
    if (variable_get('simplenews_debug', FALSE)) {
      if (module_exists('mimemail')) {
        $via_mimemail = t('Sent via Mime Mail');
      }
      //TODO Add line break before %mimemail.
      if ($message['result']) {
        watchdog('simplenews', 'Outgoing email. Message type: %type<br />Subject: %subject<br />Recipient: %to %mimemail', array('%type' => $key, '%to' => $message['to'], '%subject' => $message['subject'], '%mimemail' => $via_mimemail), WATCHDOG_DEBUG);
      }
      else {
        watchdog('simplenews', 'Outgoing email failed. Message type: %type<br />Subject: %subject<br />Recipient: %to %mimemail', array('%type' => $key, '%to' => $message['to'], '%subject' => $message['subject'], '%mimemail' => $via_mimemail), WATCHDOG_ERROR);
      }
    }

    // Build array of sent results for spool table and reporting.
    if ($message['result']) {
      $message['result'] = array(
        'status' => SIMPLENEWS_SPOOL_DONE,
        'error' => FALSE,
      );
    }
    else {
      // This error may be caused by faulty mailserver configuration or overload.
      // Mark "pending" to keep trying.
      $message['result'] = array(
        'status' => SIMPLENEWS_SPOOL_PENDING,
        'error' => TRUE,
      );
    }

  }
  else {
    // Node could not be loaded. The node is probably deleted while pending to be sent.
    // This error is not recoverable, mark "done".
    $message['result'] = array(
      'status' => SIMPLENEWS_SPOOL_DONE,
      'error' => TRUE,
    );
    watchdog('simplenews', 'Newsletter not send: newsletter issue does not exist (nid = @nid; vid = @vid).', array('@nid' => $message['nid'], '@vid' => $message['vid']), WATCHDOG_ERROR);
  }

  return isset($message['result']) ? $message['result'] : FALSE;
}

/**
 * Send simplenews newsletters from the spool.
 *
 * Individual newsletter emails are stored in database spool.
 * Sending is triggered by cron or immediately when the node is saved.
 * Mail data is retreived from the spool, rendered and send one by one
 * If sending is succesful the message is marked as send in the spool.
 * @todo Replace time(): http://drupal.org/node/224333#time
 */
function simplenews_mail_spool($nid = NULL, $vid = NULL, $limit = NULL) {
  // Send pending messages from database cache
  // A limited number of mails is retrieved from the spool
  $limit = isset($limit) ? $limit : variable_get('simplenews_throttle', 20);
  if ($messages = simplenews_get_spool(SIMPLENEWS_SPOOL_PENDING, $nid, $vid, $limit)) {
    $count_fail = $count_success = 0;

    // Get PHP maximum execution time. 30 seconds default.
    $max_execution_time = ini_get('max_execution_time') ? ini_get('max_execution_time') : SIMPLENEWS_MAX_EXECUTION_TIME;

    _simplenews_measure_usec(TRUE);

    foreach ($messages as $key => $message) {
      $result = simplenews_mail_mail($message['nid'], $message['vid'], $message['mail']);

      // Update spool status.
      // This is not optimal for performance but prevents duplicate emails
      // in case of PHP execution time overrun.
      simplenews_update_spool(array($key), $result);
      if ($result['status'] == SIMPLENEWS_SPOOL_DONE) {
        $count_success++;
      }
      if ($result['error']) {
        $count_fail++;
      }

      // Check every n emails if we exceed the limit.
      // When PHP maximum execution time is almost elapsed we interrupt
      // sending. The remainder will be sent during the next cron run.
      if (++$check_counter >= SIMPLENEWS_SEND_CHECK_INTERVAL) {
        $check_counter = 0;
        // Break the sending if a percentage of max execution time was exceeded.
        $elapsed = _simplenews_measure_usec();
        if ($elapsed > SIMPLENEWS_SEND_TIME_LIMIT * $max_execution_time) {
          watchdog('simplenews', 'Sending interrupted: PHP maximum execution time almost exceeded. Remaining newsletters will be sent during the next cron run. If this warning occurs regularly you should reduce the !cron_throttle_setting.', array('!cron_throttle_setting' => l(t('Cron throttle setting'), 'admin/config/simplenews/mail')), WATCHDOG_WARNING);
          break;
        }
      }
    }

    // Update sent status for newsletter admin panel.
    simplenews_send_status_update();

    // Report sent result and elapsed time. On Windows systems retrusage() is
    // not implemented and hence no elapsed time is available.
    if (function_exists('getrusage')) {
      watchdog('simplenews', '%success emails sent in %sec seconds, %fail failed sending.', array('%success' => $count_success, '%sec' => round(__simplenews_measure_usec(), 1), '%fail' => $count_fail));
    }
    else {
      watchdog('simplenews', '%success emails sent, %fail failed.', array('%success' => $count_success, '%fail' => $count_fail));
    }

    variable_set('simplenews_last_cron', REQUEST_TIME);
    variable_set('simplenews_last_sent', count($mail_sent));
  }

}

/**
 * Save mail message in mail cache table.
 *
 * @param array $message data array to be stored
 *  $message['mail']
 *  $message['nid']
 *  $message['vid']
 *  $message['tid']
 *  $message['status']  (Default: 1 = pending)
 *  $message['time']    (default: current unix timestamp)

 * @param array $message Mail message array
 * @todo Replace time(): http://drupal.org/node/224333#time
 */
function simplenews_save_spool($message) {
  $status = isset($message['status']) ? $message['status'] : SIMPLENEWS_SPOOL_PENDING;
  $time = isset($message['time']) ? $message['time'] : REQUEST_TIME;

  db_insert('simplenews_mail_spool')
    ->fields(array(
      'mail' => $message['mail'],
      'nid' => $message['nid'],
      'vid' => $message['vid'],
      'tid' => $message['tid'],
      'status' => $status,
      'timestamp' => $time,
    ))
    ->execute();
}

/**
 * Retreive data from mail spool
 *
 * @param string  $status Status of data to be retreived (0 = hold, 1 = pending, 2 = send)
 * @param integer $nid node id
 * @param integer $vid node version id
 * @param integer $limit The maximum number of mails to load from the spool
 *
 * @return array Mail message array
 *  $message['msid']
 *  $message['mail']
 *  $message['nid']
 *  $message['vid']
 *  $message['tid']
 *  $message['status']
 *  $message['time']
 * @todo Convert output to array of objects.
 */
function simplenews_get_spool($status, $nid = NULL, $vid = NULL, $limit = 999999) {
  $messages = array();

  $query = db_query("SELECT * FROM {simplenews_mail_spool} s WHERE s.status = :status", array(':status' => $status))
    ->order('s.timestamp', 'ASC')
    ->range(0, $limit);
  foreach ($query->execute() as $data) {
    $messages[$data->msid] = (array)$data;
  }
  return $messages;
}

/**
 * Update status of mail data in spool table.
 *
 * Time stamp is set to current time.
 *
 * @param array $msids
 *   Mail spool id of record to be updated
 * @param array $result
 *   Array containing email sent result
 *    'status' => (0 = hold, 1 = pending, 2 = send)
 *    'error' => error id (optional; defaults to '')
 * @todo Replace time(): http://drupal.org/node/224333#time
 */
function simplenews_update_spool($msids, $result) {
  $params = array_merge($params, $msids);
  db_update('simplenews_mail_spool')
    ->condition('msid', $msids)
    ->fields(array(
      'status' => $result['status'],
      'error' => isset($result['error']) ? $result['error'] : FALSE,
      'timestamp' => REQUEST_TIME,
    ))
    ->execute();
}

/**
 * Count data in mail spool table.
 *
 * @param integer $nid newsletter node id
 * @param integer $vid newsletter revision id
 * @param string $status email sent status
 *
 * @return array Mail message array
 */
function simplenews_count_spool($nid, $vid, $status = SIMPLENEWS_SPOOL_PENDING) {
  $query = db_query("SELECT msid FROM {simplenews_mail_spool} WHERE nid = :nid AND vid = :vid AND status = :status", array(':nid' => $nid, ':vid' => $vid, ':status' => $status));
  return $query->rowCount();
}

/**
 * Remove records from mail spool table.
 *
 * All records with status 'send' and time stamp before the expiration date
 * are removed from the spool.
 * @todo Replace time(): http://drupal.org/node/224333#time
 */
function simplenews_clear_spool() {
  $expiration_time = REQUEST_TIME - variable_get('simplenews_spool_expire', 0) * 86400;
  db_delete('simplenews_mail_spool')
    ->condition('status', SIMPLENEWS_SPOOL_DONE)
    ->condition('timestamp', $expiration_time, '<=')
    ->execute();
}

/**
 * Update newsletter sent status.
 *
 * Set newsletter sent status based on email sent status in spool table.
 * Translated and untranslated nodes get a different treatment.
 *
 * The spool table holds data for emails to be sent and (optionally)
 * already send emails. The simplenews_newsletters table contains the overall
 * sent status of each newsletter issue (node).
 * Newsletter issues get the status pending when sending is innitiated. As
 * long as unsend emails exist in the spool, the status of the newsletter remains
 * unsend. When no pending emails are found the newsletter status is set 'send'.
 *
 * Translated newsletters are a group of nodes that share the same tnid ({node}.tnid).
 * Only one node of the group is found in the spool, but all nodes should share
 * the same state. Therefore they are checked for the combined number of emails
 * in the spool.
 */
function simplenews_send_status_update() {
  $counts = array(); // number pending of emails in the spool
  $sum = array(); // sum of emails in the spool per tnid (translation id)
  $send = array(); // nodes with the status 'send'

  // For each pending newsletter count the number of pending emails in the spool.
  $query = db_select('simplenews_newsletters', 's'); 
  $query->join('node', 'n', 's.nid = n.nid AND s.vid = n.vid');
  $query->fields('s', array('nid', 'vid', 'tid'))
    ->fields('n', array('tnid'))
    ->condition('s.s_status', SIMPLENEWS_STATUS_SEND_PENDING);
  foreach ($query->execute() as $newsletter) {
    // nid-vid are combined in one unique key.
    $counts[$newsletter->tnid][$newsletter->nid . '-' . $newsletter->vid] = simplenews_count_spool($newsletter->nid, $newsletter->vid);
  }

  // Determine which nodes are send per translation group and per individual node.
  foreach ($counts as $tnid => $node_count) {
    // The sum of emails per tnid is the combined status result for the group of translated nodes.
    // Untranslated nodes have tnid == 0 which will be ignored later.
    $sum[$tnid] = array_sum($node_count);
    foreach ($node_count as $nidvid => $count) {
      // Translated nodes (tnid != 0)
      if ($tnid != '0' && $sum[$tnid] == '0') {
        $send[] = $nidvid;
      }
      // Untranslated nodes (tnid == 0)
      elseif ($tnid == '0' && $count == '0') {
        $send[] = $nidvid;
      }
    }
  }

  // Update overall newsletter status
  if (!empty($send)) {
    foreach ($send as $nidvid) {
      // Split the combined key 'nid-vid'
      $nid = strtok($nidvid, '-');
      $vid = strtok('-');
      db_update('simplenews_newsletters')
        ->condition('nid', $nid)
        ->condition('vid', $vid)
        ->fields(array('s_status' => SIMPLENEWS_STATUS_SEND_READY))
        ->execute();
    }
  }
}

/**
 * Implementation of hook_views_api().
 */
function simplenews_views_api() {
  return array(
    'api' => 2,
  );
}

/**
 * Call simplenews actions.
 */
function simplenews_call_actions($op, $subscription) {
  // Only call actions when the simplenews_action module is enabled.
  if (!module_exists('simplenews_action')) {
    return;
  }
  $aids = _trigger_get_hook_aids('simplenews', $op);
  $context = array(
    'hook' => 'simplenews',
    'op' => $op,
    'account' => $subscription,
  );
  foreach ($aids as $aid => $action_info) {
    actions_do($aid, $subscription, $context);
  }
}

/**
 * Get array of newsletters with names translated.
 *
 * If required newsletter names are translated based on the global language.
 * Hidden newsletters (opt-in/out setting is 'none') are not included.
 * @param int $vid
 *   Newsletter vocabulary ID
 * @param boolean $show_all
 *   On false hidden newsletters will not be returned.
 *   On true all newsletter will be returned.
 * @return array of newsletters objects.
 */
function simplenews_get_newsletters($vid, $show_all = FALSE) {
  $newsletters = array();

  foreach (taxonomy_get_tree($vid) as $term) {
    if (variable_get('simplenews_opt_inout_' . $term->tid, 'double') != 'none' || $show_all) {
      $newsletter = new stdClass();
      $newsletter->tid = $term->tid;
      $newsletter->name = _simplenews_tt_newsletter_name($term);
      $newsletters[$term->tid] = $newsletter;
    }
  }
  return $newsletters;
}

/**
 * Build formatted from-name and email for a mail object.
 *
 * Each newsletter (serie; tid) can have a different from address.
 * The from name and address depend on the newsletter term tid which is included in the $node object
 *
 * @param object $node Node object of a simplenews newsletter
 *
 * @return array [address] = from address; [formatted] = formatted from name and address
 */
function _simplenews_set_from($node = NULL) {
  $address_default = variable_get('site_mail', ini_get('sendmail_from'));
  $name_default = variable_get('site_name', 'Drupal');

  if (isset($node->simplenews['tid'])) {
    $address = variable_get('simplenews_from_address_' . $node->simplenews['tid'], variable_get('simplenews_from_address', $address_default));
    $name = variable_get('simplenews_from_name_' . $node->simplenews['tid'], variable_get('simplenews_from_name', $name_default));
  }
  else {
    $address = variable_get('simplenews_from_address', $address_default);
    $name = variable_get('simplenews_from_name', $name_default);
  }

  // Windows based PHP systems don't accept formatted emails.
  $formatted_address = substr(PHP_OS, 0, 3) == 'WIN' ? $address : '"' . mime_header_encode($name) . '" <' . $address . '>';

  return array(
    'address' => $address,
    'formatted' => $formatted_address,
  );
}

/**
 * Build header array with priority and receipt confirmation settings.
 *
 * @param $node: node object
 * @param $from: from email address
 *
 * @return Header array with priority and receipt confirmation info
 */
function _simplenews_headers($node, $from) {
  $headers = array();

  // If receipt is requested, add headers.
  if ($node->simplenews['receipt']) {
    $headers['Disposition-Notification-To'] = $from;
    $headers['X-Confirm-Reading-To'] = $from;
  }

  // Add priority if set.
  switch ($node->simplenews['priority']) {
    case SIMPLENEWS_PRIORITY_HIGHEST:
      $headers['Priority'] = 'High';
      $headers['X-Priority'] = '1';
      $headers['X-MSMail-Priority'] = 'Highest';
      break;
    case SIMPLENEWS_PRIORITY_HIGH:
      $headers['Priority'] = 'urgent';
      $headers['X-Priority'] = '2';
      $headers['X-MSMail-Priority'] = 'High';
      break;
    case SIMPLENEWS_PRIORITY_NORMAL:
      $headers['Priority'] = 'normal';
      $headers['X-Priority'] = '3';
      $headers['X-MSMail-Priority'] = 'Normal';
      break;
    case SIMPLENEWS_PRIORITY_LOW:
      $headers['Priority'] = 'non-urgent';
      $headers['X-Priority'] = '4';
      $headers['X-MSMail-Priority'] = 'Low';
      break;
    case SIMPLENEWS_PRIORITY_LOWEST:
      $headers['Priority'] = 'non-urgent';
      $headers['X-Priority'] = '5';
      $headers['X-MSMail-Priority'] = 'Lowest';
      break;
  }

  // Add general headers
  $headers['Precedence'] = 'bulk';

  return $headers;
}

/**
 * HTML to text conversion for HTML and special characters.
 *
 * Converts some special HTMLcharacters in addition to drupal_html_to_text()
 *
 * @param string $text Source text with HTML and special characters
 * @param boolean $inline_hyperlinks
 *   TRUE: URLs will be placed inline.
 *   FALSE: URLs will be converted to numbered reference list.
 * @return string Target text with HTML and special characters replaced
 */
function simplenews_html_to_text($text, $inline_hyperlinks = TRUE) {
  // By replacing <a> tag by only its URL the URLs will be placed inline
  // in the email body and are not converted to a numbered reference list
  // by drupal_html_to_text().
  // URL are converted to abolute URL as drupal_html_to_text() would have.
  if ($inline_hyperlinks) {
    $pattern = '@<a[^>]+?href="([^"]*)"[^>]*?>(.+?)</a>@is';
    $text = preg_replace_callback($pattern, '_simplenews_absolute_mail_urls', $text);
  }

  // Replace some special characters before performing the drupal standard conversion.
  $preg = _simplenews_html_replace();
  $text = preg_replace(array_keys($preg), array_values($preg), $text);

  // Perform standard drupal html to text conversion.
  return drupal_html_to_text($text);
}

/**
 * Helper function for simplenews_html_to_text().
 *
 * Replaces URLs with abolute URLs.
 */
function _simplenews_absolute_mail_urls($match) {
  global $base_url, $base_path;
  static $regexp;
  $url = $label = '';

  if ($match) {
    if (empty($regexp)) {
      $regexp = '@^' . preg_quote($base_path, '@') . '@';
    }
    list(, $url, $label) = $match;
    $url = strpos($url, '://') ? $url : preg_replace($regexp, $base_url . '/', $url);

    // If the link is formed by Drupal's URL filter, we only return the URL.
    // The URL filter generates a label out of the original URL.
    if (strpos($label, '...') == strlen($label) - 3) {
      // Remove ellipsis from end of label.
      $label = substr($label, 0, strlen($label) - 3);
    }
    if (strpos($url, $label) !== FALSE) {
      return $url;
    }
    return $label . ' ' . $url;
  }
}

/**
 * Helper function for simplenews_html_to_text().
 *
 * List of preg* regular expression patterns to search for and replace with
 */
function _simplenews_html_replace() {
  return array(
    '/&quot;/i'  => '"',
    '/&gt;/i'    => '>',
    '/&lt;/i'    => '<',
    '/&amp;/i'   => '&',
    '/&copy;/i'  => '(c)',
    '/&trade;/i' => '(tm)',
    '/&#8220;/'  => '"',
    '/&#8221;/'  => '"',
    '/&#8211;/'  => '-',
    '/&#8217;/'  => "'",
    '/&#38;/'    => '&',
    '/&#169;/'   => '(c)',
    '/&#8482;/'  => '(tm)',
    '/&#151;/'   => '--',
    '/&#147;/'   => '"',
    '/&#148;/'   => '"',
    '/&#149;/'   => '*',
    '/&reg;/i'   => '(R)',
    '/&bull;/i'  => '*',
    '/&euro;/i'  => 'Euro ',
  );
}

/**
 * Implements hook_token_info().
 */
function simplenews_token_info() {
  $tokens['simplenews'] = array(
    'simplenews-subscribe-url' => array(
      'name' => t('Subscription URL'),
      'description' => t('The URL of the subscription confirmation page.'),
    ),
    'simplenews-unsubscribe-url' => array(
      'name' => t('Unsubscription URL'),
      'description' => t('The URL of the unsubscription page.'),
    ),
    'simplenews-receiver-name' => array(
      'name' => t('Receiver name'),
      'description' => t('The username of the newsletter receiver or anonymous user name.'),
    ),
    'simplenews-receiver-mail' => array(
      'name' => t('Receiver email'),
      'description' => t('The email address of the newsletter receiver.'),
    ),
    'simplenews-newsletter-url' => array(
      'name' => t('Newsletter URL'),
      'description' => t('The URL of this newsletter issue.'),
    ),
    'simplenews-newsletters-name' => array(
      'name' => t('Newsletter series'),
      'description' => t('The name of the newsletter series.'),
    ),
    'simplenews-newsletters-url' => array(
      'name' => t('Newsletter series URL'),
      'description' => t('The URL of the taxonomy page listing the issues of this newsletter series.'),
    ),
  );

  return $tokens;
}

/**
 * Implements hook_tokens().
 */
function simplenews_tokens($type, $tokens, array $data = array(), array $options = array()) {

  $replacements = array();

  if ($type == 'simplenews') {
    $account = $data['account'];
    // TODO 'node' does not always exist. Where to fix this?
    $node = $data['node'];
    $newsletter = $data['newsletter'];
    $language = isset($account->language->language) ? $account->language->language : language_default();

    // Build hash for subscription/unsubscription URL.
    $hash = '';
    if (isset($account->snid) && isset($newsletter->tid)) {
      $hash = simplenews_generate_hash($account->mail, $account->snid, $newsletter->tid);
    }

    // When simplenews_token_values() is called from simplenews_nodeapi() 
    // $newsletter->name contains no value. Newsletter name is
    // reconstructed from $node->simplenews['tid'].
    $newsletter_name = isset($newsletter->name) ? $newsletter->name : '';
    if (!$newsletter_name) {
      if (isset($node->simplenews['tid'])) {
        if ($term = taxonomy_term_load($node->simplenews['tid'])) {
          $newsletter_name = _simplenews_tt_newsletter_name($newsletter, $language);
        }
      }
    }

    foreach ($tokens as $name => $original) {
      switch ($name) {
        // Simple key values on the node.
        case 'simplenews-subscribe-url':
          $replacements[$original] = url('newsletter/confirm/add/' . $hash, array('absolute' => TRUE, 'language' => $language));
          break;

        case 'simplenews-unsubscribe-url':
          $replacements[$original] = url('newsletter/confirm/remove/' . $hash, array('absolute' => TRUE, 'language' => $language));
          break;

        case 'simplenews-receiver-name':
          $replacements[$original] = !empty($account->name) ? check_plain($account->name) : check_plain(variable_get('anonymous', 'Anonymous'));
          break;

        case 'simplenews-receiver-mail':
          $replacements[$original] = $account->mail;
          break;

        case 'simplenews-newsletter-url':
          $replacements[$original] = url('node/' . $node->nid, array('absolute' => TRUE, 'language' => $language));
          break;

        case 'simplenews-newsletters-name':
          $replacements[$original] = $newsletter_name ? check_plain($newsletter_name) : '';
          break;

        case 'simplenews-newsletters-url':
          $replacements[$original] = url('taxonomy/term/' . $newsletter->tid);
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Create a 32 character identifier.
 */
function simplenews_private_key() {
  $key = variable_get('simplenews_private_key', FALSE);
  if (!$key) {
    //  This will create a 32 character identifier (a 128 bit hex number) that is extremely difficult to predict
    $key = md5(uniqid(rand()));
    variable_set('simplenews_private_key', $key);
  }
  return $key;
}

/**
 * Implementation of hook_help().
 */
function simplenews_help($path, $arg) {
  switch ($path) {
    case 'admin/help#simplenews':
      $help  = "<p>" . t('Simplenews publishes and sends newsletters to lists of subscribers. Both anonymous and authenticated users can opt-in to different mailing lists.') . "</p>\n";
      $help .= "<p>" . t('Simplenews uses nodes for <strong>newsletter issues</strong>. Newsletter issues are grouped by a <strong>newsletter taxonomy term</strong>. Node type and vocabulary are selectable. A newsletter is send to all email addresses which are subscribed to the newsletter. Newsletter issues can be sent only once. Large mailings should be sent by cron to balance the mailserver load.') . "</p>\n";
      $help .= "<p>" . t('Simplenews adds elements to the newsletter node add/edit form to manage newsletter format and sending of the newsletter issue. A newsletter issue can be sent for test before sending officially.') . "</p>\n";
      $help .= "<p>" . t('Both anonymous and authenticated users can <strong>opt-in and opt-out</strong> to a newsletter. A confirmation message is sent to anonymous users at subscription and unsubscription. Users can (un)subscribe using a form and a block. A <strong>subscription block</strong> is available for each newsletter offering a subscription form, a link to recent newsletters and RSS feed. Email addresses can also be imported and exported via the subscription administration pages.') . "</p>\n";
      $help .= "<h2>" . t('Configuration') . "</h2>\n";
      $help .= "<ul>";
      if (user_access('administer permissions')) {
        $help .= "<li>" . l(t('Configure permissions'), 'admin/user/permissions', array('fragment' => 'module-simplenews')) . "</li>\n";
      }
      if (user_access('administer simplenews settings')) {
        $help .= "<li>" . l(t('Configure Simplenews'), 'admin/config/simplenews') . "</li>\n";
      }
      if (user_access('administer blocks')) {
        $help .= "<li>" . t('Enable a newsletter <a href="@admin_blocks">subscription block</a>.', array('@admin_blocks' => url('admin/build/block'))) . "</li>\n";
      }
      if (user_access('administer simplenews settings')) {
        $help .= "<li>" . t('Manage your <a href="@newsletters">newsletters</a>, <a href="@sent">sent newsletters</a> and <a href="@subscriptions">subscriptions</a>.', array('@newsletters' => url('admin/structure/simplenews'), '@sent' => url('admin/content/simplenews'), '@subscriptions' => url('admin/content/simplenews/users'))) . "</li>\n";
      }
      $help .= "</ul>";

      $help .= "<p>" . t('For more information, see the online handbook entry for <a href="@handbook">Simplenews</a>.', array('@handbook', 'http://drupal.org/node/197057')) . "</p>\n";
      return $help;
    case 'node/add/simplenews':
      $help  = '<ul>';
      $help .= "<li>" . t('Add this newsletter issue to a newsletter by selecting a newsletter from the select list. Send a newsletter or a test newsletter by selecting the appropriate radio button and submitting the node.') . "</li>\n";
      if (user_access('administer simplenews settings')) {
        $help .= "<li>" . t('Set default send options at <a href="@configuration">Administer > Site configuration > Simplenews > Newsletter</a>.', array('@configuration' => url('admin/config/simplenews/newsletter'))) . "</li>\n";
      }
      if (user_access('administer newsletters')) {
        $help .= "<li>" . t('Set newsletter specific options at <a href="@configuration">Administer > Content management > Newsletters > Newsletters</a>.', array('@configuration' => url('admin/structure/simplenews'))) . "</li>\n";
      }
      $help .= "</ul>";
      return $help;
    case 'admin/config/simplenews/newsletter':
      $help = '<ul>';
      $help .= '<li>' . t('These settings are default to all newsletters. Newsletter specific settings can be found at the <a href="@page">newsletter\'s settings page</a>.', array('@page' => url('admin/structure/simplenews'))) . "</li>\n";
      if (!module_exists('mimemail')) {
        $help .= "<li>" . t('Install <a href="@mime_mail_url">Mime Mail</a> to send HTML emails or emails with attachments (both plain text and HTML).', array('@mime_mail_url' => 'http://drupal.org/project/mimemail')) . "</li>\n";
      }
      $help .= "</ul>";
      return $help;
    case 'admin/structure/simplenews/add':
      $help = '<p>' . t('You can create different newsletters (or subjects) to categorize your news (e.g. Cats news, Dogs news, ...).') . "</p>\n";
      return $help;
    case 'admin/content/node-type/simplenews/display/simplenews':
      $help = '<p>' . t("'Plain' display settings apply to the content of emails send in plain text format. 'HTML' display settings apply to both HTML and plain text alternative content of emails send in HTML format.") . "</p>\n";
      return $help;
  }
}

/**
 * Helper function to translate a newsletter name if required.
 *
 * @param <object> $newsletter
 *   Newsletter object. Typically from taxonomy_get_term().
 *    $newsletter -> tid    newsletter tid
 *    $newsletter -> name   newsletter name
 * @param <string> $langcode
 *   Optional language code (defaults to current global $language);
 *
 * @return <string> translated newsletter name.
 */
function _simplenews_tt_newsletter_name($newsletter, $langcode = NULL) {
  global $language;
  $langcode = isset($langcode) ? $langcode : $language->language;

  if (module_exists('i18ntaxonomy') && i18ntaxonomy_vocabulary(variable_get('simplenews_vid', '')) == I18N_TAXONOMY_LOCALIZE) {
    return tt('taxonomy:term:' . $newsletter->tid . ':name', $newsletter->name, $langcode);
  }
  return $newsletter->name;
}

/**
 * Flatten a nested array
 */
function _simplenews_flatten_array($array) {
  $return = array();

  foreach ($array as $key => $value) {
    if (is_array($value)) {
      $return += _simplenews_flatten_array($value);
    }
    else {
      $return[$key] = $value;
    }
  }
  return $return;
}

/**
 * Generate the hash key used for subscribe/unsubscribe link.
 */
function simplenews_generate_hash($mail, $snid, $tid) {
  return drupal_substr(md5($mail . simplenews_private_key()), 0, 10) . $snid . 't' . $tid;
}

/**
 * Determine possible mail format options.
 *
 * The mime_mail module must be installed to send HTML mails.
 */
function simplenews_format_options() {
  $options = array(
    'plain' => t('plain'),
  );
  if (module_exists('mimemail') || module_exists('htmlmail')) {
    $options['html'] = t('html');
  }
  return $options;
}

/**
 * Generate default and custom subscription confirmation email text.
 *
 * @param string $key text identification key
 * @param object $language language object
 */
function _simplenews_subscription_confirmation_text($key, $language = NULL) {
  $langcode = isset($language) ? $language->language : NULL;

  if ($admin_setting = variable_get('simplenews_confirm_' . $key, FALSE)) {
    // An admin setting overrides the default string.
    return $admin_setting;
  }
  else {
    // No override, return default string.
    switch ($key) {
      case 'subscribe_unsubscribed':
        return t("We have received a request from the email [simplenews-receiver-mail] for subscription to the [simplenews-newsletters-name] newsletter on [site-name] website at [site-url]. To confirm this subscription please use the link below.\n\n[simplenews-subscribe-url]", array(), array('langcode' => $langcode));
      case 'subscribe_subscribed':
        return t("We have received a request from the email [simplenews-receiver-mail] for subscription to the [simplenews-newsletters-name] newsletter on [site-name] website at [site-url]. However, this email is already subscribed to this newsletter. If you intended to unsubscribe please visit our site: [site-url]", array(), array('langcode' => $langcode));
      case 'unsubscribe_subscribed':
        return t("We have received a request from the email [simplenews-receiver-mail] to unsubscribe you from the [simplenews-newsletters-name] on [site-name] website at [site-url]. To confirm this unsubscription please use the  below.\n\n[simplenews-unsubscribe-url]", array(), array('langcode' => $langcode));
      case 'unsubscribe_unsubscribed':
        return t("We have received a from the email [simplenews-receiver-mail] request to unsubscribe you from the [simplenews-newsletters-name] on [site-name] website at [site-url]. However, this email is not subscribed to this newsletter. If you intended to subscribe please visit our site: [site-url]", array(), array('langcode' => $langcode));
      case 'subscribe_subject':
        return t("Confirmation for [simplenews-newsletters-name] from [site-name]", array(), array('langcode' => $langcode));
    }
  }
}

/**
 * Helper function to measure PHP execution time in microseconds.
 *
 * @param bool $start TRUE reset the time and start counting.
 * @return float: elapsed PHP execution time since start.
 */
function _simplenews_measure_usec($start = FALSE) {
  // Windows systems don't implement getrusage(). There is no alternative.
  if (!function_exists('getrusage')) {
    return;
  }

  static $start_time;
  $usage = getrusage();
  $now = (float)($usage['ru_stime.tv_sec'] . '.' . $usage['ru_stime.tv_usec']) + (float)($usage['ru_utime.tv_sec'] . '.' . $usage['ru_utime.tv_usec']); 

  if ($start) {
    $start_time = $now;
    return;
  }
  return $now - $start_time;
}

/**
 * Get defaults for the simplenews node form.
 */
function simplenews_get_node_form_defaults() {
  $defaults = array(
    'advanced' => array(
      's_format' => variable_get('simplenews_format', 'plain'),
      'priority' => variable_get('simplenews_priority', SIMPLENEWS_PRIORITY_NONE),
      'receipt' => variable_get('simplenews_receipt', 0),
    ),
    'send' => user_access('send newsletter') ? variable_get('simplenews_send', SIMPLENEWS_COMMAND_SEND_NONE) : SIMPLENEWS_COMMAND_SEND_NONE,
    's_status' => '0',
    'test_address' => variable_get('simplenews_test_address', variable_get('site_mail', ini_get('sendmail_from'))),
  );
  return $defaults;
}

/**
 * Implementation of hook_content_build_modes().
 */
function simplenews_content_build_modes() {
  return array(
    'simplenews' => array(
      'title' => t('Simplenews'),
      'build modes' => array(
        'email_plain' => array(
          'title' => t('Email: Plain'),
          'views style' => FALSE,
        ),
        'email_html' => array(
          'title' => t('Email: HTML'),
          'views style' => FALSE,
        ),
      ),
    ),
  );
}

/**
 * Implementation of hook_theme().
 * @todo Theme definitions must register how it integrates with drupal_render(): http://drupal.org/node/224333#hook_theme_render_changes
 */
function simplenews_theme() {
  return array(
    'simplenews_block' => array(
      'template' => 'simplenews-block',
      'arguments' => array(
        'tid' => NULL,
      ),
      'pattern' => 'simplenews_block__',
    ),
    'simplenews_status' => array(
      'file' => 'simplenews.admin.inc',
      'arguments' => array(
        'source' => NULL,
        'status' => NULL,
      ),
    ),
    'simplenews_newsletter_body' => array(
      'template' => 'simplenews-newsletter-body',
      'arguments' => array(
        'node' => NULL,
        'language' => NULL,
      ),
      'pattern' => 'simplenews_newsletter_body__',
    ),
    'simplenews_newsletter_footer' => array(
      'template' => 'simplenews-newsletter-footer',
      'arguments' => array(
        'node' => NULL,
        'key' => NULL,
        'language' => NULL,
      ),
      'pattern' => 'simplenews_newsletter_footer__',
    ),
    'simplenews_subscription_list' => array(
      'file' => 'simplenews.admin.inc',
      'arguments' => array(
        'form' => NULL,
      ),
    ),
    'simplenews_filter_form' => array(
      'render element' => 'form',
      'file' => 'simplenews.admin.inc',
    ),
  );
}

/**
 * Process variables to format the simplenews block.
 *
 * Collect data and apply access restrictions.
 *
 * $variables contains:
 * - $tid
 *
 * @see simplenews-block.tpl.php
 * @see theme_simplenews-block()
 * @todo use drupal_render() with drupal_get_form(): http://drupal.org/node/224333#unrendered
 */
function template_preprocess_simplenews_block(&$variables) {
  global $user;
  $tid = $variables['tid'];

  // Set default values in case of missing permission.
  $variables['form'] = '';
  $variables['subscription_link'] = '';
  $variables['newsletter_link'] = '';
  $variables['issue_list'] = '';
  $variables['rssfeed'] = '';

  // Block content variables
  $variables['message'] = check_plain(variable_get('simplenews_block_m_' . $tid, t('Stay informed on our latest news!')));
  if (user_access('subscribe to newsletters')) {
    $variables['form'] = drupal_get_form('simplenews_block_form_' . $tid);
    $variables['subscription_link'] = l(t('Manage my subscriptions'), 'newsletter/subscriptions');
  }
  $variables['newsletter_link'] = l(t('Previous issues'), 'taxonomy/term/' . $tid);
  $recent = simplenews_recent_newsletters($tid, variable_get('simplenews_block_i_' . $tid, 5));
  $variables['issue_list'] = theme('item_list', array('items' => $recent, 'title' => t('Previous issues'), 'type' => 'ul'));
  $term = taxonomy_term_load($tid);
  $variables['rssfeed'] = theme('feed_icon', array('url' => url('taxonomy/term/' . $tid . '/0/feed'), 'title' => t('@newsletter feed', array('@newsletter' => $term->name))));

  // Block content control variables
  $variables['use_form'] = variable_get('simplenews_block_f_' . $tid, 1);
  $variables['use_issue_link'] = variable_get('simplenews_block_l_' . $tid, 1);
  $variables['use_issue_list'] = variable_get('simplenews_block_i_status_' . $tid, 0);
  $variables['use_rss'] = variable_get('simplenews_block_r_' . $tid, 1);

  // Additional variables
  $variables['subscribed'] = empty($user->uid) ? FALSE : (simplenews_user_is_subscribed($user->mail, $tid) == TRUE);
  $variables['user'] = !empty($user->uid);
}

/**
 * Process variables to format the simplenews newsletter body.
 *
 * $variables contains:
 * - $node
 * - $language
 *
 * @see simplenews-newsletter-body.tpl.php
 */
function template_preprocess_simplenews_newsletter_body(&$variables) {
  $variables['title'] = check_plain($variables['node']->title);
  $variables['body'] = $variables['node']->body;
}

/**
 * Process variables to format the simplenews newsletter footer.
 *
 * $variables contains:
 * - $node
 * - $key
 * - $language
 *
 * @see simplenews-newsletter-footer.tpl.php
 */
function template_preprocess_simplenews_newsletter_footer(&$variables) {
  $variables['format'] = $variables['node']->simplenews['s_format'];
  $variables['unsubscribe_text'] = t('Unsubscribe from this newsletter', array(), array('langcode' => $variables['language']->language));
  $variables['test_message'] = t('This is a test version of the newsletter.', array(), array('langcode' => $variables['language']->language));
}
