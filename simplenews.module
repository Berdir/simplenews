<?php
// $Id$

//DONE: (issue) multiple subscription block (#121479)
//DONE: (issue) #221346 solution by lilou: simplenews.css not aggregated
//TODO: (issue) improved handling of sending by cron (#165412, #125865, ...)
//TODO: (issue) compatibility with category module
//TODO: Compatibilty with Views [Waiting for D6 Views module]
//DONE: Compatibilty with Actions (see #219544)
//DONE: Compatibilty with Token
//DONE: Compatibilty with CCK: provide selectable node type and ability to add CCK fields to newsletter
//TODO: Compatibility with mail backends (See Mailing List Manager)
//TODO: Can template_preprocess_HOOK be used?
//TODO: User language sensitive newsletters (also when sending by cron)
//TODO: (issue) Special characters in email address (#181081)
//TODO: (issue)Test newsletter with links: <a href="/nl/foo">a link</a>, "http://www.mysite.com/...", "<a href="mailto:name@some.com">name</a>"(#159125) both on-screen as in-mail
//TODO: Theming of email body, footer as last step before sending. (#202840, #215638)
//TODO: Include the "newsletter/subscriptions" link in documentation and help
//TODO: Add more (doxygen) comment
//TODO: Nice to have: The current text "-- Footer will be appended here" causes some confusion. Replace by more realistic text and additional comment that the link is just for testing and is not working.
//TODO: Nice to have: (issue) Improve the difference between newsletter (group) and newsletter 
//TODO: Nice to have: provide basic theming for CCK node fields (#180831)
//TODO: Nice to have: Integration with Workflow(_ng)
//TODO: Nice to have: Improved debugging (option) for mail sending (#147510, ...) use watchdog(... 'WATCHDOG_DEBUG')
//TODO: Nice to have: enable multiple newsletter terms per node
//TODO: Nice to have: Improved handling of images (in combination with Mime Mail)
//TODO: Nice to have: Integration with OG
//TODO: Nice to have: Integration with Services

/**
 * NEWSLETTER MAIL PRIORITY
 */
define('SIMPLENEWS_PRIORITY_NONE', '0');
define('SIMPLENEWS_PRIORITY_HIGHEST', '1');
define('SIMPLENEWS_PRIORITY_HIGH', '2');
define('SIMPLENEWS_PRIORITY_NORMAL', '3');
define('SIMPLENEWS_PRIORITY_LOW', '4');
define('SIMPLENEWS_PRIORITY_LOWEST', '5');

/**
 * NEWSLETTER SEND COMMAND
 */
define('SIMPLENEWS_COMMAND_SEND_NONE', 0);
define('SIMPLENEWS_COMMAND_SEND_NOW', 1);
define('SIMPLENEWS_COMMAND_SEND_TEST', 2);

/**
 * NEWSLETTER SEND STATUS
 */
define('SIMPLENEWS_STATUS_SEND_NOT', 0);
define('SIMPLENEWS_STATUS_SEND_PENDING', 1);
define('SIMPLENEWS_STATUS_SEND_READY', 2);

/**
 * Implementation of hook_node_info().
 */
function simplenews_node_info() {
  return array(
    'simplenews' => array(
      'name' => t('Newsletter issue'),
      'module' => 'simplenews',
      'description' => t('A newsletter issue to be sent to subscribed e-mail addresses.'),
    )
  );
}

/**
 * Implementation of hook_perm().
 */
function simplenews_perm() {
  return array('view links in block', 'create newsletter', 'edit own newsletter', 'administer newsletters', 'send newsletter', 'subscribe to newsletters');
}

/**
 * Implementation of hook_access().
 */
function simplenews_access($op, $node) {
  global $user;
  if ($op == 'create') {
    if (user_access('create newsletter') || user_access('administer newsletters')) {
      return TRUE;
    }
  }
  if ($op == 'update' || $op == 'delete') {
    if (user_access('administer newsletters')) {
      return TRUE;
    }
    elseif (user_access('edit own newsletter') && $user->uid == $node->uid) {
      return TRUE;
    }
  }
}

/**
 * Implementation of hook_init
 */
function simplenews_init() {
  drupal_add_css(drupal_get_path('module', 'simplenews') .'/simplenews.css', 'module', 'all', TRUE);
}

/**
 * Implementation of hook_menu().
 */
function simplenews_menu() {

  $items['admin/content/newsletters'] = array(
    'title' => 'Newsletters',
    'description' => 'Manage newsletters, subscriptions, and configuration options.',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_admin_news'),
    'access arguments' => array('administer newsletters'),
    'file' => 'simplenews.admin.inc',
  );
  $items['admin/content/newsletters/sent'] = array(
    'title' => 'Sent issues',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'page arguments' => array('simplenews_admin_news'),
    'weight' => -10,
  );
  $items['admin/content/newsletters/notsent'] = array(
    'title' => 'Drafts',
    'type' => MENU_LOCAL_TASK,
    'page arguments' => array('simplenews_admin_news', 'notsent'),
    'weight' => -9,
  );

  $items['admin/content/newsletters/types'] = array(
    'title' => 'Newsletters',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'simplenews_types_overview',
    'weight' => -8,
  );
  $items['admin/content/newsletters/types/edit'] = array(
    'title' => 'Newsletters',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_admin_types_form'),
    'file' => 'simplenews.admin.inc',
  );
  $items['admin/content/newsletters/types/delete'] = array(
    'title' => 'Newsletters',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_admin_types_delete'),
    'file' => 'simplenews.admin.inc',
  );
  $items['admin/content/newsletters/types/list'] = array(
    'title' => 'List newsletters',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/content/newsletters/types/add'] = array(
    'title' => 'Add newsletter',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_admin_types_form'),
    'file' => 'simplenews.admin.inc',
    'weight' => -9,
  );
  $items['admin/content/newsletters/subscriptions/delete'] = array(
    'title' => 'Delete',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_subscription_multiple_delete_confirm'),
    'file' => 'simplenews.admin.inc',
  );
  $items['admin/content/newsletters/users'] = array(
    'title' => 'Subscriptions',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_subscription_admin'),
    'file' => 'simplenews.admin.inc',
    'weight' => -7,
  );
  $items['admin/content/newsletters/users/edit'] = array(
    'title' => 'Subscriptions',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_admin_users_form'),
    'file' => 'simplenews.admin.inc',
    );
  $items['admin/content/newsletters/users/delete'] = array(
    'title' => 'Subscriptions',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_admin_users_delete'),
    'file' => 'simplenews.admin.inc',
  );
  $items['admin/content/newsletters/users/list'] = array(
    'title' => 'List subscriptions',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/content/newsletters/users/import'] = array(
    'title' => 'Import subscriptions',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_subscription_list_add'),
    'file' => 'simplenews.admin.inc',
    'weight' => -9,
  );
  $items['admin/content/newsletters/users/export'] = array(
    'title' => 'Export subscriptions',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_subscription_list_export'),
    'file' => 'simplenews.admin.inc',
    'weight' => -8,
  );
  
  $items['admin/content/newsletters/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_LOCAL_TASK,
    'page arguments' => array('simplenews_admin_settings'),
    'weight' => -6,
  );
  $items['admin/content/newsletters/settings/general'] = array(
    'title' => 'General',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  //TODO build this menu more efficiently or change the whole menu/navigation setup
  if (arg(0) == 'admin' && arg(1) == 'content' && arg(2) == 'newsletters' && arg(3) == 'settings') {
    $tree = taxonomy_get_tree(variable_get('simplenews_vid', ''));
    if ($tree) {
      $weight = -9;
      foreach ($tree as $newsletter) {
        $items['admin/content/newsletters/settings/%tid'] = array(
          'title' => $newsletter->name,
          'type' => MENU_LOCAL_TASK,
          'page arguments' => array('simplenews_admin_settings', 4),
          'weight' => $weight++,
        );
      }
    }
  }
  
  $items['newsletter/confirm'] = array(
    'title' => 'Confirm newsletter subscriptions',
    'type' => MENU_CALLBACK,
    'page callback' => 'simplenews_confirm_subscription',
    'access arguments' => array('subscribe to newsletters'),
  );
  
  $items['newsletter/subscriptions'] = array(
    'title' => 'Manage newsletter subscriptions',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_subscription_manager_form'),
    'access arguments' => array('subscribe to newsletters'),
  );
  
  return $items;
}

/**
 * Implementation of hook_nodeapi().
 */
function simplenews_nodeapi(&$node, $op, $teaser, $page) {
  // We are going to return if $node->type is not one of the node
  // types assigned to the newsletter vocabulary. If simplenews_vid
  // is undefined or the vocabulary does not exist, it clearly cannot
  // be assigned to $node->type, so return to avoid E_ALL warnings.
  $vid = variable_get('simplenews_vid', '');
  $vocabulary = taxonomy_vocabulary_load($vid);
  if (empty($vocabulary)) {
    return;
  }

  // Operate only on node types assigned to the newsletter vocabulary.
  if (!in_array($node->type, $vocabulary->nodes)) {
    return;
  }
//dpm($op);
//dpm($node);

  switch ($op) {
    case 'view':
      $node = simplenews_replace_vars($node, TRUE);
      // $node = node_prepare($node, $teaser);
      break;
    case 'validate':
      global $_simplenews_valid_mails;
      if ($node->simplenews['send'] == SIMPLENEWS_COMMAND_SEND_NOW) {
        if (!isset($node->taxonomy)) {
          form_set_error('', t('You should assign content type %content_type to the !newsletter_vocabulary before you can send this newsletter.', array('%content_type' => $node->type, '!newsletter_vocabulary' => l(t('Newsletter vocabulary'), 'admin/content/taxonomy'))));
        }
        elseif (!simplenews_validate_taxonomy($node->taxonomy)) {
          form_set_error('taxonomy', t('You should select a newsletter before you can send this newsletter issue.'));
        }
      }
      elseif ($node->simplenews['send'] == SIMPLENEWS_COMMAND_SEND_TEST) {
        $mails = explode(',', $node->simplenews['test_address']);
        foreach ($mails as $mail) {
          $mail = trim($mail);
          //TEST: error directed to right e-mail address field (even when hidden)
          if ($mail == '') {
            form_set_error('test_address', t('Cannot send test newsletter: no valid test e-mail address specified.'));
          }
          elseif (!valid_email_address($mail)) {
            form_set_error('test_address', t('Cannot send test newsletter to %mail: e-mail address invalid.', array('%mail' => $mail)));
          }
        }
      }
      break;
    case 'presave':
      $term = simplenews_validate_taxonomy($node->taxonomy);
      $tid = is_array($term) ? array_values($term) : FALSE;
      $node->simplenews['tid'] = $tid ? $tid[0] : 0;
      break;
    case 'insert':
      //$term = simplenews_validate_taxonomy($node->taxonomy);
      //$tid = is_array($term) ? array_values($term) : FALSE;
      //$node->simplenews_tid = $tid ? $tid[0] : 0;
      //tid is also saved in this table since it is needed by _simplenews_send(), and the term_node table is
      //only updated after the execution of simplenews_insert(). It cannot be passed by a variable
      //since simplenews_cron() also calls _simplenews_send().
      $s_status = ($node->simplenews['send'] == SIMPLENEWS_COMMAND_SEND_NOW && user_access('send newsletter')) ? SIMPLENEWS_STATUS_SEND_PENDING : SIMPLENEWS_STATUS_SEND_NOT;
      db_query("INSERT INTO {simplenews_newsletters} (nid, tid, s_status, s_format, priority, receipt)
                VALUES (%d, %d, %d, '%s', %s, %d)", $node->nid, $node->simplenews['tid'], $s_status, $node->simplenews['s_format'], $node->simplenews['priority'], $node->simplenews['receipt']);
      _simplenews_send_node($node);
      break;
    case 'update':
      //$term = simplenews_validate_taxonomy($node->taxonomy);
      //$tid = is_array($term) ? array_values($term) : FALSE;
      //$node->simplenews_tid = $tid ? $tid[0] : 0;
      if ($node->simplenews['send'] == SIMPLENEWS_COMMAND_SEND_NOW && user_access('send newsletter')) {
        db_query("UPDATE {simplenews_newsletters} SET tid = %d, s_status = %d, s_format = '%s', priority = %s, receipt = %d
        WHERE nid = %d", $node->simplenews['tid'], SIMPLENEWS_STATUS_SEND_PENDING, $node->simplenews['s_format'], $node->simplenews['priority'], $node->simplenews['receipt'], $node->nid);
      }
      else {
        db_query("UPDATE {simplenews_newsletters} SET tid = %d, s_format = '%s', priority = %s, receipt = %d
        WHERE nid = %d", $node->simplenews['tid'], $node->simplenews['s_format'], $node->simplenews['priority'], $node->simplenews['receipt'], $node->nid);
      }
      _simplenews_send_node($node);
      break;
    case 'delete':
      $result = db_query('DELETE FROM {simplenews_newsletters} WHERE nid = %d', $node->nid);
      if ($result) {
        drupal_set_message(t('Newsletter %title was successfully deleted.', array('%title' => $node->title)));
      }
      break;
    case 'load':
      $node->simplenews = db_fetch_array(db_query('SELECT * FROM {simplenews_newsletters} WHERE nid = %d', $node->nid));
//dpm($node->simplenews);
      break;
  }
}

/**
 * Implementation of hook_form
 */
function simplenews_form(&$node) {
  $type = node_get_types('type', $node);

  if ($type->has_title) {
    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => TRUE,
      '#default_value' => $node->title,
      '#maxlength' => 255,
      '#weight' => -5,
    );
  }

  if ($type->has_body) {
    $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
    //TODO: these are (almost) now available from user_mail_tokens()
    $form['body_field']['body']['#description'] = t('This will be the body of your newsletter. Available variables are:') . ' %site ' . t('(the name of your website),') . ' %uri ' . t('(a link to your homepage),') . ' %uri_brief ' . t('(homepage link without the http://),') . ' %mymail ' . t('(your e-mail address),') . ' %date ' . t('(today\'s date),') . ' %login_url ' . t('(link to login page).');
  }

  return $form;
}

/**
 * Validate if term is Newsletter taxonomy term
 *
 * @return
 *   Array of selected Newsletter terms. Example: array(4, 12)
 *   FALSE: no Newsletter term is selected
 */
function simplenews_validate_taxonomy($taxonomy) {
  $vid = variable_get('simplenews_vid', '');
  $result = db_query('SELECT tid FROM {term_data} WHERE vid = %d', $vid);
  while ($tid = db_fetch_object($result)) {
    $tids[] = $tid->tid;
  }
  if (isset($tids) && !empty($taxonomy)) {
    $taxes = array();
    foreach ($taxonomy as $tax) {
      $taxes[] = $tax;
    }
    $selected_terms = array_intersect($tids, $taxes);
    return empty($selected_terms) ? FALSE : $selected_terms;
  }
  return FALSE;
}

/**
 * Implementation of hook_form_alter().
 */
function simplenews_form_alter(&$form, $form_state, $form_id) {
  $vid = variable_get('simplenews_vid', '');
  
  // Newsletter vocabulary form
  if ($form_id == 'taxonomy_form_vocabulary' && isset($form['vid']) && $form['vid']['#value'] == $vid) {
    // Hide critical options from forum vocabulary.
    $form['help_forum_vocab'] = array(
      '#value' => t('This is the designated simplenews vocabulary. This vocabulary can not be deleted.'),
      '#weight' => -1,
    );
    $form['content_types']['nodes']['#required'] = TRUE;
    $form['content_types']['nodes']['#description'] = t('Select content type(s) to be used as newsletter');
    //$form['hierarchy'] = array('#type' => 'value', '#value' => 1);
    //TODO: perhaps make newsletter term required
    //$form['settings']['required'] = array('#type' => 'value', '#value' => FALSE);
    //$form['settings']['relations'] = array('#type' => 'value', '#value' => FALSE);
    //$form['settings']['tags'] = array('#type' => 'value', '#value' => FALSE);
    //TODO: depending on ability to enable newsletter for multiple selection
    $form['settings']['multiple'] = array('#type' => 'value', '#value' => FALSE);
    
    // Prevent the vocabulary gets deleted
    unset($form['delete']);
  }
  
  // Simplenews newsletter node form 
  elseif (strpos($form_id, '_node_form') && isset($form['taxonomy'][$vid])) {
    if (isset($form['#node']->simplenews)) {
      $simplenews_values = (object) $form['#node']->simplenews;
    }
    $form['simplenews'] = array(
      '#type' => 'fieldset',
      '#title' => t('Newsletter sending options'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#tree' => TRUE,
    );
    // Hide format selection if there is nothing to choose
    if (count(_simplenews_format_options()) > 1) {
      $form['simplenews']['s_format'] = array(
        '#type' => 'select',
        '#title' => t('Format'),
        '#default_value' => $simplenews_values->s_format,
        '#options' => _simplenews_format_options(),
      );
    }
    else {
      $form['simplenews']['s_format'] = array(
        '#type' => 'hidden',
        '#value' => variable_get('simplenews_format', 'plain'),
      );
    }

    $form['simplenews']['priority'] = array(
      '#type' => 'select',
      '#title' => t('Priority'),
      '#default_value' => isset($simplenews_values->priority) ? $simplenews_values->priority : variable_get('simplenews_priority', SIMPLENEWS_PRIORITY_NONE),
      '#options' => array(
        SIMPLENEWS_PRIORITY_NONE => t('none'),
        SIMPLENEWS_PRIORITY_HIGHEST => t('highest'),
        SIMPLENEWS_PRIORITY_HIGH => t('high'),
        SIMPLENEWS_PRIORITY_NORMAL => t('normal'),
        SIMPLENEWS_PRIORITY_LOW => t('low'),
        SIMPLENEWS_PRIORITY_LOWEST => t('lowest'),
      ),
    );
    $form['simplenews']['receipt'] = array(
      '#type' => 'checkbox',
      '#title' => t('Request receipt'),
      '#return_value' => 1,
      '#default_value' => isset($simplenews_values->receipt) ? $simplenews_values->receipt : variable_get('simplenews_receipt', 0),
    );
    if (!isset($simplenews_values->s_status) || (isset($simplenews_values->s_status) && $simplenews_values->s_status == SIMPLENEWS_STATUS_SEND_NOT)) {
      if (user_access('send newsletter')) {
        $options[SIMPLENEWS_COMMAND_SEND_NONE] = t("Don't send now");
        $options[SIMPLENEWS_COMMAND_SEND_TEST] = t('Send one test newsletter to the test address');
        $options[SIMPLENEWS_COMMAND_SEND_NOW] = t('Send newsletter');
        $form['simplenews']['send'] = array(
          '#type' => 'radios',
          '#title' => t('Sending'),
          '#default_value' => isset($simplenews_values->send) ? $simplenews_values->send : variable_get('simplenews_send', SIMPLENEWS_COMMAND_SEND_NONE),
          '#options' => $options,
        );
      }
      else {
        $options[SIMPLENEWS_COMMAND_SEND_NONE] = t("Don't send now");
        $options[SIMPLENEWS_COMMAND_SEND_TEST] = t('Send one test newsletter to the test address');
        $form['simplenews']['send'] = array(
          '#type' => 'radios',
          '#title' => t('Sending'),
          '#default_value' => isset($simplenews_values->send) ? $simplenews_values->send : SIMPLENEWS_COMMAND_SEND_NONE,
          '#options' => $options,
          '#description' => t('You have no privileges to send this newsletter'),
        );
      }
      $address_default = variable_get('site_mail', ini_get('sendmail_from'));
      if (variable_get('simplenews_test_address_override', 0)) {
        $form['simplenews']['test_address'] = array(
          '#type' => 'textfield',
          '#title' => t('Test e-mail addresses'),
          '#description' => t('Supply a comma-separated list of e-mail addresses to be used as test addresses.'),
          '#default_value' => isset($simplenews_values->test_address) ? $simplenews_values->test_address : variable_get('simplenews_test_address', $address_default),
          '#size' => 60,
          '#maxlength' => 128,
        );
      }
      else {
        $form['simplenews']['test_address'] = array(
          '#type' => 'hidden',
          '#value' => variable_get('simplenews_test_address', $address_default),
        );
      }
    }
    else {
      $form['simplenews']['none'] = array(
        '#type' => 'checkbox',
        '#title' => t('This newsletter has been sent'),
        '#return_value' => 0,
        '#attributes' => array('checked' => 'checked', 'disabled' => 'disabled'),
      );
    }
    $form['simplenews']['s_status'] = array(
      '#type' => 'hidden',
      '#value' => isset($simplenews_values->s_status) ? $simplenews_values->s_status : SIMPLENEWS_STATUS_SEND_NOT,
    );
  }
}

/**
 * Implementation of hook_cron().
 */
function simplenews_cron() {
  _simplenews_send(FALSE);
}

function _simplenews_send_node($node) {
//dpm("_simplenews_send_node()");
//dpm($node);
  if ($node->simplenews['send'] == SIMPLENEWS_COMMAND_SEND_NOW) {
    _simplenews_send(TRUE);
    drupal_set_message(t('Newsletter %newsletter is being sent', array('%newsletter' => $node->title)));
  }
  elseif ($node->simplenews['send'] == SIMPLENEWS_COMMAND_SEND_TEST) {
    simplenews_send_test($node);
  }
}

/**
 * Implementation of hook_taxonomy().
 *
 * Deletes subscriptions to term when term is deleted, and cleans the blocks
 * table.
 */
function simplenews_taxonomy($op, $type, $term = NULL) {
  if ($op == 'delete' && $term['vid'] == variable_get('simplenews_vid', '')) {
    switch ($term) {
      case 'term':
        db_query('DELETE FROM {simplenews_snid_tid} WHERE tid = %d', $array['tid']);
        db_query("DELETE FROM {blocks} WHERE module = '%s' AND delta = '%s'", 'simplenews', $term['tid']);
        drupal_set_message(t('Deleted all subscriptions to newsletter %newsletter.', array('%newsletter' => $term['name'])));
        break;
//      case 'vocabulary':
//        variable_del('simplenews_vid');
        break;
    }
  }
}

/**
 * Implementation of hook_user().
 *
 * Checks whether an email address is subscribed to the newsletter when a new
 * user signs up. If so, changes uid from 0 to the new uid in
 * simplenews_subscriptions so that the user's subscription status is known when
 * he logs in.
 */
function simplenews_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'insert':
      if ($edit['mail']) {
        $query = "SELECT snid FROM {simplenews_subscriptions} WHERE mail = '%s'";
        if ($result = db_fetch_object(db_query($query, $edit['mail']))) {
          db_query("UPDATE {simplenews_subscriptions} SET uid = %d WHERE snid = %d", $edit['uid'], $result->snid);
        }
      }
      break;
    case 'update':
      if ($category == 'account' && $edit['mail']) {
        $query = "SELECT snid FROM {simplenews_subscriptions} WHERE uid = %d";
        if ($result = db_fetch_object(db_query($query, $account->uid))) {
          db_query("DELETE FROM {simplenews_subscriptions} WHERE mail = '%s' AND uid = %d", $edit['mail'], 0);
          db_query("UPDATE {simplenews_subscriptions} SET mail = '%s' WHERE snid = %d", $edit['mail'], $result->snid);
        }
        else {
          $query = "SELECT snid FROM {simplenews_subscriptions} WHERE mail = '%s'";
          if ($result = db_fetch_object(db_query($query, $edit['mail']))) {
            db_query("UPDATE {simplenews_subscriptions} SET uid = %d WHERE snid = %d", $account->uid, $result->snid);
          }
        }
      }
      elseif ($category == 'newsletter' && user_access('subscribe to newsletters')) {
        foreach ($edit['newsletters'] as $tid => $checked) {
          if ($checked) {
            simplenews_subscribe_user($account->mail, $tid, FALSE);
          }
          else {
            simplenews_unsubscribe_user($account->mail, $tid, FALSE);
          }
        }
      }
      break;
    case 'delete':
      db_query("UPDATE {simplenews_subscriptions} SET uid = 0 WHERE uid = %d", $account->uid);
      break;
    case 'form':
      if ($category == 'newsletter' && user_access('subscribe to newsletters')) {
        $subscription = simplenews_get_user_subscription($account->mail);
        $form = _simplenews_subscription_manager_form($subscription);
        $form['subscriptions']['#title'] =  t('Current newsletter subscriptions');
        unset($form['update'], $form['subscriptions']['mail']);
        return $form;
      }
      break;
    case 'categories':
      if (user_access('subscribe to newsletters')) {
        $output[] = array('name' => 'newsletter', 'title' => t('My newsletters'), 'weight' => 10);
      }
      return $output;
    case 'view':
      global $user;
      if ($user->uid == $account->uid || user_access('administer users')) {
        $account->content['simplenews'] = array(
          '#type' => 'user_profile_category',
          '#title' => t('Newsletters'),
        );
        $tree = taxonomy_get_tree(variable_get('simplenews_vid', ''));
        foreach ($tree as $newsletter) {
          if (db_result(db_query('SELECT COUNT(s.uid) FROM {simplenews_subscriptions} s INNER JOIN {simplenews_snid_tid} t ON s.snid = t.snid WHERE s.uid = %d AND t.tid = %d', $account->uid, $newsletter->tid))) {
            $subscriptions[] = l($newsletter->name, 'taxonomy/term/'. $newsletter->tid);
          }
        }
        if (isset($subscriptions)) {
          $subscriptions = implode(', ', $subscriptions);
        }
        else {
          $subscriptions = t('None');
        }
        $account->content['simplenews']['subscriptions'] = array(
          '#type' => 'user_profile_item',
          '#title' => t('Current subscriptions'),
          '#value' => $subscriptions,
        );
        if (user_access('subscribe to newsletters')) {
          $account->content['simplenews']['my_newsletters'] = array(
            '#type' => 'user_profile_item',
            '#value' => t('Manage !my_subscriptions', array('!my_subscriptions' => l(t('my subscriptions'), 'user/'. $account->uid .'/edit/newsletter'))),
            '#weight' => -1,
          );
        }
        return array(t('Newsletters') => $items);
      }
      break;
  }
}

/**
 * Implementation of hook_block().
 */
function simplenews_block($op = 'list', $delta = 0, $edit = array()) { 
  switch ($op) {
    case 'list':
      $blocks = array();
      foreach (taxonomy_get_tree(variable_get('simplenews_vid', '')) as $newsletter) {
        //TODO: 1. without form -> by role; 2. with form -> user caching with refresh on subscribe/unsubscribe (option as setting) or no caching
        $blocks[$newsletter->tid] = array(
          'info' => t('Newsletter: @title', array('@title' => $newsletter->name)),
          'cache' => variable_get('simplenews_block_f_'. $newsletter->tid, 1) ? BLOCK_NO_CACHE : BLOCK_CACHE_PER_ROLE,
        );
      }
      return $blocks;
    case 'configure':
      $form['simplenews_block_'. $delta]['simplenews_block_m_status_'. $delta] = array(
        '#type' => 'checkbox',
        '#title' => t('Display block message'),
        '#return_value' => 1,
        '#default_value' => variable_get('simplenews_block_m_status_'. $delta, 1),
      );
      $form['simplenews_block_'. $delta]['simplenews_block_m_'. $delta] = array(
        '#type' => 'textfield',
        '#title' => t('Block message'),
        '#size' => 60,
        '#maxlength' => 128,
        '#default_value' => variable_get('simplenews_block_m_'. $delta, t('Stay informed on our latest news!')),
      );
      $form['simplenews_block_'. $delta]['simplenews_block_f_'. $delta] = array(
        '#type' => 'checkbox',
        '#title' => t('Display subscription form'),
        '#return_value' => 1,
        '#description' => t('If selected a subscription form is displayed, if not selected a link to the subscription page is displayed.'),
        '#default_value' => variable_get('simplenews_block_f_'. $delta, 1),
      );
      $form['simplenews_block_'. $delta]['simplenews_block_l_'. $delta] = array(
        '#type' => 'checkbox',
        '#title' => t('Display link to previous issues'),
        '#return_value' => 1,
        '#default_value' => variable_get('simplenews_block_l_'. $delta, 1),
        '#description' => t('Links (to previous issues, previous issues and RSS-feed) are only displayed to users who have "view links in block" privileges.'),
      );
      $form['simplenews_block_'. $delta]['simplenews_block_i_status_'. $delta] = array(
        '#type' => 'checkbox',
        '#title' => t('Display previous issues'),
        '#return_value' => 1,
        '#default_value' => variable_get('simplenews_block_i_status_'. $delta, 0),
      );
      $form['simplenews_block_'. $delta]['simplenews_block_i_'. $delta] = array(
        '#type' => 'select',
        '#title' => t('Number of issues to display'),
        '#options' => drupal_map_assoc(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)),
        '#default_value' => variable_get('simplenews_block_i_'. $delta, 5),
      );
      $form['simplenews_block_'. $delta]['simplenews_block_r_'. $delta] = array(
        '#type' => 'checkbox',
        '#title' => t('Display RSS-feed icon'),
        '#return_value' => 1,
        '#default_value' => variable_get('simplenews_block_r_'. $delta, 1),
      );
      return $form;
    case 'save':
        variable_set('simplenews_block_m_status_'. $delta, $edit['simplenews_block_m_status_'. $delta]);
        variable_set('simplenews_block_m_'. $delta, $edit['simplenews_block_m_'. $delta]);
        variable_set('simplenews_block_f_'. $delta, $edit['simplenews_block_f_'. $delta]);
        variable_set('simplenews_block_l_'. $delta, $edit['simplenews_block_l_'. $delta]);
        variable_set('simplenews_block_i_status_'. $delta, $edit['simplenews_block_i_status_'. $delta]);
        variable_set('simplenews_block_i_'. $delta, $edit['simplenews_block_i_'. $delta]);
        variable_set('simplenews_block_r_'. $delta, $edit['simplenews_block_r_'. $delta]);
        break;
    case 'view':
      if ($newsletter = taxonomy_get_term($delta)) {
        $block = array(
          'subject' => check_plain($newsletter->name),
          'content' => theme('simplenews_block', _simplenews_block($newsletter->tid)),
        );
      }
      return $block;
  }
}

// TODO implement _simplenews_block as _preprocess_ function ?
/**
 * Helper function: generate block content before theming
 * Collects data and applies access restriction
 */
function _simplenews_block($tid) {
  global $user;
  $block = array();
  $recent = simplenews_recent_newsletters($tid, variable_get('simplenews_block_i_'. $tid, 5));
  
  $block['subscribed'] = (simplenews_user_is_subscribed($user->mail, $tid) == TRUE);
  $block['user'] = !empty($user->uid);
  $block['tid'] = $tid;
  $block['message'] = check_plain(variable_get('simplenews_block_m_'. $tid, t('Stay informed on our latest news!')));
  if (user_access('subscribe to newsletters')) {
    $block['form'] = drupal_get_form('simplenews_block_form', $tid);
    $block['subscription-link'] = l(t('Manage my subscriptions'), 'newsletter/subscriptions'); 
  }
  if (user_access('view links in block') || user_access('administer newsletters')) {
    $block['newsletter-link'] = l(t('Previous issues'), 'taxonomy/term/'. $tid);
    $block['itemlist'] = theme('item_list', $recent, t('Previous issues'), 'ul');
    $term = taxonomy_get_term($tid);
    $block['rssfeed'] = theme('feed_icon', url('taxonomy/term/'. $tid .'/0/feed'), t('@newsletter feed', array('@newsletter' => $term->name)));
  }

  return $block;
}

/**
 * Helper function for API functions; loads a user or creates a dummy anonymous
 * user with uid = 0 and $mail equal to the input param.
 */
function _simplenews_user_load($mail) {
  $account = user_load(array('mail' => $mail));
  if ($account === FALSE) {
    // Construct anonymous user since we don't have a user that matches that e-amil.
    $account = new stdClass();
    $account->uid = 0;
    $account->mail = $mail;
  }
  return $account;
}

/**
 * API function; subscribes a user to a newsletter.
 *
 * @param $mail
 *   The e-mail address to subscribe to the newsletter.
 * @param $tid
 *   The term ID of the newsletter.
 * @param $confirm
 *   Whether we should send a confirmation e-mail and hold off adding this user
 *   to the newsletter until he or she clicks the confirm link in the e-mail.
 */
function simplenews_subscribe_user($mail, $tid, $confirm = TRUE) {
  $subscription = simplenews_get_user_subscription($mail);

  // If user is not subscribed to ANY newsletter, add basic info first.
  if (!$subscription) {
    $account = _simplenews_user_load($mail);
    db_query("INSERT INTO {simplenews_subscriptions} (mail, uid, activated) VALUES ('%s', %d, %d)", $mail, $account->uid, 1);
    $subscription = simplenews_get_user_subscription($mail);
  }

  $newsletter = taxonomy_get_term($tid);
  if ($confirm) {
    // Send confirmation e-mail to user to complete subscription or to tell
    // them that he or she is already subscribed.
    simplenews_mail_confirm($mail, $newsletter, $subscription ? $subscription->snid : NULL, 'subscribe');
  }
  elseif (!isset($subscription->tids[$tid])) {
    // Then, add user to newsletter relationship if not already subscribed.
    db_query("INSERT INTO {simplenews_snid_tid} (snid, tid) VALUES (%d, %d)", $subscription->snid, $tid);
  }
  return TRUE;
}

/**
 * API function; unsubscribes a user from a newsletter.
 *
 * @param $mail
 *   The e-mail address to unsubscribe from the newsletter.
 * @param $tid
 *   The term ID of the newsletter.
 * @param $confirm
 *   Whether we should send a confirmation e-mail and hold off removing this
 *   user from the newsletter until he clicks the confirm link in the e-mail.
 */
function simplenews_unsubscribe_user($mail, $tid, $confirm = TRUE) {
  $subscription = simplenews_get_user_subscription($mail);

  if (!$newsletter = taxonomy_get_term($tid)) {
    watchdog('newsletter', 'Could not load newsletter term ID %id', array('%id' => $tid));
    return FALSE;
  }

  if ($confirm) {
    // Send confirmation e-mail to user to complete unsubscription or to tell
    // them that he or she is not subscribed.
    simplenews_mail_confirm($mail, $newsletter, $subscription ? $subscription->snid : NULL, 'unsubscribe');
  }
  elseif (isset($subscription->tids[$tid])) {
    // If we're not confirming first, just remove the user from the newsletter.
    db_query('DELETE FROM {simplenews_snid_tid} WHERE snid = %d AND tid = %d', $subscription->snid, $tid);

    // Clean up simplenews_subscriptions if no more newsletter subscriptions.
    if (!db_result(db_query("SELECT COUNT(*) FROM {simplenews_snid_tid} t WHERE t.snid = %d", $subscription->snid))) {
      db_query('DELETE FROM {simplenews_subscriptions} WHERE snid = %d', $subscription->snid);
    }
  }

  return TRUE;
}

/**
 * API function; returns if the user's e-mail address is subscribed to the given
 * newsletter.
 */
function simplenews_user_is_subscribed($mail, $tid) {
  $account = _simplenews_user_load($mail);
  return db_result(db_query("SELECT COUNT(*) FROM {simplenews_subscriptions} s INNER JOIN {simplenews_snid_tid} t ON s.snid = t.snid WHERE s.mail = '%s' AND s.uid = %d AND t.tid = %d", $account->mail, $account->uid, $tid)) ? TRUE : FALSE;
}

/**
 * API function; returns the subscription for the given e-mail address.
 */
function simplenews_get_user_subscription($mail) {
  $account = _simplenews_user_load($mail);
  $snid = db_result(db_query("SELECT snid FROM {simplenews_subscriptions} s WHERE s.mail = '%s' AND s.uid = %d", $account->mail, $account->uid));
  return simplenews_get_subscription($snid);
}

/**
 * API function; returns the subscription for the given subscriber ID (snid).
 */
function simplenews_get_subscription($snid) {
  $subscription = db_fetch_object(db_query("SELECT * FROM {simplenews_subscriptions} s WHERE s.snid = %d", $snid));

  if ($subscription) {
    $result = db_query("SELECT tid FROM {simplenews_snid_tid} t WHERE t.snid = %d", $subscription->snid);
    $subscription->tids = array();
    while ($newsletter = db_fetch_object($result)) {
      $subscription->tids[$newsletter->tid] = $newsletter->tid;
    }
    return $subscription;
  }
  else {
    return FALSE;
  }
}

function simplenews_handle_messages($one, $two_or_more, $type = 'status') {
  if (isset($_SESSION['messages'][$type])) $msg = $_SESSION['messages'][$type];
  else $msg = array();
  $key = array_search($one, $msg);
  if ($key || $key === 0) {
    $_SESSION['messages'][$type][$key] = $two_or_more;
  }
  elseif (!in_array($two_or_more, $msg)) {
    drupal_set_message($one, $type);
  }
}

/**
 * Generates the subscription form for users.
 */
function simplenews_subscription_manager_form(&$form_state, $snid = NULL) {
//TODO: make this form suitable for selected range of newsletters $range = array(snid, snid, snid)
//TODO: make this form suitable for select list instead of check boxes, single/multi select
  global $user;

  if (isset($snid)) {
    $subscription = simplenews_get_subscription($snid);

    //TODO: include below defaults in simplenews_get_subscription()
    // If we couldn't load subscription set defaults.
    if (!$subscription) {
      $subscription = new stdClass();
      $subscription->tids = array();
    }
  } 
  else {
    $subscription = simplenews_get_user_subscription($user->mail);
    //TODO: include below default in simplenews_get_user_subscription()
    // If current user is not subscribed to any newsletter set current user data.
    if ($user->uid && !$subscription) {
      $subscription = new stdClass();
      $subscription->tids = array();
      $subscription->uid = $user->uid;
      $subscription->mail = $user->mail;
    }
  }

  // If non-admin is trying to edit someone else's subscription, access denied.
  if ($user->uid && $user->uid != $subscription->uid && !user_access('administer newsletters')) {
    drupal_access_denied();
    return;
  }
  $form = _simplenews_subscription_manager_form($subscription);
  $form['#validate'][] = 'simplenews_subscription_manager_form_validate';
  $form['#submit'][] = 'simplenews_subscription_manager_form_submit';
  $form['#redirect'] = '';  //Return to home page after (un)subscribe

  return $form;
}

/**
 * Helper function to build subscription manager form, also used in user edit.
 */
function _simplenews_subscription_manager_form($subscription) {
  global $user;
  $form = array();
  
  $options = array();
  foreach (taxonomy_get_tree(variable_get('simplenews_vid', '')) as $newsletter) {
    $options[$newsletter->tid] = $newsletter->name;
    $default_value[$newsletter->tid] = false;
  }

  $form['subscriptions'] = array(
    '#type' => 'fieldset',
    '#description' => t('Select the newsletter(s) to which you want to subscribe or unsubscribe.'),
  );
  $form['subscriptions']['newsletters'] = array(
    '#type' => 'checkboxes',
    '#options' => $options,
    '#default_value' => array_merge($default_value, (array)$subscription->tids),
  );

  // If current user is an authenticated, just display e-mail. Anonymous users
  // see an e-mail box and will receive confirmations
  if ($user->uid) {
    //TODO replace $subscription by $user in next two lines
    $form['subscriptions']['#title'] = t('Subscriptions for %mail', array('%mail' => $subscription->mail));
    $form['subscriptions']['mail'] = array('#type' => 'value', '#value' => $subscription->mail);
    $form['update'] = array(
      '#type' => 'submit',
      '#value' => t('Update'),
      '#weight' => 20,
    );
  }
  else {
    $form['subscriptions']['#title'] = t('Manage your newsletter subscriptions');
    $form['subscriptions']['mail'] = array(
      '#type' => 'textfield',
      '#title' => t('E-mail'),
      '#size' => 20,
      '#maxlength' => 128,
      '#weight' => 10,
      '#required' => TRUE,
    );
    $form['subscribe'] = array(
      '#type' => 'submit',
      '#value' => t('Subscribe'),
      '#weight' => 20,
    );
    $form['unsubscribe'] = array(
      '#type' => 'submit',
      '#value' => t('Unsubscribe'),
      '#weight' => 30,
    );
  }
  return $form;
}
/**
 * Forms API callback; validates the settings form.
 */
function simplenews_subscription_manager_form_validate($form, &$form_state) {
  $valid_email = valid_email_address($form_state['values']['mail']);
  if (!$valid_email) {
    form_set_error('mail', t('The e-mail address you supplied is not valid.'));
  }
  $checked_newsletters = array_filter($form_state['values']['newsletters']);
  if (!count($checked_newsletters) && !simplenews_get_user_subscription($form_state['values']['mail'])) {
    form_set_error('newsletters', t('You must select at least one newsletter.'));
  }
}

/**
 * Forms API callback; submit handler for subscription form.
 */
function simplenews_subscription_manager_form_submit($form, &$form_state) {
  switch ($form_state['values']['op']) {
    case t('Update'):
      foreach ($form_state['values']['newsletters'] as $tid => $checked) {
        if ($checked) {
          simplenews_subscribe_user($form_state['values']['mail'], $tid, FALSE);
        }
        else {
          simplenews_unsubscribe_user($form_state['values']['mail'], $tid, FALSE);
        }
      }
      drupal_set_message(t('The newsletter subscriptions for %mail have been updated.', array('%mail' => $form_state['values']['mail'])));
      break;
    case t('Subscribe'):
      foreach ($form_state['values']['newsletters'] as $tid => $checked) {
        if ($checked) {
          simplenews_subscribe_user($form_state['values']['mail'], $tid);
        }
      }
      drupal_set_message(t('You will receive a confirmation e-mail shortly containing further instructions on how to complete your subscription.'));
      break;
    case t('Unsubscribe'):
      foreach ($form_state['values']['newsletters'] as $tid => $checked) {
        if ($checked) {
          simplenews_unsubscribe_user($form_state['values']['mail'], $tid);
        }
      }
      drupal_set_message(t('You will receive a confirmation e-mail shortly containing further instructions on how to complete the unsubscription process.'));
      break;
  }
}

function simplenews_recent_newsletters($tid, $count = 5, $title = NULL) {
  $result = db_query_range(db_rewrite_sql('SELECT n.nid, n.title, sn.s_status FROM {node} n INNER JOIN {term_node} t ON n.vid = t.vid INNER JOIN {simplenews_newsletters} sn ON n.nid = sn.nid WHERE (t.tid = %d AND n.status = %d) ORDER BY n.created DESC'), $tid, 1, 0, $count);
  $titles = array();
  while ($item = db_fetch_object($result)) {
    $titles[$item->nid]['data'] = l($item->title, 'node/'. $item->nid);
    $titles[$item->nid]['class'] = ($item->s_status == SIMPLENEWS_STATUS_SEND_NOT) ? 'newsletter-created' : 'newsletter-send';
  }
  return $titles;  
}

/**
 * Block form callback function
 */
function simplenews_block_form(&$form_state, $tid) {
  global $user;
  $form = array();

  if ($user->uid) {
    if (simplenews_user_is_subscribed($user->mail, $tid)) {
      $submit_text = t('Unsubscribe');
      $form['action'] = array('#type' => 'value', '#value' => 'unsubscribe');
    }
    else {
      $submit_text = t('Subscribe');
      $form['action'] = array('#type' => 'value', '#value' => 'subscribe');
    }
    $form['display_mail'] = array(
      '#type' => 'item',
      '#title' => t('E-mail'),
      '#value' => truncate_utf8($user->mail, 29, FALSE, TRUE),
    );
    $form['mail'] = array('#type' => 'value', '#value' => $user->mail);
  }
  else {
    $form['mail'] = array(
      '#type' => 'textfield',
      '#title' => t('E-mail'),
      '#size' => 20,
      '#maxlength' => 128,
      '#required' => TRUE,
    );
    $form['action'] = array(
      '#type' => 'radios',
      '#default_value' => 'subscribe',
      '#options' => array('subscribe' => t('Subscribe'), 'unsubscribe' => t('Unsubscribe')),
    );
  }
  $form['#tid'] = $tid;
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => isset($submit_text) ? $submit_text : t('Save')
  );
  return $form;
}

/**
 * Forms API callback; handles block form (un)subscribe validation.
 */
function simplenews_block_form_validate($form, &$form_state) {
  if (!valid_email_address($form_state['values']['mail'])) {
    form_set_error('mail', t("The e-mail address you supplied is not valid."));
  }
}

/**
 * Forms API callback; handles block form (un)subscribe submissions.
 */
function simplenews_block_form_submit($form, &$form_state) {
  global $user;
  $tid = $form['#tid'];
  $account = _simplenews_user_load($form_state['values']['mail']);

  // If e-mail belongs to the current registered user, don't send confirmation.
  $confirm = $account->uid && $account->uid == $user->uid ? FALSE : TRUE;

  switch ($form_state['values']['action']) {
    case 'subscribe':
      simplenews_subscribe_user($form_state['values']['mail'], $tid, $confirm);
      if ($confirm) {
        drupal_set_message(t('You will receive a confirmation e-mail shortly containing further instructions on how to complete your subscription.'));
      }
      else {
        drupal_set_message(t('You have been successfully subscribed.'));
      }
      break;
    case 'unsubscribe':
      simplenews_unsubscribe_user($form_state['values']['mail'], $tid, $confirm);
      if ($confirm) {
        drupal_set_message(t('You will receive a confirmation e-mail shortly containing further instructions on how to complete the unsubscription process.'));
      }
      else {
        drupal_set_message(t('You have been successfully unsubscribed.'));
      }
      break;
  }
}

/**
* Prepare node for sending
*/
function simplenews_node_prepare($nid, $tid) {
  $node = node_load(array('nid' => $nid), NULL, TRUE);
//dpm("simplenews_node_prepare()");
//dpm($node);
  $node = simplenews_replace_vars($node, FALSE);

  // To play well with other modules that add content to the node,
  // simplenews_node_prepare() must mimic node_view() as far as possible.
  // Following is adapted from node_view().
  $node = node_build_content($node, false, true);
  $content = drupal_render($node->content);
  $node->body = $content;
  unset($node->teaser);
  node_invoke_nodeapi($node, 'alter', false, true);

  $node = theme('simplenews_newsletter', $node, $tid);

  // TODO: Probably should refactor the whole processing, but check here for
  // mimemail and don't mess with body if we're gonna pass it to mimemail().
  
// TODO: mimemail support waiting for D6 version of this module
//  if ($node->simplenews['s_format'] == 'plain' || !module_exists('mimemail')) {
    $node->body = simplenews_html_to_text($node->body, variable_get('simplenews_hyperlinks_'. $tid, 1));
//  }

  simplenews_set_from($node, $tid);
  return $node;
}

/**
 * Helper function to set from name and e-mail for a mail object.
 */
function simplenews_set_from(&$mail, $tid = NULL) {
  $address_default = variable_get('site_mail', ini_get('sendmail_from'));
  $name_default = variable_get('site_name', 'drupal');

  if (isset($tid)) {
    $mail->from_address = variable_get('simplenews_from_address_'. $tid, $address_default);
    $mail->from_name = variable_get('simplenews_from_name_'. $tid, $name_default);
  }
  else {
    $mail->from_address = variable_get('simplenews_from_address', $address_default);
    $mail->from_name = variable_get('simplenews_from_name', $name_default);
  }
}

/**
* Send the newsletter
*/
function _simplenews_send($timer = FALSE) {
  $max_time = variable_get('simplenews_time', 5);
  if ($timer && $max_time == 0) {
    return;
  }
  if ($max_time == 0) {
    $max_time = 1;
  }
  $max_time = $max_time - 0.5;
  $start_time = simplenews_time();
  if (!$timer) {
    $throttle = variable_get('simplenews_throttle', 20);
    static $counter = 0;
  }
  $result = db_query(db_rewrite_sql('SELECT n.nid, s.tid, n.created FROM {node} n INNER JOIN {simplenews_newsletters} s ON n.nid = s.nid WHERE s.s_status = %d ORDER BY n.created ASC'), SIMPLENEWS_STATUS_SEND_PENDING);
  while ($nid = db_fetch_object($result)) {
    $term = taxonomy_get_term($nid->tid);
    $node = simplenews_node_prepare($nid->nid, $nid->tid);  //TODO check if $nid->tid or $term->vid must be used here

    $result2 = db_query('SELECT s.mail, s.snid FROM {simplenews_subscriptions} s INNER JOIN {simplenews_snid_tid} t ON s.snid = t.snid WHERE s.is_send = %d AND s.activated = %d AND t.tid = %d ORDER BY s.snid ASC', 0, 1, $nid->tid);
    while ($mail = db_fetch_object($result2)) {
      $hash = _simplenews_generate_hash($mail->mail, $mail->snid, $nid->tid);

      // Add themable footer to message as this changes per user.
      $user_node = drupal_clone($node);
//dpm($user_node);
//dpm($node);
      $user_node = theme('simplenews_newsletter_footer', $user_node, $hash);

      $user_node->to = $mail->mail;
      $counter++;
      if (simplenews_mail_send($user_node)) {
        watchdog('newsletter', 'Newsletter %title sent to %email.', array('%title' => $user_node->title, '%email' => $mail->mail), WATCHDOG_DEBUG);
        // TODO: This looks like it may choke if you were sending multiple
        // newsletters through cron. Should move is_send to snid_tid table
        // or somewhere else to see which newsletter has been sent.
        db_query('UPDATE {simplenews_subscriptions} SET is_send = %d WHERE snid = %d', 1, $mail->snid);
        // don't send mails too fast, servers may choke. Wait for 10 ms.
        usleep(10000);
      }
      else {
        watchdog('newsletter', 'Newsletter %title could not be sent to %email.', array('%title' => $user_node->title, '%email' => $mail->mail), WATCHDOG_ERROR);
      }
      if ($timer) {
        $int_time = simplenews_time();
      }
      else {
        if ($counter < $throttle) {
          $int_time = $start_time;
        }
        else {
          return;
        }
      }
      if (!($int_time - $start_time < $max_time)) {
        return;
      }
    }
    db_query('UPDATE {simplenews_subscriptions} SET is_send = %d', 0);
    db_query('UPDATE {simplenews_newsletters} SET s_status = %d WHERE nid = %d', SIMPLENEWS_STATUS_SEND_READY, $node->nid);
    if ($timer) {
      $int_time = simplenews_time();
    }
    else {
      $int_time = $start_time;
    }
    if (!($int_time - $start_time < $max_time)) {
      return;
    }
  }
}


/**
* Send a test newsletter
*/
function simplenews_send_test($input) {
  $tid = db_result(db_query('SELECT tid FROM {simplenews_newsletters} WHERE nid = %d', $input->nid));
  $tid = $tid ? $tid : FALSE;
  $node = simplenews_node_prepare($input->nid, $tid);
  $term = $tid ? taxonomy_get_term($tid) : FALSE;
  $node->body .= "\n\n-- \n". t('Footer will be appended here');
  
  $mails = explode(',', $input->test_address);
  foreach ($mails as $mail) {
    $recipients[] = trim($mail);
  } 
  foreach ($recipients as $to) {
    $node->simplenews['to'] = $to;
    if (simplenews_mail_send($node)) {
      drupal_set_message(t('Test newsletter sent to %recipient.', array('%recipient' => $to)));
    }
  }
}

/**
* Send confirmation email
*/
function simplenews_mail_confirm($email, $newsletter, $snid = NULL, $op = NULL) {
  if (isset($snid) && isset($newsletter->tid)) {
    $hash = _simplenews_generate_hash($email, $snid, $newsletter->tid);
  }
  else {
    $hash = NULL;
  }
  $mail = theme('simplenews_newsletter_confirmation', $email, $newsletter, $snid, $op, $hash);

  if (simplenews_mail_send($mail)) {
    watchdog('newsletter', 'Sent confirmation e-mail to %mail.', array('%mail' => $email));
  }
  else {
    watchdog('newsletter', 'Sending of confirmation e-mail to %mail failed.', array('%mail' => $email), WATCHDOG_ERROR);
  }
}

/**
 * Mail engine to send newsletter. If you want to send HTML newsletters you need
 * to plug in an extra module
 *
 * TODO: HTML-mail (MimeMail) support
 * TODO: Other mail back-end support
 *
 * @param $mail
 *   An object with at least $mail->to, $mail->subject, and $mail->message.
 */
function simplenews_mail_send($mail) {
  $to = $mail->simplenews['to'];
  $language = language_default();
  $from = isset($mail->simplenews['from_address']) ? $mail->simplenews['from_address'] : variable_get('site_mail', ini_get('sendmail_from'));
  $params = array(
    'priority' => $mail->simplenews['priority'],
    'from_name' => $mail->simplenews['from_name'],
    'receipt' => $mail->simplenews['receipt'],
    's_format' => $mail->simplenews['s_format'],
    'context' => array(
      'subject' => isset($mail->simplenews['subject']) ? $mail->simplenews['subject'] : $mail->title,
      'message' => $mail->body,
    ),
  );
  return drupal_mail('simplenews', 'mail', $to, $language, $params, $from);
}

/**
 * Implementation of hook_mail
 */
function simplenews_mail($key, &$message, $params) {
  $headers = array();
  $context = $params['context'];
  
  // If receipt is requested, add headers.
  if ($params['receipt']) {
    $headers['Disposition-Notification-To'] = $message['headers']['From'];
    $headers['X-Confirm-Reading-To'] = $message['headers']['From'];
  }

  // Add priority if set.
  switch ($params['priority']) {
    case SIMPLENEWS_PRIORITY_HIGHEST:
      $headers['Priority'] = 'High';
      $headers['X-Priority'] = '1';
      $headers['X-MSMail-Priority'] = 'Highest';
      break;
    case SIMPLENEWS_PRIORITY_HIGH:
      $headers['Priority'] = 'urgent';
      $headers['X-Priority'] = '2';
      $headers['X-MSMail-Priority'] = 'High';
      break;
    case SIMPLENEWS_PRIORITY_NORMAL:
      $headers['Priority'] = 'normal';
      $headers['X-Priority'] = '3';
      $headers['X-MSMail-Priority'] = 'Normal';
      break;
    case SIMPLENEWS_PRIORITY_LOW:
      $headers['Priority'] = 'non-urgent';
      $headers['X-Priority'] = '4';
      $headers['X-MSMail-Priority'] = 'Low';
      break;
    case SIMPLENEWS_PRIORITY_LOWEST:
      $headers['Priority'] = 'non-urgent';
      $headers['X-Priority'] = '5';
      $headers['X-MSMail-Priority'] = 'Lowest';
      break;
  }

  if (!empty($params['from_name'])) {
    $headers['From'] = '"'. addslashes($params['from_name']) .'" <'. $message['headers']['From'] .'>';
  } 

  $message['headers'] = array_merge($message['headers'], $headers); 
  $message['subject'] = $context['subject'];
  $message['body'][] = drupal_html_to_text($context['message']);
}

/**
 * HTML to text conversion for HTML and special characters
 * Converts some special HTMLcharacters in addition to drupal_html_to_text()
 *
 * @param $text = source text
 * @param @inline = true: hyperlinks will be replaced in-line
 *                  flase: hyperlinks will be placed as reference at the end of the message
 */
function simplenews_html_to_text($text, $inline = false) {
  //TODO add support for inline links
  // Replace some special characters before performing the drupal standard conversion
  $text = preg_replace(_simplenews_define_search(), _simplenews_define_replace(), $text);
  return drupal_html_to_text($text);
}

/**
 *  List of preg* regular expression patterns to search for,
 *  used in conjunction with _simplenews_define_replace().
 */
function _simplenews_define_search() {

    $search = array(
        '/&quot;/i',
        '/&gt;/i',
        '/&lt;/i',
        '/&amp;/i',
        '/&copy;/i',
        '/&trade;/i',
        '/&#8220;/',
        '/&#8221;/',
        '/&#8211;/',
        '/&#8217;/',
        '/&#38;/',
        '/&#169;/',
        '/&#8482;/',
        '/&#151;/',
        '/&#147;/',
        '/&#148;/',
        '/&#149;/',
        '/&reg;/i',
        '/&bull;/i',
        '/&euro;/i',
    );
    return $search;
}

/**
 *  List of pattern replacements corresponding to patterns searched.
 */
function _simplenews_define_replace() {

    $replace = array(
        '"',
        '>',
        '<',
        '&',
        '(c)',
        '(tm)',
        '"',
        '"',
        '-',
        "'",
        '&',
        '(c)',
        '(tm)',
        '--',
        '"',
        '"',
        '*',
        '(R)',
        '*',
        'Euro '
    );
    return $replace;
}

function simplenews_types_overview() {
  $rows = array();
  $header = array(t('Newsletter name'), t('Operations'));

  foreach (taxonomy_get_tree(variable_get('simplenews_vid', '')) as $term) {
    $rows[] = array($term->name, l(t('edit newsletter'), 'admin/content/newsletters/types/edit/'. $term->tid));
  }

  if (count($rows) == 0) {
    $rows[] = array(array('data' => t('There are currently no newsletter series.'), 'colspan' => 2));
  }
  return theme('table', $header, $rows);
}

/**
 * API function; deletes every subscription for the given subscription ID.
 */
function simplenews_delete_subscription($snid) {
  $account = db_fetch_object(db_query('SELECT mail FROM {simplenews_subscriptions} WHERE snid = %d', $snid));
  db_query('DELETE FROM {simplenews_subscriptions} WHERE snid = %d', $snid);
  db_query('DELETE FROM {simplenews_snid_tid} WHERE snid = %d', $snid);
  watchdog('newsletter', 'User %email deleted from the subscription list.', array('%email' => $account->mail));
}

/**
 * Menu callback; confirm the user's (un)subscription request when they click
 * on the confirm link in the e-mail footer.
 */
function simplenews_confirm_subscription($op1 = NULL, $op2 = NULL) {
  $md5 = drupal_substr($op2, 0, 10);
  list($snid, $tid) = explode('t', drupal_substr($op2, 10));

  $result = db_query('SELECT snid, mail FROM {simplenews_subscriptions} WHERE snid = %d', $snid);
  if (!($subs = db_fetch_object($result))) {
    drupal_not_found();
    return;
  }

  if ($md5 == drupal_substr(md5($subs->mail . simplenews_private_key()), 0, 10)) {
    $newsletter = taxonomy_get_term($tid);
    if ($op1 == 'remove') {
      return drupal_get_form('simplenews_confirm_removal_form', $subs->mail, $newsletter);
    }
    elseif ($op1 == 'add') {
      return drupal_get_form('simplenews_confirm_add_form', $subs->mail, $newsletter);
    }
  }

  // If md5 didn't match, do a not found.
  drupal_not_found();
  return;
}

/**
 * Generate the confirm add form.
 */
function simplenews_confirm_add_form(&$form_state, $mail, $newsletter) {
  $form = array();
  $form['mail'] = array('#type' => 'value', '#value' => $mail);
  $form['newsletter'] = array('#type' => 'value', '#value' => $newsletter);
  $form['#redirect'] = '';

  return confirm_form($form,
    t('Are you sure you want to add %user to the %newsletter subscription list?', array('%user' => $mail, '%newsletter' => $newsletter->name)),
    '',
    t('You always have the option of unsubscribing later.'),
    t('Subscribe'),
    t('Cancel')
  );
}

/**
 * Forms API callback; handles form submission for a user confirming subscribe
 * request.
 */
function simplenews_confirm_add_form_submit($form, &$form_state) {
  simplenews_subscribe_user($form_state['values']['mail'], $form_state['values']['newsletter']->tid, FALSE);
  drupal_set_message(t('%user was successfully added to the %newsletter subscription list.', array('%user' => $form_state['values']['mail'], '%newsletter' => $form_state['values']['newsletter']->name)));
}

/**
 * Generate the confirm remove form.
 */
function simplenews_confirm_removal_form(&$form_state, $mail, $newsletter) {
  $form = array();
  $form['mail'] = array('#type' => 'value', '#value' => $mail);
  $form['newsletter'] = array('#type' => 'value', '#value' => $newsletter);
  $form['#redirect'] = '';
  
  return confirm_form($form,
    t('Are you sure you want to remove %user from the %newsletter subscription list?', array('%user' => $mail, '%newsletter' => $newsletter->name)),
    '',
    t('This action will only remove you from the newsletter subscription list. If you are registered at our site, your account information will remain unchanged.'),
    t('Unsubscribe'),
    t('Cancel')
  );
}

/**
 * Forms API callback; handles form submission for a user confirming unsubscribe
 * request.
 */
function simplenews_confirm_removal_form_submit($form, &$form_state) {
  simplenews_unsubscribe_user($form_state['values']['mail'], $form_state['values']['newsletter']->tid, FALSE);
  drupal_set_message(t('%user was successfully removed from the %newsletter subscription list.', array('%user' => $form_state['values']['mail'], '%newsletter' => $form_state['values']['newsletter']->name)));
}

function simplenews_replace_vars($node, $teaser = TRUE) {
  global $base_url;
  $user_mail = db_result(db_query('SELECT mail FROM {users} WHERE uid = %d', $node->uid));
  $variables = array('%site' => variable_get('site_name', 'drupal'), '%uri' => $base_url, '%uri_brief' => drupal_substr($base_url, drupal_strlen('http://')), '%mymail' => $user_mail, '%date' => format_date(time()), '%login_url' => url('user/login', array('absolute' => true)));
  $node->body = strtr($node->body, $variables);
  if ($teaser) {
    $node->teaser = strtr($node->teaser, $variables);
  }
  return $node;
}

function simplenews_time() {
   list($usec, $sec) = explode(" ", microtime());
   return ((float)$usec + (float)$sec);
}

function simplenews_private_key() {
  $key = variable_get('simplenews_private_key', FALSE);
  if (!$key) {
    //  This will create a 32 character identifier (a 128 bit hex number) that is extremely difficult to predict
    $key = md5(uniqid(rand()));
    variable_set('simplenews_private_key', $key);
  }
  return $key;
}

/**
 * Implementation of hook_help
 */
function simplenews_help($path, $arg) {
  //TODO add help for newsletter/%/edit
  switch ($path) {
    case 'admin/help#simplenews':
      $help  = "<p>". t('Simplenews sends html or plain text newsletters to the subscription list. Subscription and unsubscription are managed through a block, a form or by the newsletter administrator.') ."<br />\n";
      $help .=        t('Individual newsletters are grouped by a newsletter taxonomy term. Newsletters can have a block with the ability of (un)subscription, listing of recent newsletters and an associated rss-feed.') ."<br />\n";
      $help .=        t('Sending of large mailings can be managed by cron.') ."</p>\n";
      $help .= "<p>". t('For more information please read the configuration and customization handbook <a href="http://drupal.org/node/197057">Simplenews page</a>.') ."</p>\n";
      return $help;
    case 'node/add/simplenews':
      $help = "<p>". t('Add this newsletter issue to a newsletter by selecting a newsletter from the select list.') ."</p>\n";
      $help .= "<p>". t('Send a newsletter or a test newsletter by selecting the appropriate radio button and submitting the node.') ."</p>\n";
      if (!module_exists('mimemail')) {
        $help .= "<p>". t('Install Mime Mail module to send HTML emails. Mime Mail is also used to send emails with attachments, both plain text and HTML emails.') ."</p>\n";
      }
      return $help;
  }
}

/**
 * Helper function to generate the hash key used for subscribe/unsubscribe link
 * in e-mail footer.
 */
function _simplenews_generate_hash($mail, $snid, $tid) {
  return drupal_substr(md5($mail . simplenews_private_key()), 0, 10) . $snid .'t'. $tid;
}

/**
 * Helper function to determine possible mail format options. The mimemodule
 * module must be installed to send HTML mails.
 */
function _simplenews_format_options() {
  $options = array('plain' => t('plain'));
//dpm('FOR TEST: Mime Mail is ON');
  if (module_exists('mimemail')) {
    $options['html'] = t('html');
  }
  return $options;
}

/**
 * Implementation of hook_theme
 */
function simplenews_theme() {
  return array(
    'simplenews_block' => array(
      'template' => 'simplenews-block',
      'arguments' => array('tid' => NULL),
    ),
    'simplenews_status' => array(
      'arguments' => array('status' => NULL, 'source' => NULL),
    ),
    'simplenews_newsletter' => array(
      'arguments' => array('node' => NULL, 'tid' => NULL),
    ),
    'simplenews_newsletter_footer' => array(
      'arguments' => array('node' => NULL, 'hash' => NULL),
    ),
    'simplenews_newsletter_confirmation' => array(
      'arguments' => array('email' => NULL, 'newsletter' => NULL, 'snid' => NULL, 'op' => NULL, 'hash' => NULL),
    ),
    'simplenews_subscription_list' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/**
 * Simplenews themed block
 *   Access restrictions have been applied.
 *   $block contains all available data. See: _simplenews_block()
 */
function theme_simplenews_block($block) {
  $output = ''; 
  if (variable_get('simplenews_block_m_status_'. $block['tid'], 1) && isset($block['message'])) {
    $output .= "<p>". $block['message'] ."</p>\n";
  }
  if (variable_get('simplenews_block_f_'. $block['tid'], 1)) {
    $output .= $block['form'];
  }
  elseif (isset($block['subscription-link'])) {
    $output .= "<p>". $block['subscription-link'] ."</p>\n";
  }
  if (variable_get('simplenews_block_l_'. $block['tid'], 1) && isset($block['newsletter-link'])) {
    $output .= '<div class="issues-link">'. $block['newsletter-link'] ."</div>\n";
  }
  if (variable_get('simplenews_block_i_status_'. $block['tid'], 0) && isset($block['itemlist'])) {
    $output .= '<div class="issues-list">'. $block['itemlist'] ."</div>\n";
  }
  if (variable_get('simplenews_block_r_'. $block['tid'], 1)) {
    $output .= $block['rssfeed'] ."\n";
  }
  return $output;
}

/**
 * Theme the newsletter message subject and body.
 */
function theme_simplenews_newsletter($node, $tid) {
  $term = taxonomy_get_term($tid);
  $name = $term->name ? $term->name : t('Unassigned newsletter');
  $node->subject = '['. $name .'] '. $node->title;
  $node->body = '<h2>'. $node->title ."</h2>\n". $node->body;
  return $node;
}

/**
 * Theme the footer.
 */
function theme_simplenews_newsletter_footer($node, $hash) {
//dpm($node);
  //TODO !! object or array
  if ($node->simplenews->s_format == 'html') {
    $node->body .= '<p>-- <br />'. l(t('Click here to unsubscribe from this newsletter'), 'newsletter/confirm/remove/'. $hash, array('html' => true)) .'</p>';
  }
  else {
    $node->body .= "\n\n-- \n". t('Unsubscribe from this newsletter: @url', array('@url' => url('newsletter/confirm/remove/'. $hash, array('absolute' => true))));
  }
  return $node;
}

/**
 * Construct the themable newsletter confirmation email.
 */
function theme_simplenews_newsletter_confirmation($email, $newsletter, $snid, $op, $hash) {
  $mail = new stdClass();
  simplenews_set_from($mail, $newsletter->tid);

  $mail->simplenews['s_format'] = 'plain';
  $mail->simplenews['priority'] = 'none';

  $mail->simplenews['to'] = $email;
  $mail->simplenews['subject'] = t('Confirmation for @newsletter from @site', array('@newsletter' => $newsletter->name, '@site' => $mail->from_name));
  $mail->body = t('This is a subscription status confirmation notice for the @newsletter.', array('@newsletter' => $newsletter->name));
  $mail->body .= "\n\n";

  $user_is_subscribed = simplenews_user_is_subscribed($email, $newsletter->tid);
  switch ($op) {
    case 'subscribe':
      if ($user_is_subscribed) {
        $mail->body .= t('We have received a request for subscription of your e-mail address, @mail, to the @newsletter from @site (@url). However, you are already subscribed to this newsletter. If you want to unsubscribe, you can visit our website by using the link at the bottom of this e-mail.', array('@mail' => $email, '@newsletter' => $newsletter->name, '@site' => $mail->from_name, '@url' => url('', array('absolute' => true))));
      }
      else {
        $mail->body .= t('We have received a request for subscription of your e-mail address, @mail, to the @newsletter from @site (@url). To confirm that you want to be added to this mailing list, simply visit the confirmation link at the bottom of this e-mail.', array('@mail' => $email, '@newsletter' => $newsletter->name, '@site' => $mail->from_name, '@url' => url('', array('absolute' => true))));
        $mail->body .= "\n\n". t('If you do not wish to be subscribed to this list, please disregard this message.');
        $footer = "\n\n-- \n". t('Subscribe link: @url', array('@url' => url('newsletter/confirm/add/'. $hash, array('absolute' => true))));
      }
      break;
    case 'unsubscribe':
      if ($user_is_subscribed) {
        $mail->body .= t('We have received a request for the removal of your e-mail address, @mail, from the @newsletter from @site (@url). If you want to unsubscribe, simply visit the confirmation link at the bottom of this e-mail.', array('@mail' => $email, '@newsletter' => $newsletter->name, '@site' => $mail->from_name, '@url' => url('', array('absolute' => true))));
        $mail->body .= "\n\n". t('If you did not make this request, please disregard this message.');
        $footer = "\n\n-- \n". t('Unsubscribe link: @url', array('@url' => url('newsletter/confirm/remove/'. $hash, array('absolute' => true))));
      }
      else {
        $mail->body .= t('We have received a request for the removal of your e-mail address, @mail, from the @newsletter from @site (@url). However, you were not subscribed to this newsletter. If you want to subscribe, you can visit our website by using the link at the bottom of this e-mail.', array('@mail' => $email, '@newsletter' => $newsletter->name, '@site' => $mail->from_name, '@url' => url('', array('absolute' => true))));
        $mail->body .= "\n\n". t('If you do not wish to be subscribed to this list, please disregard this message.');
      }
      break;
  }

  if (!isset($footer)) {
    $footer = "\n\n-- \n". t('Visit our site: @url', array('@url' => url('', array('absolute' => true))));
  }

  $mail->body .= $footer;
  return $mail;
}
