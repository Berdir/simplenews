<?php
// $Id$

/**
* Display help and module information
*/
function simplenews_help($section='') {
  $output = '';
  switch ($section) {
    case 'admin/modules#description':
      $output = t('Send newsletters to subscribed e-mail addresses.');
      break;
    case 'node/add#simplenews':
      $output =  t('Send a newsletter to subscribed e-mail addresses.');
      break;
  }
  return $output;
}

/**
 * Implementation of hook_node_info().
 */
function simplenews_node_info() {
  return array('simplenews' => array('name' => t('newsletter'), 'base' => 'simplenews'));
}

/**
* Valid permissions for this module
*/ 
function simplenews_perm() {
  return array('view links in block', 'create newsletter', 'edit own newsletter', 'administer newsletters', 'send newsletter', 'subscribe to newsletters');
}

/**
 * Implementation of hook_access().
 */
function simplenews_access($op, $node) {
  global $user;
  if ($op == 'create') {
    if (user_access('create newsletter') || user_access('administer newsletters')) {
      return TRUE;
    }
  }
  if ($op == 'update' || $op == 'delete') {
    if (user_access('administer newsletters')) {
      return TRUE;
    }
    elseif (user_access('edit own newsletter') && ($user->uid == $node->uid)) {
      return TRUE;
    }
  }
}

/**
 * Implementation of hook_menu().
 */
function simplenews_menu($may_cache) {
  theme_add_style(drupal_get_path('module', 'simplenews').'/simplenews.css');
  
  //process subscriptions submitted through blocks before page content is processed
  $result = db_query("SELECT DISTINCT(delta) FROM {blocks} WHERE module = '%s' AND status = %d", 'simplenews', 1);
  while ($delta = db_fetch_object($result)) {
    list($type, $tid) = explode('-', $delta->delta);
    if ($_POST['sn_'.$tid] && user_access('subscribe to newsletters')) {
      $edit = $_POST['edit'];
      simplenews_process_subscription($tid, $edit['sn_email_'.$tid], $edit['sn_subscribe_'.$tid]);
    }
  }
  
  $items = array();
  if ($may_cache) {
    $items[] = array('path' => 'node/add/simplenews', 'title' => t('newsletter'),
                     'access' => user_access('create newsletter'));
    $items[] = array('path' => 'admin/newsletter', 'title' => t('newsletters'),
                     'access' => user_access('administer newsletters'),
                     'callback' => 'simplenews_admin');
                     
    $items[] = array('path' => 'admin/newsletter/sent', 'title' => t('sent items'),
                     'access' => user_access('administer newsletters'),
                     'type' => MENU_DEFAULT_LOCAL_TASK, 'weight' => -10);
    $items[] = array('path' => 'admin/newsletter/outbox', 'title' => t('drafts'),
                     'access' => user_access('administer newsletters'),
                     'type' => MENU_LOCAL_TASK, 'weight' => -9);
                     
    $items[] = array('path' => 'admin/newsletter/types', 'title' => t('newsletters'),
                     'access' => user_access('administer newsletters'),
                     'type' => MENU_LOCAL_TASK, 'weight' => -8);
    $items[] = array('path' => 'admin/newsletter/types/list', 'title' => t('list newsletters'),
                     'access' => user_access('administer newsletters'),
                     'type' => MENU_DEFAULT_LOCAL_TASK, 'weight' => -10);
    $items[] = array('path' => 'admin/newsletter/types/add', 'title' => t('add newsletter'),
                     'access' => user_access('administer newsletters'),
                     'type' => MENU_LOCAL_TASK, 'weight' => -9);
                     
    $items[] = array('path' => 'admin/newsletter/users', 'title' => t('subscriptions'),
                     'access' => user_access('administer newsletters'),
                     'type' => MENU_LOCAL_TASK, 'weight' => -7);
    $items[] = array('path' => 'admin/newsletter/users/list', 'title' => t('list subscriptions'),
                     'access' => user_access('administer newsletters'),
                     'type' => MENU_DEFAULT_LOCAL_TASK, 'weight' => -10);
    $items[] = array('path' => 'admin/newsletter/users/add', 'title' => t('import subscriptions'),
                     'access' => user_access('administer newsletters'),
                     'type' => MENU_LOCAL_TASK, 'weight' => -9);
    $items[] = array('path' => 'admin/newsletter/users/export', 'title' => t('export subscriptions'),
                     'access' => user_access('administer newsletters'),
                     'type' => MENU_LOCAL_TASK, 'weight' => -8);
                     
    $items[] = array('path' => 'admin/newsletter/settings', 'title' => t('settings'),
                     'access' => user_access('administer newsletters'),
                     'type' => MENU_LOCAL_TASK, 'weight' => -6);
    $items[] = array('path' => 'admin/newsletter/settings/general', 'title' => t('general'),
                     'access' => user_access('administer newsletters'),
                     'type' => MENU_DEFAULT_LOCAL_TASK, 'weight' => -10);
                     
    $items[] = array('path' => 'newsletter/confirm', 'title' => t('confirm newsletter subscriptions'),
                     'access' => user_access('access content'),
                     'callback' => 'simplenews_confirm_subscription',
                     'type' => MENU_CALLBACK);
    $items[] = array('path' => 'newsletter/subscriptions', 'title' => t('manage newsletter subscriptions'),
                     'access' => user_access('subscribe to newsletters'),
                     'callback' => 'simplenews_subscription_manager_page',
                     'type' => MENU_CALLBACK);
  }
  else {
    $tree = taxonomy_get_tree(simplenews_get_vid());
    if ($tree) {
      $i = -9;
      foreach ($tree as $newsletter) {
        $items[] = array('path' => 'admin/newsletter/settings/'.$newsletter->tid, 'title' => $newsletter->name,
                         'access' => user_access('administer newsletters'),
                         'type' => MENU_LOCAL_TASK, 'weight' => $i);
        $i++;
      }
    }
  }
  return $items;
}

/**
 * Implementation of hook_form().
 */
function simplenews_form(&$node) {
  simplenews_create_taxonomy();
  global $user;
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => $node->title,
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => TRUE,
  );
  $form['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#default_value' => $node->body,
    '#rows' => 20,
    '#required' => TRUE,
    '#description' => t('This will be the body of your newsletter. Available variables are:') . ' %site ' . t('(the name of your website),') . ' %uri ' . t('(a link to your homepage),') . ' %uri_brief ' . t('(homepage link without the http://),') . ' %mymail ' . t('(your e-mail address),') . ' %date ' . t('(today\'s date),') . ' %login_uri ' . t('(link to login page).'),
  );
  
  $form['format'] = filter_form($node->format);
  
  if (!$sel1 = $node->s_format) {
    $sel1 = variable_get('simplenews_format', 'plain');
  }
  if (!$sel2 = $node->priority) {
    $sel2 = variable_get('simplenews_priority', 0);
  }
  if (!$sel3 = $node->receipt) {
    $sel3 = variable_get('simplenews_receipt', 0);
  }

  $form['sending_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Newsletter sending options'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['sending_options']['s_format'] = array(
    '#type' => 'select',
    '#title' => t('Format'),
    '#default_value' => $sel1,
    '#options' => array('plain' => t('plain'), 'html' => t('html')),
  );
  $form['sending_options']['priority'] = array(
    '#type' => 'select',
    '#title' => t('Priority'),
    '#default_value' => $sel2,
    '#options' => array(0 => t('none'), 1 => t('highest'), 2 => t('high'), 3 => t('normal'), 4 => t('low'), 5 => t('lowest')),
  );
  $form['sending_options']['receipt'] = array(
    '#type' => 'checkbox',
    '#title' => t('Request receipt'),
    '#return_value' => 1,
    '#default_value' => $sel3,
  );
  if ($node->s_status == 0) {
    if (user_access('send newsletter')) {
      $options[0] = t("Don't send now");
      $options[2] = t('Send one test newsletter to the test address');
      $options[1] = t('Send newsletter');
      $form['sending_options']['send'] = array(
        '#type' => 'radios',
        '#title' => t('Sending'),
        '#default_value' => $node->send ? $node->send : variable_get('simplenews_send', 0),
        '#options' => $options,
      );
    }
    else {
      $options[0] = t("Don't send now");
      $options[2] = t('Send one test newsletter to the test address');
      $form['sending_options']['send'] = array(
        '#type' => 'radios',
        '#title' => t('Sending'),
        '#default_value' => $node->send ? $node->send : 0,
        '#options' => $options,
        '#description' => t('You have no privileges to send this newsletter'),
      );
    }
    if (variable_get('simplenews_test_address_override', 0)) {
      $form['sending_options']['test_address'] = array(
        '#type' => 'textfield',
        '#title' => t('Test e-mail addresses'),
        '#default_value' => $node->test_address ? $node->test_address : variable_get('simplenews_test_address', ''),
        '#size' => 60,
        '#maxlength' => 128,
      );
      $form['sending_options']['#description'] = t('Supply a comma-separated list of e-mail addresses to be used as test addresses.');
    }
  }
  else {
    $atts = array('disabled'=>'disabled');
    $form['sending_options']['none'] = array(
      '#type' => 'checkbox',
      '#title' => t('This newsletter has been sent'),
      '#return_value' => 0,
      '#attributes' => array('checked' => 'checked', 'disabled' => 'disabled'),
    );
  }
  $form['s_status'] = array(
    '#type' => 'hidden',
    '#value' => $node->s_status ? $node->s_status : 0,
  );
  return $form;
}

/**
 * Implementation of hook_validate().
 */
function simplenews_validate($node) {
  global $valid_mails;
  if ($node->taxonomy && $node->send == 1) {
    if (!simplenews_validate_taxonomy($node->taxonomy)) {
      form_set_error('', t('You should select a newsletter if you want to send this newsletter.'));
    }
  }
  if ($node->send == 2) {
    if (variable_get('simplenews_test_address_override', 0)) {
      $mails = explode(',',$node->test_address);
    }
    else {
      $mails = explode(',',variable_get('simplenews_test_address', ''));
    }
    foreach ($mails as $mail) {
      $mail = trim($mail);
      if ($mail == '') {
        form_set_error('', t('Cannot send test newsletter: no valid test e-mail address specified.'));
      }
      elseif (!valid_email_address($mail)) {
        form_set_error('', t('Cannot send test newsletter to %mail: e-mail address invalid.', array('%mail'=>theme('placeholder',$mail))));
      }
      else {
        $valid_mails[] = $mail;
      }
    }
  }
}

/**
 * Implementation of hook_submit().
 */
function simplenews_submit(&$node) {
  global $valid_mails;
  if ($node->send == 2 && $valid_mails) {
    $node->test_address = $valid_mails;
  }
}

function simplenews_validate_taxonomy($taxonomy) {
  $vid = simplenews_get_vid();
  $result = db_query('SELECT tid FROM {term_data} WHERE vid = %d', $vid);
  while ($tid = db_fetch_object($result)) {
    $tids[] = $tid->tid;
  }
  $taxes = array();
  foreach ($taxonomy as $tax) {
    $taxes[] = $tax;
  }
  return array_intersect($tids, $taxes);
}

/**
 * Implementation of hook_cron().
 */
function simplenews_cron() {
  _sn_send(FALSE);
}

/**
 * Implementation of hook_insert().
 * Saves extra node content to module database table
 * and sends the newsletter, upon node creation
 */
function simplenews_insert($node) {
  $term = simplenews_validate_taxonomy($node->taxonomy);
  $tid = is_array($term) ? array_values($term) : FALSE;
  $node->sn_tid = $tid ? $tid[0] : 0;
  //tid is also saved in this table since it is needed by _sn_send(), and the term_node table is
  //only updated after the execution of simplenews_insert(). It cannot be passed by a variable
  //since simplenews_cron() also calls _sn_send().
  if ($node->send == 1 && user_access('send newsletter')) {
    db_query("INSERT INTO {sn_newsletters} (nid, tid, s_status, s_format, priority, receipt)
    VALUES (%d, %d, %d, '%s', %d, %d)", $node->nid, $node->sn_tid, 1, $node->s_format, $node->priority, $node->receipt);
    _sn_send(TRUE);
    drupal_set_message(t('Newsletter %newsletter is being sent', array('%newsletter' => theme('placeholder', $node->title))));
  }
  else {
    db_query("INSERT INTO {sn_newsletters} (nid, tid, s_status, s_format, priority, receipt)
    VALUES (%d, %d, %d, '%s', %d, %d)", $node->nid, $node->sn_tid, 0, $node->s_format, $node->priority, $node->receipt);
  }
  if ($node->send == 2) {
    simplenews_send_test($node);
  }
}

/**
 * Implementation of hook_update().
 */
function simplenews_update($node) {
  $term = simplenews_validate_taxonomy($node->taxonomy);
  $tid = is_array($term) ? array_values($term) : FALSE;
  $node->sn_tid = $tid ? $tid[0] : 0;
  if ($node->send == 1 && user_access('send newsletter')) {
    db_query("UPDATE {sn_newsletters} SET tid = %d, s_status = %d, s_format = '%s', priority = %d, receipt = %d
    WHERE nid = %d", $node->sn_tid, 1, $node->s_format, $node->priority, $node->receipt, $node->nid);
    _sn_send(TRUE);
    drupal_set_message(t('Newsletter %newsletter is being sent', array('%newsletter' => theme('placeholder', $node->title))));
  }
  else {
    db_query("UPDATE {sn_newsletters} SET tid = %d, s_format = '%s', priority = %d, receipt = %d
    WHERE nid = %d", $node->sn_tid, $node->s_format, $node->priority, $node->receipt, $node->nid);
  }
  if ($node->send == 2) {
    simplenews_send_test($node);
  }
}

/**
 * Implementation of hook_delete().
 */
function simplenews_delete($node) {
  global $user;
  $result = db_query('DELETE FROM {sn_newsletters} WHERE nid = %d', $node->nid);
  if ($result) {
    drupal_set_message(t('Newsletter %title was successfully deleted.', array('%title'=>theme('placeholder', $node->title))));
  }
}

/**
 * Implementation of hook_load().
 */
function simplenews_load($node) {
  $additions = db_fetch_object(db_query('SELECT * FROM {sn_newsletters} WHERE nid = %d', $node->nid));
  return $additions;
}

/**
 * Implementation of hook_taxonomy().
 * Deletes subscriptions to term when term is deleted, and cleans the blocks table
 */
function simplenews_taxonomy($op, $type, $object = NULL) {
  if ($type == 'term' && $op == 'delete' && $object->vid == simplenews_get_vid()) {
    db_query('DELETE FROM {sn_snid_tid} WHERE tid = %d', $object->tid);
    db_query("DELETE FROM {blocks} WHERE module = '%s' AND delta = '%s'", 'simplenews', 'newsletter-'.$object->tid);
    drupal_set_message(t('Deleted all subscriptions to newsletter %newsletter.', array('%newsletter'=>theme('placeholder', $object->name))));
  }
  elseif ($op == 'delete' && $type == 'vocabulary' && $object->vid == simplenews_get_vid())  {
    variable_del('simplenews_vid');
  }
} 


/**
 * Implementation of hook_view().
 */
function simplenews_view(&$node, $teaser = FALSE) {
  $node = simplenews_replace_vars($node, TRUE);
  $node = node_prepare($node, $teaser);
}


/**
* Implementation of hook_user()
* Checks whether an email address is subscribed to the newsletter
* when a new user signs up. If so, changes uid from 0 to the new uid
* in sn_subscriptions so that the user's subscription status is known
* when he logs in.
*/
function simplenews_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'insert':
      if ($edit['mail']) {
        $query = "SELECT snid FROM {sn_subscriptions} WHERE mail = '%s'";
        if ($result = db_fetch_object(db_query($query, $edit['mail']))) {
          db_query("UPDATE {sn_subscriptions} SET uid = %d WHERE snid = %d", $edit['uid'], $result->snid);
        }
      }
    break;
    case 'update':
      if ($category == 'account' && $edit['mail']) {
        $query = "SELECT snid FROM {sn_subscriptions} WHERE uid = %d";
        if ($result = db_fetch_object(db_query($query, $account->uid))) {
          db_query("DELETE FROM {sn_subscriptions} WHERE mail = '%s' AND uid = %d", $edit['mail'], 0);
          db_query("UPDATE {sn_subscriptions} SET mail = '%s' WHERE snid = %d", $edit['mail'], $result->snid);
        }
        else {
          $query = "SELECT snid FROM {sn_subscriptions} WHERE mail = '%s'";
          if ($result = db_fetch_object(db_query($query, $edit['mail']))) {
            db_query("UPDATE {sn_subscriptions} SET uid = %d WHERE snid = %d", $account->uid, $result->snid);
          }
        }
      }
      elseif ($category == 'newsletter' && user_access('subscribe to newsletters')) {
        _simplenews_subscription_manager(FALSE, FALSE, TRUE);
      }
    break;
    case 'delete':
      $query = "SELECT snid FROM {sn_subscriptions} WHERE uid = %d";
      if ($result = db_fetch_object(db_query($query, $account->uid))) {
        db_query("UPDATE {sn_subscriptions} SET uid = %d WHERE snid = %d", 0, $result->snid);
      }
    break;
    case 'form':
      if ($category == 'newsletter' && user_access('subscribe to newsletters')) {
        $form['newsletters'] = _simplenews_subscription_manager($account);
        $form['newsletters']['#title'] =  t('Current newsletter subscriptions');
        $form['newsletters']['sn_email'] = array(
          '#type' => 'hidden',
          '#value' => $account->mail,
        );
        $form['newsletters']['sn_update'] = array(
          '#type' => 'hidden',
          '#value' => 'Update',
        );
        return $form;
      }
    break;
    case 'categories':
      if (user_access('subscribe to newsletters')) {
        $output[] = array('name' => 'newsletter', 'title' => t('my newsletters'), 'weight' => 10);
      }
      return $output;
    break;
    case 'view':
      global $user;
      if ($user->uid == $account->uid || user_access('administer users')) {
        $tree = taxonomy_get_tree(simplenews_get_vid());
        foreach ($tree as $newsletter) {
          if (db_num_rows(db_query('SELECT s.uid FROM {sn_subscriptions} s INNER JOIN {sn_snid_tid} t ON s.snid = t.snid WHERE s.uid = %d AND t.tid = %d', $account->uid, $newsletter->tid))) {
            $subscriptions[] = l($newsletter->name, 'taxonomy/term/'. $newsletter->tid);
          }
        }
        if ($subscriptions) {
          $subscriptions = implode(', ', $subscriptions);
        }
        else {
          $subscriptions = t('Currently no subscriptions');
        }
        $items[] = array(
          'class' => 'item',
          'title' => t('Current subcriptions'),
          'value' => $subscriptions,
        );
        $items[] = array(
          'class' => 'item',
          'title' => t('Manage subscriptions'),
          'value' => l(t('my newsletters'), 'user/'. $account->uid .'/edit/newsletter'),
        );
        return array(t('Newsletters') => $items);
      }
    break;
  }
}

/**
* Implementation of hook_block()
*/
function simplenews_block($op='list', $delta=0) {
  if ($op == 'list') {
    $tree = taxonomy_get_tree(simplenews_get_vid());
    if ($tree) {
      foreach ($tree as $newsletter) {
        $block['newsletter-'.$newsletter->tid]['info'] = t('Newsletter: %title', array('%title' => theme('placeholder', $newsletter->name)));
      }
    }
    return $block;
  }
  elseif ($op == 'view') {
    list($type, $tid) = explode('-', $delta);
    if ($type == 'newsletter') {
      if ($newsletter = taxonomy_get_term($tid)) {
        if (variable_get('simplenews_block_m_status_'.$tid, 1)) {
          $message = '<div class="sn-message">';
          $message .= variable_get('simplenews_block_m_'.$tid, t('Stay informed on our latest news!'));
          $message .= '</div>';
        }
        else {
          $message = NULL;
        }
        $block['subject'] = check_plain($newsletter->name);
        if (variable_get('simplenews_block_f_'.$tid, 1) && user_access('subscribe to newsletters')) {
          $block['content'] = _sn_block($message, $tid);
        }
        else {
          if ($message) {
            $block['content'] = $message;
          }
          if (user_access('subscribe to newsletters')) {
            $block['content'] .= l(t('Manage my subscriptions'), 'newsletter/subscriptions/');
          }
        }
      }
      if (user_access('view links in block') || user_access('administer newsletters')) {
        if (variable_get('simplenews_block_l_'.$tid, 1)) {
          $block['content'] .= theme('sn_term_link', l(t('Previous issues'), 'taxonomy/term/'.$tid));
        }
        elseif (variable_get('simplenews_block_i_status_'.$tid, 0)) {
          $block['content'] .= theme('sn_term_link', t('Previous issues'));
        }
        if (variable_get('simplenews_block_i_status_'.$tid, 0)) {
          $block['content'] .= _simplenews_recent_newsletters($tid, variable_get('simplenews_block_i_'.$tid, 5));
        }
        if (variable_get('simplenews_block_r_'.$tid, 1)) {
          $block['content'] .= theme('sn_feed_icon', url('taxonomy/term/'.$tid.'/0/feed'));
        }
      }
    }
  return $block;
  }
}

function simplenews_handle_messages($one, $two_or_more, $type = 'status') {
  if (isset($_SESSION['messages'][$type])) $msg = $_SESSION['messages'][$type];
  else $msg = array();
  $key = array_search($one, $msg);
  if ($key || $key === 0) {
    $_SESSION['messages'][$type][$key] = $two_or_more;
  }
  elseif (!in_array($two_or_more, $msg)) {
    drupal_set_message($one, $type);
  }
}

function simplenews_process_subscription($tid, $mail, $sub) {
  global $user;
  //valid_email_address() allows empty address, so check this first
  if ($mail == '') {
    simplenews_handle_messages(t('You have to supply an e-mail address'), t('You have to supply an e-mail address'), 'error');
  }
  elseif (!valid_email_address($mail)) {
    simplenews_handle_messages(t('The e-mail address you supplied is not valid'), t('The e-mail address you supplied is not valid'), 'error');
  }
  else {
  global $base_url;
  $snid_result = db_query("SELECT snid FROM {sn_subscriptions} WHERE mail = '%s'", $mail);
  $snid_obj = db_fetch_object($snid_result);
  $name_default = variable_get('site_name', 'drupal');
  $newsletter = taxonomy_get_term($tid);
    if ($sub == 'Subscribe') {
      if (!db_num_rows($snid_result)) {
        $query = "SELECT uid FROM {users} WHERE mail = '%s'";
        if ($result = db_fetch_object(db_query($query, $mail))) {
          $uid = $result->uid;
        }
        else {
          $uid = 0;
        }
        db_query("INSERT INTO {sn_subscriptions} (mail, uid, a_status) VALUES ('%s', %d, %d)", $mail, $uid, 1);
        $snid_result = db_query("SELECT snid FROM {sn_subscriptions} WHERE mail = '%s'", $mail);
        $snid_obj = db_fetch_object($snid_result);
        $watchdog = t('User %email added to the database.', array('%email'=>theme('placeholder',$mail)));
        watchdog('newsletter', $watchdog);
      }
      if ($user->uid == 0) {
        //send confirmation email: "Confirm subscription"
        $body = t('We have received a request for subscription of your e-mail address, %mail, to the "%newsletter" newsletter from %site (%uri). To confirm that you want to be added to this mailing list, simply visit the confirmation link at the bottom of this e-mail.', array('%mail'=>$mail, '%newsletter'=>$newsletter->name, '%site'=>variable_get('simplenews_from_name', $name_default), '%uri'=>$base_url));
        $body .= "\n\n".t('If you do not wish to be subscribed to this list, please disregard this message.');
        sn_mail_confirm($mail, $body, $newsletter->name, $snid_obj->snid, $tid, 'subscribe');
        simplenews_handle_messages(t('You will receive a confirmation e-mail shortly.'), t('You will receive confirmation e-mails shortly.'));
      }
      else {
        $snid_tid = db_query("SELECT snid FROM {sn_snid_tid} WHERE snid = %d AND tid = %d", $snid_obj->snid, $tid);
        if (!db_num_rows($snid_tid)) {
          db_query("INSERT INTO {sn_snid_tid} (snid, tid) VALUES (%d, %d)", $snid_obj->snid, $tid);
        }
        simplenews_handle_messages(t('The newsletter subscriptions have been updated.'), t('The newsletter subscriptions have been updated.'));
      }
    }
    elseif ($sub == 'Unsubscribe') {
      if ($user->uid == 0) {
        $snid_tid = db_query("SELECT snid FROM {sn_snid_tid} WHERE snid = %d AND tid = %d", $snid_obj->snid, $tid);
        if (db_num_rows($snid_result) && db_num_rows($snid_tid)) {
          //send confirmation email: "Confirm deletion"
          $body = t('We have received a request for the removal of your e-mail address, %mail, from the "%newsletter" newsletter from %site (%uri). If you want to unsubscribe, simply visit the confirmation link at the bottom of this e-mail.', array('%mail'=>$mail, '%newsletter'=>$newsletter->name, '%site'=>variable_get('simplenews_from_name', $name_default), '%uri'=>$base_url));
          $body .= "\n\n".t('If you do not wish to be removed from this list, please disregard this message.');
          sn_mail_confirm($mail, $body, $newsletter->name, $snid_obj->snid, $tid, 'unsubscribe');
        }
        else {
          //send confirmation email: "You were not subscribed. Visit site to subscribe."
          $body = t('We have received a request for the removal of your e-mail address, %mail, from the "%newsletter" newsletter from %site (%uri). However, you were not subscribed to this newsletter. If you want to subscribe, you can visit our website by using the link at the bottom of this e-mail.', array('%mail'=>$mail, '%newsletter'=>$newsletter->name, '%site'=>variable_get('simplenews_from_name', $name_default), '%uri'=>$base_url));
          $body .= "\n\n".t('If you do not wish to be subscribed to this list, please disregard this message.');
          sn_mail_confirm($mail, $body, $newsletter->name);
        }
        simplenews_handle_messages(t('You will receive a confirmation e-mail shortly.'), t('You will receive confirmation e-mails shortly.'));
      }
      else {
        if (db_num_rows($snid_result)) {
          $query = "DELETE FROM {sn_snid_tid} WHERE snid = %d AND tid = %d";
          if (db_affected_rows(db_query($query, $snid_obj->snid, $tid))) {
            simplenews_handle_messages(t('Your newsletter subscriptions have been updated.'), t('Your newsletter subscriptions have been updated.'));
          }
          //Perform db cleanup tasks
          if (!db_num_rows(db_query('SELECT tid FROM {sn_snid_tid} WHERE snid = %d', $snid_obj->snid))) {
            db_query('DELETE FROM {sn_subscriptions} WHERE snid = %d', $snid_obj->snid);
            $watchdog = t('User %email deleted from the database.', array('%email'=>theme('placeholder', $mail)));
            watchdog('newsletter', $watchdog);
          }
        }
      }
    }
  }
}

function simplenews_subscription_manager() {
  print _simplenews_subscription_manager();
}

function simplenews_subscription_manager_page() {
  if (user_access('subscribe to newsletters')) {
    global $user;
    if ($user->uid == 0) {
      return _simplenews_subscription_manager();
    }
    else {
      drupal_goto('user/'.$user->uid.'/edit/newsletter');
    }
  }
  else {
    drupal_goto();
  }
}

function _simplenews_subscription_manager($account = FALSE, $snid = FALSE, $pre_process_only = FALSE) {
  if (user_access('subscribe to newsletters')) {
    if ($account) $user = $account;
    else global $user;
    $tree = taxonomy_get_tree(simplenews_get_vid());
    $edit = $_POST['edit'];
    if ($_POST['sn_subscribe'] || $_POST['sn_unsubscribe']) {
      if ($tree) {
        if ($_POST['sn_subscribe'] == t('Subscribe')) $sub = 'Subscribe';
        if ($_POST['sn_unsubscribe'] == t('Unsubscribe')) $sub = 'Unsubscribe';
        $selected = FALSE;
        foreach ($tree as $newsletter) {
          if ($edit['sn_'.$newsletter->tid] == 1) {
            simplenews_process_subscription($newsletter->tid, $edit['sn_email'], $sub);
            $selected = TRUE;
          }
        }
      }
      if (!$selected) drupal_set_message(t('You should select at least one newsletter.'), 'error');
    }
    elseif ($_POST['sn_update'] || $edit['sn_update']) {
      if ($tree) {
        foreach ($tree as $newsletter) {
          if ($edit['sn_'.$newsletter->tid] == 1) {
            simplenews_process_subscription($newsletter->tid, $edit['sn_email'], 'Subscribe');
          }
          else {
            simplenews_process_subscription($newsletter->tid, $edit['sn_email'], 'Unsubscribe');
          }
        }
      }
    }
    if ($pre_process_only) return;
    if ($snid && $_POST['sn_update']) drupal_goto('admin/newsletter/users');
    $output = '<div class="sn-manage-form">';
    if ($tree) {
      foreach ($tree as $newsletter) {
        if ($user->uid == 0) {
          $checked = 0;
        }
        else {
          if ($snid) {
            $result = db_query("SELECT s.snid FROM {sn_subscriptions} s INNER JOIN {sn_snid_tid} t ON s.snid = t.snid WHERE t.tid = %d AND s.snid = %d", $newsletter->tid, $snid);
          }
          else {
            $result = db_query("SELECT s.snid FROM {sn_subscriptions} s INNER JOIN {sn_snid_tid} t ON s.snid = t.snid WHERE t.tid = %d AND s.uid = %d", $newsletter->tid, $user->uid);
          }
          if (db_num_rows($result)) {
            $checked = 1;
          }
          else $checked = 0;
        }
        $form['newsletters']['#type'] = 'fieldset';
        $form['newsletters']['#weight'] = 1;
        $form['newsletters']['sn_'.$newsletter->tid] = array(
          '#type' => 'checkbox',
          '#title' => $newsletter->name,
          '#return_value' => 1,
          '#attributes' => $checked ? array('checked' => 'checked') : NULL,
        );
      }
      if ($account) return $form['newsletters'];
      if ($user->uid == 0) {
        $form['sn_email'] = array(
          '#type' => 'textfield',
          '#title' => t('E-mail'),
          '#size' => 20,
          '#maxlength' => 128,
          '#weight' => -20,
        );
        $form['newsletters']['#title'] = t('Available newsletters');
        $form['newsletters']['#description'] = t('Select the newsletter(s) to which you want to subscribe or unsubscribe.');
        $form['sn_subscribe'] = array(
          '#name' => 'sn_subscribe',
          '#type' => 'submit',
          '#value' => t('Subscribe'),
          '#weight' => 19,
        );
        $form['sn_unsubscribe'] = array(
          '#name' => 'sn_unsubscribe',
          '#type' => 'submit',
          '#value' => t('Unsubscribe'),
          '#weight' => 20,
        );
      }
      else {
        if ($snid) {
          $result = db_query("SELECT mail FROM {sn_subscriptions} WHERE snid = %d", $snid);
          $sn_email = db_result($result);
          $message = t('Subscriptions for %mail', array('%mail'=>theme('placeholder', $sn_email)));
          $explanation = '';
        }
        else {
          $sn_email = $user->mail;
          $message = t('Available newsletters');
          $explanation = t('Select the newsletter(s) to which you want to be subscribed.');
        }
        $form['sn_email'] = array(
          '#type' => 'hidden',
          '#value' => $sn_email,
        );
        $form['newsletters']['#title'] = $message;
        $form['newsletters']['#description'] = $explanation;
        $form['sn_update'] = array(
          '#type' => 'submit',
          '#name' => 'sn_update',
          '#value' => t('Update'),
          '#weight' => 20,
        );
      }
    }
    $output .= drupal_get_form('_simplenews_subscription_manager', $form);
    $output .= '</div>';
    return $output;
  }
  else {
    return '';
  }
}

// Todo: use node_title_list() instead? Disadvantage: not separately themable?
function _simplenews_recent_newsletters($tid, $count = 5, $title = NULL) {
  $result = db_query_range(db_rewrite_sql('SELECT n.nid, n.title, n.created FROM {node} n INNER JOIN {term_node} t ON n.nid = t.nid INNER JOIN {sn_newsletters} sn ON n.nid = sn.nid WHERE (t.tid = %d AND n.status = 1 AND sn.s_status > 0) ORDER BY n.created DESC'), $tid, 0, $count);
  while ($item = db_fetch_object($result)) {
    $titles[] = l($item->title, 'node/'.$item->nid);
  }
  if ($titles) {
    return theme('sn_item_list', $titles, $title);
  }
}

function simplenews_recent_newsletters($tid, $count = 5, $title = NULL) {
  print _simplenews_recent_newsletters($tid, $count, $title);
}

/**
* Prepare the block subscription form
*/
function theme_sn_form($tid, $sub=1, $unsub=1, $email='') {
  $sn_form = '<div class="sn-block">';
  if ($sub == 1 && $unsub == 1) {
    $form['sn_email_'.$tid] = array(
      '#type' => 'textfield',
      '#title' => t('E-mail'),
      '#size' => 20,
      '#maxlength' => 128,
    );
    $options = array();
    $options['Subscribe'] = t('Subscribe');
    $options['Unsubscribe'] = t('Unsubscribe');
    $form['sn_subscribe_'.$tid] = array(
      '#type' => 'radios',
      '#default_value' => 'Subscribe',
      '#options' => $options,
    );
    $submit = t('Submit');
  }  
  else {
    $sn_form .= '<div class="form-item"><label for="edit-sn_email">'.t('E-mail').':</label><br /><small>';
    $sn_form .= truncate_utf8($email, 29, FALSE, TRUE);
    $sn_form .= '</small></div>';
    $form['sn_email_'.$tid] = array(
      '#type' => 'hidden',
      '#value' => $email,
    );
    if ($sub == 1) {
      $form['sn_subscribe_'.$tid] = array(
        '#type' => 'hidden',
        '#value' => 'Subscribe',
      );
      $submit = t('Subscribe');
    }
    elseif ($unsub == 1) {
      $form['sn_subscribe_'.$tid] = array(
        '#type' => 'hidden',
        '#value' => 'Unsubscribe',
      );
      $submit = t('Unsubscribe');
    }
  }
  $form['sn_'.$tid] = array(
    '#name' => 'sn_'.$tid,
    '#type' => 'submit',
    '#value' => $submit,
  );
  $sn_form .= drupal_get_form('theme_sn_form', $form);
  $sn_form .= '</div>';
  return $sn_form;
}

/**
* Prepare block content
*/
function _sn_block($message, $tid) {
  global $user;
  if ($message) {
    $block_content = $message;
  }
  if ($user->uid == 0) {
     $block_content .= theme('sn_form', $tid, 1, 1);
   }
  else {
    $query = 'SELECT s.snid FROM {sn_subscriptions} s INNER JOIN {sn_snid_tid} t ON s.snid = t.snid WHERE s.uid = %d AND t.tid = %d';
    if (db_num_rows(db_query($query, $user->uid, $tid))) {
      $block_content .= theme('sn_form', $tid, 0, 1, $user->mail);
    }
    else {
      $block_content .= theme('sn_form', $tid, 1, 0, $user->mail);
    }
  }
  return $block_content;
}

/**
* Prepare node for sending
*/
function simplenews_node_prepare($nid, $tid) {
  $node = node_load(array('nid' => $nid), NULL, TRUE);
  $node = simplenews_replace_vars($node, FALSE);
  $node = node_prepare($node);
  $node->body = '<h2>'.$node->title.'</h2>'."\n".$node->body;
  if ($node->s_format == 'plain') {
    $node->body = sn_html_to_text($node->body, variable_get('simplenews_hyperlinks_'.$tid, 1));
  }
  else {
    $pattern = '@(<a href=)"(.\S+?)"([^>]*>)@ei';
    $node->body = preg_replace($pattern, "'\\1' . '\"' . _sn_mail_url('\\2') . '\"' . '\\3'", $node->body); 
  }
  $address_default = variable_get('site_mail', ini_get('sendmail_from'));
  $name_default = variable_get('site_name', 'drupal');
  if ($tid) {
    $node->from_address = variable_get('simplenews_from_address_'.$tid, $address_default);
    $node->from_name = variable_get('simplenews_from_name_'.$tid, $name_default);
  }
  else {
    $node->from_address = variable_get('simplenews_from_address', $address_default);
    $node->from_name = variable_get('simplenews_from_name', $name_default);
  }
  return $node;
}

/**
* Send the newsletter
*/
function _sn_send($timer = FALSE) {
  $max_time = variable_get('simplenews_time', 5);
  if ($timer && $max_time == 0) {
    return;
  }
  if ($max_time == 0) {
    $max_time = 1;
  }
  $max_time = $max_time - 0.5;
  $start_time = sn_time();
  if (!$timer) {
    $throttle = variable_get('simplenews_throttle', 20);
    static $counter = 0;
  }
  $result = db_query(db_rewrite_sql('SELECT n.nid, s.tid, n.created FROM {node} n INNER JOIN {sn_newsletters} s ON n.nid = s.nid WHERE s.s_status = %d ORDER BY n.created ASC'), 1);
  while ($nid = db_fetch_object($result)) {
    $term = taxonomy_get_term($nid->tid);
    $node = simplenews_node_prepare($nid->nid, $nid->tid);
    $node->title = "[$term->name] ".$node->title;
    $result2 = db_query('SELECT s.mail, s.snid FROM {sn_subscriptions} s INNER JOIN {sn_snid_tid} t ON s.snid = t.snid WHERE s.s_status = %d AND s.a_status = %d AND t.tid = %d ORDER BY s.snid ASC', 0, 1, $nid->tid);
    while ($mail = db_fetch_object($result2)) {
      $md5 = md5($mail->mail . simplenews_private_key());
      $h = drupal_substr($md5, 0, 10).$mail->snid.'t'.$nid->tid;
      if ($node->s_format == 'html') {
        $node->message = $node->body.'<p>--<br />'.l(t('Click here to unsubscribe from this newsletter'), 'newsletter/confirm/remove/'.$h, array(), NULL, NULL, TRUE).'</p>';
      }
      else {
        $node->message = $node->body."\n\n--\n".t('Unsubscribe from this newsletter:').' '.url('newsletter/confirm/remove/'.$h, NULL, NULL, TRUE);
      }
      $node->to = $mail->mail;
      if(sn_mail_send($node)) {
        db_query('UPDATE {sn_subscriptions} SET s_status = %d WHERE snid = %d', 1, $mail->snid);
        $counter++;
      }
      else {
        $message = t('Newsletter %title could not be sent to %email.', array('%title'=>theme('placeholder',$node->title), '%email'=>theme('placeholder',$mail->mail)));
        watchdog('newsletter', $message, WATCHDOG_ERROR);
      }
      if ($timer) {
        $int_time = sn_time();
      }
      else {
        if ($counter < $throttle) {
          $int_time = $start_time;
        }
        else {
          return;
        }
      }
      if (!($int_time - $start_time < $max_time)) {
        return;
      }
    }
    db_query('UPDATE {sn_subscriptions} SET s_status = %d', 0);
    db_query('UPDATE {sn_newsletters} SET s_status = %d WHERE nid = %d', 2, $node->nid);
    if ($timer) {
      $int_time = sn_time();
    }
    else {
      $int_time = $start_time;
    }
    if (!($int_time - $start_time < $max_time)) {
      return;
    }
  }
}

/**
* Send a test newsletter
*/
function simplenews_send_test($input) {
  $tid = db_result(db_query('SELECT tid FROM {sn_newsletters} WHERE nid = %d', $input->nid));
  $tid = $tid ? $tid : FALSE;
  $node = simplenews_node_prepare($input->nid, $tid);
  $term = $tid ? taxonomy_get_term($tid) : FALSE;
  $name = $term ? $term->name : 'Unassigned newsletter';
  $node->title = "[$name] ".$node->title;
  $node->message = $node->body."\n\n--\n".t('Footer will be appended here');
  $recipients = $input->test_address;
  foreach ($recipients as $to) {
    $node->to = $to;
    if (sn_mail_send($node)) {
      drupal_set_message(t('Test newsletter sent to %recipient', array('%recipient' => theme('placeholder', $to))));
    }
  }
}

/**
* Send confirmation email
*/
function sn_mail_confirm($email, $message, $newsletter, $snid = NULL, $tid = NULL, $op = NULL) {
  $mail->s_format = 'plain';
  $mail->priority = 'none';
  $address_default = variable_get('site_mail', ini_get('sendmail_from'));
  $name_default = variable_get('site_name', 'drupal');
  $mail->from_address = variable_get('simplenews_from_address', $address_default);
  $mail->from_name = variable_get('simplenews_from_name', $name_default);
  $mail->to = $email;
  $mail->title = t('Confirmation for %newsletter from %site', array('%newsletter'=>$newsletter, '%site'=>variable_get('simplenews_from_name', $name_default)));
  $mail->message = t('This is a subscription status confirmation notice for the "%newsletter" newsletter.', array('%newsletter'=>$newsletter));
  $mail->message .= "\n\n".$message;
  if ($snid && $tid) {
    $h = drupal_substr(md5($email . simplenews_private_key()), 0, 10).$snid.'t'.$tid;
    if ($op == 'subscribe') {
      $mail->message .= "\n\n--\n".t('Subscribe link:').' '.url('newsletter/confirm/add/'.$h, NULL, NULL, TRUE);
    }
    elseif ($op == 'unsubscribe') {
      $mail->message .= "\n\n--\n".t('Unsubscribe link:').' '.url('newsletter/confirm/remove/'.$h, NULL, NULL, TRUE);
    }
  }
  else {
    global $base_url;
    $mail->message .= "\n\n--\n".t('Visit our site:').' '.$base_url;
  }
  sn_mail_send($mail);
}

/**
* Mail engine
*/
function sn_mail_send($mail) {
  $mail->to = trim($mail->to);
  require_once('activeMailLib.php');
  $email = new activeMailLib($mail->s_format);
  $email->From($mail->from_address, $mail->from_name);
  $email->To($mail->to);
  $email->Subject($mail->title);
  $email->Message($mail->message, 'UTF-8', '8Bit');
  $email->priority($mail->priority);
  if ($mail->receipt) {
    $email->Receipt($mail->from_address);
  }
  $email->Send();
  return $email->isSent($mail->to);
}

/**
* Other module-specific functions
*/
function sn_html_to_text($txt, $inline) {
  $pattern = '@(<a href="(.\S+?)"[^>]*>(.+?)</a>)@ei';
  if ($inline) {
    $txt = preg_replace($pattern, "_sn_mail_uri('\\2', '\\3')", $txt);
  }
  else {
    $txt = preg_replace($pattern, "'\\3 ['. _sn_mail_urls('\\2') .']'", $txt);
    $urls = _sn_mail_urls();
    if (count($urls)) {
      $txt .= "\n";
      $i = 0;
      for ($max = count($urls); $i < $max; $i++) {
        $txt .= '['. ($i + 1) .'] '. $urls[$i] ."\n";
      }
    }
    _sn_mail_urls(0, TRUE);
  }
  
  // some basic html to text conversion
  $txt = preg_replace(_sn_define_search(), _sn_define_replace(), $txt);
  $txt = preg_replace("/\n\s+\n/", "\n\n", $txt);
  $txt = strip_tags($txt);
  $txt = decode_entities($txt);
  return wordwrap($txt, 80);
}

function _sn_mail_uri($href, $link) {
  $href = _sn_mail_url($href);
  if ($href == $link) {
    $output =  '['.$href.']';
  }
  else {
    $output = $link.' ['.$href.']';
  }
  return $output;
}

function _sn_mail_url($url) {
  if (preg_match('@://@', $url)) {
    return $url;
  }
  elseif (preg_match('!mailto:!i', $url)) {
    return str_replace('mailto:', '', $url);
  }
  else {
    return url($url, NULL, NULL, 1);
  }
}

function _sn_mail_urls($url = 0, $refresh = FALSE) {
  static $urls = array();
  if($refresh) {
    $urls = array();
  }
  if ($url) {
    $urls[] = _sn_mail_url($url);
    return count($urls);
  }
  return $urls;
}

/**
 *  List of preg* regular expression patterns to search for,
 *  used in conjunction with $replace.
 *  Based on / modified from html2txt.module
 */
function _sn_define_search() {

    $search = array(
        "/\r/",                                       // Non-legal carriage return
        "/[\t]+/",                                    // tabs
        '/<script[^>]*>.*?<\/script>/i',              // <script>s -- which strip_tags supposedly has problems with
        '!<h[12][^>]*>(.+?)</h[12]>!ie',              // H1 - H2
        '/<h3[^>]*>(.+?)<\/h3>/ie',                   // H3
        '/<h[456][^>]*>(.+?)<\/h[456]>/ie',           // H4 - H6
        '!<blockquote[^>]*>!i',                       // <blockquote>
        '!</blockquote>!i',                           // </blockquote>
        '!</?p[^>]*>!i',                              // <p>
        "/<br[^>]*>\n?/i",                            // <br>
        '!</?(b|strong)[^>]*>!i',                     // <b> and <strong>
        '!</?(em|i)[^>]*>!i',                         // <em> and <i>
        '/(<ul[^>]*>|<\/ul>)/i',                      // <ul> and </ul>
        '/(<ol[^>]*>|<\/ol>)/i',                      // <ol> and </ol>
        '/(<dl[^>]*>|<\/dl>)/i',                      // <dl> and </dl>
        '!<li[^>]*>!i',                               // <li>
        '!</li>!i',                                   // </li>
        '!<dt[^>]*>!i',                               // <dt>
        '!</dt>!i',                                   // </dt>
        '!<dd[^>]*>!i',                               // <dd>
        '!</dd>!i',                                   // </dd>
        '/<hr[^>]*>/i',                               // <hr>
        '/(<table[^>]*>|<\/table>)/i',                // <table> and </table>
        '/(<tr[^>]*>|<\/tr>)/i',                      // <tr> and </tr>
        '/<td[^>]*>(.+?)<\/td>/i',                    // <td> and </td>
        '/<th[^>]*>(.+?)<\/th>/i',                    // <th> and </th>
        '/&nbsp;/i',
        '/&quot;/i',
        '/&gt;/i',
        '/&lt;/i',
        '/&amp;/i',
        '/&copy;/i',
        '/&trade;/i',
        '/&#8220;/',
        '/&#8221;/',
        '/&#8211;/',
        '/&#8217;/',
        '/&#38;/',
        '/&#169;/',
        '/&#8482;/',
        '/&#151;/',
        '/&#147;/',
        '/&#148;/',
        '/&#149;/',
        '/&reg;/i',
        '/&bull;/i',
        '/&[&;]+;/i'
    );
    
    return $search;
}

/**
 *  List of pattern replacements corresponding to patterns searched.
 *  Based on / modified from html2txt.module
 */
function _sn_define_replace() {

    $replace = array(
        '',                                                               // Non-legal carriage return
        ' ',                                                              // Tabs
        '',                                                               // <script>s -- which strip_tags supposedly has problems with
        "\"\n------------\" .strtoupper('\\1'). \"------------\n\n\"",    // H1 - H2
        "\"\n\" . strtoupper('\\1') . \"\n\n\"",                          // H3
        "ucwords(\"\n\n\\1\n\n\")",                                       // H4 - H6
        "\n\n\t",                                                         // <blockquote>
        "\n\n",                                                           // </blockquote>
        "\n\n",                                                           // <p>
        "\n",                                                             // <br>
        '*',                                                              // <b> and <strong>
        '/',                                                              // <em> and <i>
        "\n\n",                                                           // <ul> and </ul>
        "\n\n",                                                           // <ol> and </ol>
        "\n\n",                                                           // <dl> and </dl>
        "  * ",                                                           // <li>
        "\n",                                                             // </li>
        "  * ",                                                           // <dt>
        "\n",                                                             // </dt>
        "\t",                                                             // <dd>
        "\n",                                                             // </dd>
        "\n-------------------------\n",                                  // <hr>
        "\n\n",                                                           // <table> and </table>
        "\n",                                                             // <tr> and </tr>
        "\t\t\\1\n",                                                      // <td> and </td>
        "strtoupper(\"\t\t\\1\n\")",                                      // <th> and </th>
        ' ',
        '"',
        '>',
        '<',
        '&',
        '(c)',
        '(tm)',
        '"',
        '"',
        '-',
        "'",
        '&',
        '(c)',
        '(tm)',
        '--',
        '"',
        '"',
        '*',
        '(R)',
        '*',
        ''
    );
    return $replace;
}


function simplenews_admin($op = NULL, $op2 = NULL, $op3 = NULL) {
  simplenews_create_taxonomy();
  switch ($op) {
    case 'outbox':
      $output .= simplenews_admin_news('notsent');
    break;
    case 'types':
      $output .= t('You can create different newsletters (or subjects) to categorize your news (e.g. Cats news, Dogs news, ...).') . '<br />&nbsp;<br />';
      if ($op2 == 'add' || $op2 == 'edit') {
        if ($_POST['edit']) {
          if ($_POST['op'] == t('Delete')) {
            if ($_POST['edit']['confirm']) {
              taxonomy_del_term((int) $op3);
              drupal_goto('admin/newsletter/types');
            }
            else {
              $output .= _taxonomy_confirm_del_term($_POST['edit']['tid']);
            }
          }
          elseif ($_POST['op'] == t('Submit')) {
            $edit = $_POST['edit'];
            switch(taxonomy_save_term($edit)) {
              case SAVED_NEW:
               drupal_set_message(t('Created new term %name.', array('%name' => theme('placeholder', $edit['name']))));
               break;
             case SAVED_UPDATED:
               drupal_set_message(t('Updated term %name.', array('%name' => theme('placeholder', $edit['name']))));
               break;
            case SAVED_DELETED:
              drupal_set_message(t('Deleted term %name.', array('%name' => theme('placeholder', $deleted_name))));
              break;
            }
            drupal_goto('admin/newsletter/types');
          }
          else {
            $output .= simplenews_types_overview();
          }
        }
        else {
          $output .= simplenews_admin_types((array)(taxonomy_get_term($op3)));
        }
        break;
      }
      else {
        $output .= simplenews_types_overview();
      }
    break;
    case 'users':
      if ($op2 == 'sni' && is_numeric($op3)) {
          db_query('UPDATE {sn_subscriptions} SET a_status = 0 WHERE snid = %d', $op3);
      }
      elseif ($op2 == 'sna' && is_numeric($op3)) {
          db_query('UPDATE {sn_subscriptions} SET a_status = 1 WHERE snid = %d', $op3);
      }
      if ($op2 == 'delete' && is_numeric($op3)) {
        $snid = $op3;
        $user = db_fetch_object(db_query('SELECT mail FROM {sn_subscriptions} WHERE snid = %d', $snid));
        if ($_POST['edit']['confirm']) {
          // db cleanup in 2 separate queries because the syntax for
          // deleting from multiple tables is different between MySql 4.0 and 4.1 (use of aliases)
          db_query('DELETE FROM {sn_subscriptions} WHERE snid = %d', $snid);
          db_query('DELETE FROM {sn_snid_tid} WHERE snid = %d', $snid);
          drupal_set_message(t('The user %user was successfully deleted.', array('%user'=>theme('placeholder', $user->mail))));
          $watchdog = t('User %email deleted from the database.', array('%email'=>theme('placeholder', $user->mail)));
          watchdog('newsletter', $watchdog);
          drupal_goto('admin/newsletter/users');
        }
        else {
          $output = simplenews_confirm_del_user($snid, $user);
        }
      }
      elseif ($op2 == 'edit' && is_numeric($op3)) {
        $snid = $op3;
        $output .= _simplenews_subscription_manager(FALSE, $snid);
      }
      elseif ($op2 == 'add') {
        $output .= simplenews_admin_list_add();
      }
      elseif ($op2 == 'export') {
        $output .= simplenews_admin_list_export();
      }
      else {
        $output .= simplenews_admin_list();
      }
    break;
    case 'settings':
      if (is_numeric($op2)) {
        $term = db_fetch_object(db_query('SELECT tid, vid, name FROM {term_data} WHERE tid = %d', $op2));
        if (simplenews_get_vid() == $term->vid) {
         $output .= simplenews_admin_settings($term);
        }
        else {
          drupal_not_found();
        }
      }
      else {
        $output .= simplenews_admin_settings();
      }
    break;
    default:
      $output .= simplenews_admin_news('sent');
  }
  return $output;
}

function simplenews_set_filter($type, $na = TRUE) {
  $names['all'] = t('all newsletters');
  $queries['all'] = '';
  if ($na) {
  $names['na'] = t('n/a');
  $queries['na'] = ' AND s.tid = 0';
  }
  foreach (taxonomy_get_tree(simplenews_get_vid()) as $newsletter) {
    $names[$newsletter->tid] = $newsletter->name;
    $queries[$newsletter->tid] = ' AND s.tid = '.$newsletter->tid;
  }
  if (empty($_SESSION[$type])) {
    $_SESSION[$type] = 'all';
  }
  $op = $_POST['op'];
  if ($op == t('Filter') && isset($_POST['edit']['filter'])) {
    $_SESSION[$type] = $_POST['edit']['filter'];
  }
  return array($names, $queries);
}

function simplenews_admin_news($sent) {
  $form['sn_issue_filter'] = array(
    '#type' => 'fieldset',
    '#title' => t('Show issues from'),
    '#collapsible' => FALSE,
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
  );
  $vid = simplenews_get_vid();
  $header = array(t('Title'), t('Newsletter'), t('Date created'), t('Published'), t('Sent'), t('Edit'));
  if ($sent == 'notsent') {
    list($names, $queries) = array_values(simplenews_set_filter('simplenews_drafts_filter'));
    $form['sn_issue_filter']['filter'] = array(
      '#type' => 'select',
      '#options' => $names,
      '#default_value' => $_SESSION['simplenews_drafts_filter'],
    );
    $query = "SELECT n.*, s.s_status FROM {node} n INNER JOIN {sn_newsletters} s ON n.nid = s.nid WHERE s.s_status = %d".$queries[$_SESSION['simplenews_drafts_filter']]." ORDER BY n.created DESC";
    $count_query = "SELECT COUNT(n.nid) FROM {node} n INNER JOIN {sn_newsletters} s ON n.nid = s.nid WHERE s.s_status = %d".$queries[$_SESSION['simplenews_drafts_filter']];
  }
  else {
    list($names, $queries) = array_values(simplenews_set_filter('simplenews_sent_filter'));
    $form['sn_issue_filter']['filter'] = array(
      '#type' => 'select',
      '#options' => $names,
      '#default_value' => $_SESSION['simplenews_sent_filter'],
    );
    $query = "SELECT n.*, s.s_status FROM {node} n INNER JOIN {sn_newsletters} s ON n.nid = s.nid WHERE s.s_status > %d".$queries[$_SESSION['simplenews_sent_filter']]." ORDER BY n.created DESC";
    $count_query = "SELECT COUNT(n.nid) FROM {node} n INNER JOIN {sn_newsletters} s ON n.nid = s.nid WHERE s.s_status > %d".$queries[$_SESSION['simplenews_sent_filter']];
  }
  $result = pager_query(db_rewrite_sql($query), 10, 0, db_rewrite_sql($count_query), 0);
  while ($node = db_fetch_object($result)) {
    $terms = array_keys(taxonomy_node_get_terms_by_vocabulary($node->nid, $vid, 'name'));
    $rows[] = array(l($node->title, 'node/'. $node->nid),
                    $terms[0] ? $terms[0] : t('n/a'),
                    format_date($node->created, 'custom', 'm/d/Y'),
                    theme('simplenews_status', $node->status, 'published'),
                    theme('simplenews_status', $node->s_status, 'sent'),
                    l(t('edit'), 'node/'. $node->nid .'/edit', array(), drupal_get_destination()));
  }
  if ($pager = theme('pager', NULL, 10, 0)) {
    $rows[] = array(array('data' => $pager, 'colspan' => '6'));
  }
  if (!$rows) {
    $rows[] = array(array('data' => t('No newsletters available.'), 'colspan' => '6'));
  }
  else {
    $key_table = TRUE;
  }
  $form['sn_issue_filter']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Filter'),
  );
  $output = drupal_get_form('simplenews_admin_news', $form);
  $output .= theme('table', $header, $rows);
  
  if ($key_table) {
  $key_header = array(array('data' => t('Table key'), 'colspan' => '2'));
  $key_rows[] = array(theme('simplenews_status', 0, 'sent'), t('Not published/Not sent'));
  $key_rows[] = array(theme('simplenews_status', 2, 'sent'), t('Published/Sent'));
  $key_rows[] = array(theme('simplenews_status', 1, 'sent'), t('Currently sending by cron'));
  $output .= theme('table', $key_header, $key_rows);
  }
  
  return $output;
}

function theme_simplenews_status($status, $source) {
  if ($source == 'published') {
    $imgs = array(0 => 'sn-saved', 1 => 'sn-sent');
  }
  elseif ($source == 'sent') {
    $imgs = array(0 => 'sn-saved', 1 => 'sn-cron', 2 => 'sn-sent');
  }
  $path = base_path() . drupal_get_path('module', 'simplenews').'/';
  $output = '<img src="'.$path.$imgs[$status].'.png" width="15" height="15" alt="'.$status.'" border="0" />';
  return $output;
}

function simplenews_admin_list() {
  list($names, $queries) = array_values(simplenews_set_filter('simplenews_subscriptions_filter',FALSE));
  $form['sn_subscriptions_filter'] = array(
    '#type' => 'fieldset',
    '#title' => t('Show subscriptions to'),
    '#collapsible' => FALSE,
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
  );
  $form['sn_subscriptions_filter']['filter'] = array(
    '#type' => 'select',
    '#options' => $names,
    '#default_value' => $_SESSION['simplenews_subscriptions_filter'],
  );
  $form['sn_subscriptions_filter']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Filter'),
  );
  $output = drupal_get_form('simplenews_admin_list', $form);

  $header = array(NULL, t('E-mail'), t('Username'), t('Status'), array('data' => t('Operations'), 'colspan' => '3'));
  $query = 'SELECT DISTINCT ss.*, u.name FROM {sn_subscriptions} ss INNER JOIN {users} u ON ss.uid = u.uid INNER JOIN {sn_snid_tid} s ON ss.snid = s.snid'.$queries[$_SESSION['simplenews_subscriptions_filter']].' ORDER BY ss.mail ASC';
  $count_query = 'SELECT COUNT(DISTINCT(ss.snid)) FROM {sn_subscriptions} ss INNER JOIN {sn_snid_tid} s ON ss.snid = s.snid'.$queries[$_SESSION['simplenews_subscriptions_filter']];
  $result = pager_query($query, 15, 0, $count_query);
  if ($_GET['page']) {
    $i = (int) $_GET['page'] * 15;
  }
  while ($subs = db_fetch_object($result)) {
    $key_table = TRUE;
    $i++;
    if ($subs->uid == 0) {
      $subs->name = t('Unregistered user');
    }
    if ($subs->a_status == 0) {
      $activate = l(t('activate'), 'admin/newsletter/users/sna/'.$subs->snid);
    }
    elseif ($subs->a_status == 1) {
      $activate = l(t('inactivate'), 'admin/newsletter/users/sni/'.$subs->snid);
    }
    $rows[] = array($i, $subs->mail, ($subs->uid ? l($subs->name, 'user/'.$subs->uid) : $subs->name), theme('simplenews_status', $subs->a_status, 'published'), l(t('edit'), 'admin/newsletter/users/edit/'.$subs->snid),l(t('delete'), 'admin/newsletter/users/delete/'.$subs->snid), $activate);
  }
  if ($pager = theme('pager', NULL, 15, 0)) {
    $rows[] = array(array('data' => $pager, 'colspan' => '7'));
  }
  if (!$rows) {
    $rows[] = array(array('data' => t('No subscriptions available.'), 'colspan' => '7'));
  }
  $output .= theme('table', $header, $rows);
  if ($key_table) {
    $key_header = array(array('data' => t('Table key'), 'colspan' => '2'));
    $key_rows[] = array(theme('simplenews_status', 0, 'published'), t('Inactive/No newsletters will be sent'));
    $key_rows[] = array(theme('simplenews_status', 1, 'published'), t('Active/User will receive newsletters'));
    $output .= theme('table', $key_header, $key_rows);
  }
  return $output;
}

function simplenews_admin_list_add() {
  $edit = $_POST['edit'];
  $tree = taxonomy_get_tree(simplenews_get_vid());

  if ($_POST['op'] == t('Import')) {
    if ($edit['emails'] != '') {
      $emails = explode(",", $edit['emails']);
       foreach ($emails as $email) {
        $email = trim($email);
        if (valid_email_address($email)) {
          $result = db_query("SELECT snid FROM {sn_subscriptions} WHERE mail = '%s'", $email);
          if (!db_num_rows($result)) {
            $query = "SELECT uid FROM {users} WHERE mail = '%s'";
            if ($result = db_fetch_object(db_query($query, $email))) {
              $uid = $result->uid;
            }
            else {
              $uid = 0;
            }
            if (db_query("INSERT INTO {sn_subscriptions} (mail, uid, a_status) VALUES ('%s', %d, %d)", $email, $uid, 1)) {
              $result = db_query("SELECT snid FROM {sn_subscriptions} WHERE mail = '%s'", $email);
              $watchdog = t('User %email added to the database.', array('%email'=>theme('placeholder', $email)));
              watchdog('newsletter', $watchdog);
            }
          }
          if (db_num_rows($result)) $added[] .= $email;
          if ($tree) {
            $snid = db_result($result);
            foreach ($tree as $newsletter) {
              if ($edit['tid_'.$newsletter->tid]) {
                $snid_tid = db_query('SELECT snid FROM {sn_snid_tid} WHERE snid = %d AND tid = %d', $snid, $newsletter->tid);
                if (!db_num_rows($snid_tid)) {
                  db_query('INSERT INTO {sn_snid_tid} (snid, tid) VALUES (%d, %d)', $snid, $newsletter->tid);
                }
              }
            }
          }
        }
        else {
          $invalid[] .= $email;
        }
      }
    }
    if ($added) {
      $added = implode(", ", $added);
      drupal_set_message(t('The following addresses were added or updated: %added.', array('%added'=>theme('placeholder', $added))));
    }
    else {
      drupal_set_message(t('No addresses were added.'));
    }
    if ($invalid) {
      $invalid = implode(", ", $invalid);
      drupal_set_message(t('The following addresses were invalid: %invalid.', array('%invalid'=>theme('placeholder', $invalid))), 'error');
    }
  }
  
  $form['emails'] = array(
    '#type' => 'textarea',
    '#title' => t('E-mail addresses'),
    '#cols' => 60,
    '#rows' => 5,
    '#description' => t('Supply a comma separated list of e-mail addresses to be added to the list. Spaces between commas and addresses are allowed.'),
  );
  $form['sn_subscribe_to'] = array(
    '#type' => 'fieldset',
    '#title' => t('Subscribe imported addresses to'),
    '#collapsible' => FALSE,
  );
  if ($tree) {
    foreach ($tree as $newsletter) {
      $form['sn_subscribe_to']['tid_'.$newsletter->tid] = array(
        '#type' => 'checkbox',
        '#title' => $newsletter->name,
        '#return_value' => 1,
      );
      if ($edit['tid_'.$newsletter->tid]) {
        $to[] .= $newsletter->name;
      }
    }
    if ($to && $added) {
      $to = implode(", ", $to);
      drupal_set_message(t('The addresses were subscribed to the following newsletters: %to.', array('%to'=>theme('placeholder', $to))));
    }
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
  );
  return drupal_get_form('simplenews_admin_list_add', $form);
}

function simplenews_admin_list_export() {
  $tree = taxonomy_get_tree(simplenews_get_vid());
  $form['sn_status'] = array(
    '#type' => 'fieldset',
    '#title' => t('Status'),
    '#description' => t('Select at least 1 status'),
    '#collapsible' => FALSE,
  );
  $form['sn_status']['active'] = array(
    '#type' => 'checkbox',
    '#title'=> t('Active users'),
    '#return_value' => 1,
  );
  $form['sn_status']['inactive'] = array(
    '#type' => 'checkbox',
    '#title'=> t('Inactive users'),
    '#return_value' => 1,
  );
  if ($tree) {
    $form['sn_newsletter'] = array(
      '#type' => 'fieldset',
      '#title' => t('Subscribed to'),
      '#description' => t('Select at least 1 newsletter'),
      '#collapsible' => FALSE,
    );
    foreach ($tree as $newsletter) {
      $form['sn_newsletter']['tid_'.$newsletter->tid] = array(
        '#type' => 'checkbox',
        '#title' => $newsletter->name,
        '#return_value' => 1,
      );
    }
  }
  $form['emails'] = array(
    '#type' => 'textarea',
    '#title' => t('E-mail addresses'),
    '#cols' => 60,
    '#rows' => 5,
    '#default_value' => t('No search performed'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Export'),
  );
  $form['#after_build'] = array('simplenews_admin_export_after_build');
  $form['#redirect'] = FALSE;
  return drupal_get_form('simplenews_admin_list_export', $form);
}

function simplenews_admin_export_after_build($form, $edit) {
  $op = isset($_POST['op']) ? $_POST['op'] : '';
  if ($op == t('Export')) {
    $tree = taxonomy_get_tree(simplenews_get_vid());
    if ($edit['active'] == 1) {
      $where[] = 's.a_status = 1';
    }
    if ($edit['inactive'] == 1) {
      $where[] = 's.a_status = 0';
    }
    $where = $where ? implode(' OR ', $where) : NULL;
    if ($tree) {
      foreach ($tree as $newsletter) {
        if ($edit['tid_'.$newsletter->tid]) {
          $where_tid[] = 't.tid = '.$newsletter->tid;
        }
      }
    }
    $where_tid = $where_tid ? implode(' OR ', $where_tid) : NULL;
    if ($where && $where_tid) {
      $query = 'SELECT DISTINCT s.mail FROM {sn_subscriptions} s INNER JOIN {sn_snid_tid} t ON s.snid = t.snid WHERE ('.$where.') AND ('.$where_tid.')';
      $result = db_query($query);
      while ($mail = db_fetch_object($result)) {
        $mails[] = $mail->mail;
      }
    }
    if ($mails) {
      $exported_mails = implode(", ", $mails);
    }
    else {
      $exported_mails = t('No addresses were found.');
    }
    $form['emails']['#value'] = $exported_mails;
  }
  return $form;
}


function simplenews_confirm_del_user($snid, $user) {
  return confirm_form('simplenews_confirm_del_user',
                      $form,
                      t('Are you sure you want to remove %user from the subscription list?', array('%user'=>theme('placeholder', $user->mail))),
                      'admin/newsletter/users',
                      t('This action will only remove the user from the newsletter subscription list. If this user is registered at your site, his/her account information will remain unchanged.'),
                      t('Delete'),
                      t('Cancel'));
}

function simplenews_admin_settings($term = FALSE) {
  $output = '<br />';
  $address_default = variable_get('site_mail', ini_get('sendmail_from'));
  $name_default = variable_get('site_name', 'drupal');
  if ($term) {
    $result = db_result(db_query("SELECT status FROM {blocks} WHERE module = '%s' AND delta = '%s'", 'simplenews', 'newsletter-'.$term->tid));
    if (!$result) {
      drupal_set_message(t('The %block block is disabled. Click %here to enable this block.', array('%block' => theme('placeholder', $term->name), '%here' => l(t('here'), 'admin/block', array(), drupal_get_destination()))), 'error');
    }
    if ($_POST['op'] == t('Submit')) {
      $edit = $_POST['edit'];
      variable_set('simplenews_block_m_status_'.$term->tid, $edit['block_m_status'.$term->tid] ? 1 : 0);
      variable_set('simplenews_block_m_'.$term->tid, $edit['block_m'.$term->tid]);
      variable_set('simplenews_block_l_'.$term->tid, $edit['block_l'.$term->tid] ? 1 : 0);
      variable_set('simplenews_block_r_'.$term->tid, $edit['block_r'.$term->tid] ? 1 : 0);
      variable_set('simplenews_block_i_status_'.$term->tid, $edit['block_i_status'.$term->tid] ? 1 : 0);
      variable_set('simplenews_block_i_'.$term->tid, $edit['block_i'.$term->tid]);
      variable_set('simplenews_block_f_'.$term->tid, $edit['block_f'.$term->tid] ? 1 : 0);      
      variable_set('simplenews_hyperlinks_'.$term->tid, $edit['hyperlinks'.$term->tid]);      
      variable_set('simplenews_from_name_'.$term->tid, $edit['from_name'.$term->tid]);
      //valid_email_address() allows empty address, so check this first
      if ($edit['from_address'.$term->tid] == '') {
        form_set_error('from_address'.$term->tid, t("You have to supply a sender's e-mail address."));
      }
      elseif (!valid_email_address($edit['from_address'.$term->tid])) {
        form_set_error('from_address'.$term->tid, t("The sender's e-mail address you supplied is not valid."));
      }
      else {
        variable_set('simplenews_from_address_'.$term->tid, $edit['from_address'.$term->tid]);
        drupal_set_message(t('Your settings were saved.'));
      }
    }
    $form['sn_block_options'] = array(
      '#type' => 'fieldset',
      '#title' => t('Block options'),
      '#description' => t('Links (to overview page, RSS-feed and latest issues) are only displayed to users who have "view links in block" privileges.'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['sn_block_options']['block_m_status'.$term->tid] = array(
      '#type' => 'checkbox',
      '#title' => t('Display block message'),
      '#return_value' => 1,
      '#default_value' => variable_get('simplenews_block_m_status_'.$term->tid, 1),
    );
    $form['sn_block_options']['block_m'.$term->tid] = array(
      '#type' => 'textfield',
      '#title' => t('Block message'),
      '#size' => 60,
      '#maxlength' => 128,
      '#default_value' => variable_get('simplenews_block_m_'.$term->tid, t('Stay informed on our latest news!')),
    );
    $form['sn_block_options']['block_f'.$term->tid] = array(
      '#type' => 'checkbox',
      '#title' => t('Display subscription form'),
      '#return_value' => 1,
      '#default_value' => variable_get('simplenews_block_f_'.$term->tid, 1),
    );
    $form['sn_block_options']['block_l'.$term->tid] = array(
      '#type' => 'checkbox',
      '#title' => t('Display link to archives'),
      '#return_value' => 1,
      '#default_value' => variable_get('simplenews_block_l_'.$term->tid, 1),
    );
    $form['sn_block_options']['block_i_status'.$term->tid] = array(
      '#type' => 'checkbox',
      '#title' => t('Display latest issues'),
      '#return_value' => 1,
      '#default_value' => variable_get('simplenews_block_i_status_'.$term->tid, 0),
    );
    $form['sn_block_options']['block_i'.$term->tid] = array(
      '#type' => 'select',
      '#title' => t('Number of issues to display'),
      '#options' => drupal_map_assoc(array(1,2,3,4,5,6,7,8,9,10)),
      '#default_value' => variable_get('simplenews_block_i_'.$term->tid, 5),
    );
    $form['sn_block_options']['block_r'.$term->tid] = array(
      '#type' => 'checkbox',
      '#title' => t('Display RSS-feed icon'),
      '#return_value' => 1,
      '#default_value' => variable_get('simplenews_block_r_'.$term->tid, 1),
    );
    $form['sn_sender_information'] = array(
      '#type' => 'fieldset',
      '#title' => drupal_ucfirst(t('Sender information')),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['sn_sender_information']['from_name'.$term->tid] = array(
      '#type' => 'textfield',
      '#title' => t('From name'),
      '#size' => 60,
      '#maxlength' => 128,
      '#default_value' => variable_get('simplenews_from_name_'.$term->tid, $name_default),
    );
    $form['sn_sender_information']['from_address'.$term->tid] = array(
      '#type' => 'textfield',
      '#title' => t('From e-mail address'),
      '#size' => 60,
      '#maxlength' => 128,
      '#default_value' => variable_get('simplenews_from_address_'.$term->tid, $address_default),
    );
    $form['sn_hyperlinks'] = array(
      '#type' => 'fieldset',
      '#title' => t('HTML to text conversion'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#description' => t('When your newsletter is sent as plain text, these options will determine how the conversion to text is performed.'),
    );    
    $options[0] = t('Append hyperlinks as a numbered reference list');
    $options[1] = t('Display hyperlinks inline with the text');
    $form['sn_hyperlinks']['hyperlinks'.$term->tid] = array(
      '#type' => 'radios',
      '#title' => t('Hyperlink conversion'),
      '#options' => $options,
      '#default_value' => variable_get('simplenews_hyperlinks_'.$term->tid, 1),
    );
  }
  else {
    if ($_POST['op'] == t('Submit')) {
      $edit = $_POST['edit'];
      variable_set('simplenews_format', $edit['format']);
      variable_set('simplenews_priority', $edit['priority']);
      variable_set('simplenews_receipt', $edit['receipt']);
      variable_set('simplenews_send', $edit['send']);
      variable_set('simplenews_time', $edit['time']);
      variable_set('simplenews_test_address', $edit['test_address']);
      variable_set('simplenews_test_address_override', $edit['test_address_override']);
      variable_set('simplenews_throttle', $edit['throttle']);
      variable_set('simplenews_from_name', $edit['from_name']);
      //valid_email_address() allows empty address, so check this first
      if ($edit['from_address'] == '') {
        form_set_error('from_address', t("You have to supply a sender's e-mail address."));
      }
      elseif (!valid_email_address($edit['from_address'])) {
        form_set_error('from_address', t("The sender's e-mail address you supplied is not valid."));
      }
      else {
        variable_set('simplenews_from_address', $edit['from_address']);
        drupal_set_message(t('Your settings were saved.'));
      }
    }
    $form['sn_default_options'] = array(
      '#type' => 'fieldset',
      '#title' => t('Default newsletter options'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#description' => t('These options will be the defaults for new newsletters, but can be overridden in the newsletter editing form.'),
    );
    $form['sn_default_options']['format'] = array(
      '#type' => 'select',
      '#title' => t('Format'),
      '#options' => array('plain' => t('plain'), 'html' => t('html')),
      '#description' => t('Select the default newsletter sending format.'),
      '#default_value' => variable_get('simplenews_format', 'plain'),
    );
    $form['sn_default_options']['priority'] = array(
      '#type' => 'select',
      '#title' => t('Priority'),
      '#options' => array(0 => t('none'), 1 => t('highest'), 2 => t('high'), 3 => t('normal'), 4 => t('low'), 5 => t('lowest')),
      '#description' => t('Note that e-mail priority is ignored by a lot of e-mail programs.'),
      '#default_value' => variable_get('simplenews_priority', 0),
    );
    $form['sn_default_options']['receipt'] = array(
      '#type' => 'checkbox',
      '#title' => t('Request receipt'),
      '#return_value' => 1,
      '#default_value' => variable_get('simplenews_receipt', 0),
      '#description' => t('Request a Read Receipt from your newsletters. A lot of e-mail programs ignore these so it is not a definitive indication of how many people have read your newsletter.'),
    );
    $options[0] = t("Don't send now");
    $options[2] = t('Send one test newsletter to the test address');
    $options[1] = t('Send newsletter');
    $form['sn_default_options']['send'] = array(
      '#type' => 'radios',
      '#title' => t('Default selection for sending newsletters'),
      '#options' => $options,
      '#default_value' => variable_get('simplenews_send', 0),
    );
    $form['sn_test_address'] = array(
      '#type' => 'fieldset',
      '#title' => t('Test addresses options'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#description' => t('Supply a comma-separated list of e-mail addresses to be used as test addresses. The override function allows to override these addresses upon newsletter creation.'),
    );
    $form['sn_test_address']['test_address'] = array(
      '#type' => 'textfield',
      '#title' => t('Test e-mail address'),
      '#size' => 60,
      '#maxlength' => 128,
      '#default_value' => variable_get('simplenews_test_address', $address_default),
    );
    $form['sn_test_address']['test_address_override'] = array(
      '#type' => 'checkbox',
      '#title' => t('Allow test address override'),
      '#return_value' => 1,
      '#default_value' => variable_get('simplenews_test_address_override', 0),
    );
    $form['sn_sender_info'] = array(
      '#type' => 'fieldset',
      '#title' => t('Sender information'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#description' => t('Default sender address that will only be used for confirmation e-mails. You can specify sender information for each newsletter separately on the newsletter\'s settings page.'),
    );
    $form['sn_sender_info']['from_name'] = array(
      '#type' => 'textfield',
      '#title' => t('From name'),
      '#size' => 60,
      '#maxlength' => 128,
      '#default_value' => variable_get('simplenews_from_name', $name_default),
    );
    $form['sn_sender_info']['from_address'] = array(
      '#type' => 'textfield',
      '#title' => t('From e-mail address'),
      '#size' => 60,
      '#maxlength' => 128,
      '#default_value' => variable_get('simplenews_from_address', $address_default),
    );
    $form['sn_init_send'] = array(
      '#type' => 'fieldset',
      '#title' => t('Initial send time'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#description' => t('Sets the maximum time in seconds during which newsletters are sent. If not all recipients have been mailed within this time, sending is further handled as a cronjob.').' <br /> '.t('The highest value in the dropdown list is based on max_execution_time in your php.ini file. Note that if not all previous newsletters have been sent to all recipients yet, these are sent first.'),
    );
    $max_time = array(0, 1, 2, 3, 4);
    for ($i = 5; $i < ini_get('max_execution_time'); $i=$i+5) {
      $max_time[] = $i;
    }
    $form['sn_init_send']['time'] = array(
      '#type' => 'select',
      '#title' => t('Seconds'),
      '#options' => drupal_map_assoc($max_time),
      '#default_value' => variable_get('simplenews_time', 2),
    );
    $form['sn_cron_throttle'] = array(
      '#type' => 'fieldset',
      '#title' => t('Cron throttle'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#description' => t('Sets the numbers of newsletters sent per cron run.'),
    );
    $throttle = array(10=>10,20=>20,30=>30,40=>40,50=>50,100=>100,150=>150,200=>200,300=>300,400=>400,500=>500,999999=>t('Unlimited'));
    $form['sn_cron_throttle']['throttle'] = array(
      '#type' => 'select',
      '#title' => t('Number of mails'),
      '#options' => $throttle,
      '#default_value' => variable_get('simplenews_throttle', 20),
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return drupal_get_form('simplenews_admin_settings', $form);
}

function simplenews_create_taxonomy() {
  $edit = $_POST['edit'];
  // Get vid or create vocabulary
  $vid = simplenews_get_vid();
  // Check to see if at least 1 term exists, else create one
  $tid = db_result(db_query('SELECT tid FROM {term_data} WHERE vid = %d', $vid));
  if (!$tid) {
    $edit['name'] = drupal_ucfirst(variable_get('site_name', 'Drupal')).' '.t('newsletter');
    $edit['vid'] = $vid;
    $edit['weight'] = 0;
    switch(taxonomy_save_term($edit)) {
      case SAVED_UPDATED:
        drupal_set_message(t('Updated term %name.', array('%name' => theme('placeholder', $edit['name']))));
        break;
      case SAVED_DELETED:
        drupal_set_message(t('Deleted term %name.', array('%name' => theme('placeholder', $deleted_name))));
        break;
    }
  }
}

function simplenews_get_vid() {
  $vid = variable_get('simplenews_vid', '');
  // Check to see if a vocabulary exists, else create one
  $vid = db_result(db_query('SELECT vid FROM {vocabulary} WHERE vid = %d', $vid));
  if (!$vid) {
    $edit = array('name' => t('Newsletter'), 'multiple' => 0, 'required' => 0, 'hierarchy' => 0, 'relations' => 0, 'module' => 'simplenews', 'nodes' => array('simplenews' => 1));
    switch (taxonomy_save_vocabulary($edit)) {
      case SAVED_UPDATED:
        drupal_set_message(t('Updated vocabulary %name.', array('%name' => theme('placeholder', $edit['name']))));
         break;
      case SAVED_DELETED:
        drupal_set_message(t('Deleted vocabulary %name.', array('%name' => theme('placeholder', $deleted_name))));
        break;
    }
    $vid = $edit['vid'];
    variable_set('simplenews_vid', $vid);
  }
  return $vid;
}

function simplenews_types_overview() {
  $header = array(t('Newsletter name'), t('Operations'));
  $tree = taxonomy_get_tree(simplenews_get_vid());
  if ($tree) {
    foreach ($tree as $term) {
      $rows[] = array($term->name, l(t('edit newsletter'), "admin/newsletter/types/edit/$term->tid"));
    }
    if (!$rows) {
      $rows = array();
    }
    return theme('table', $header, $rows);
  }
}

function simplenews_admin_types($edit = array()) {
  if (!isset($edit['vid'])) {
    $edit['vid'] = simplenews_get_vid();
  }
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Newsletter name'),
    '#size' => 50,
    '#maxlength' => 128,
    '#description' => t('This name is used to identify the newsletter.'),
    '#required' => TRUE,
    '#default_value' => $edit['name'],
  );
  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#cols' => 60,
    '#rows' => 5,
    '#description' => t('The description can be used to provide more information.'),
    '#default_value' => $edit['description'],
  );
  $form['weight'] = array(
    '#type' => 'weight',
    '#title' => t('Weight'),
    '#delta' => 10,
    '#description' => t('In listings, the heavier (with a higher weight value) terms will sink and the lighter terms will be positioned nearer the top.'),
    '#default_value' => $edit['weight'],
  );
  $form['vid'] = array(
    '#type' => 'hidden',
    '#value' => $edit['vid'],
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  if ($edit['tid']) {
    $form['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
    );
    $form['tid'] = array(
      '#type' => 'hidden',
      '#value' => $edit['tid'],
    );
  }
  return drupal_get_form('simplenews_admin_types', $form);
}

function simplenews_confirm_subscription($op1 = NULL, $op2 = NULL) {
  $output = '';
  $md5 = drupal_substr($op2, 0, 10);
  list($snid, $tid) = explode('t', drupal_substr($op2, 10));
  $result = db_query('SELECT snid, mail FROM {sn_subscriptions} WHERE snid = %d', $snid);
  if ($subs = db_fetch_object($result)) {
    if ($md5 == drupal_substr(md5($subs->mail . simplenews_private_key()), 0, 10)) {
      $newsletter = taxonomy_get_term($tid);
      if ($op1 == 'remove') {
        if ($_POST['edit']['confirm']) {
          db_query("DELETE FROM {sn_snid_tid} WHERE snid = %d AND tid = %d", $subs->snid, $tid);
          drupal_set_message(t('%user was successfully removed from the %newsletter subscription list.', array('%user'=>theme('placeholder', $subs->mail), '%newsletter'=>theme('placeholder',$newsletter->name))));
          //Perform db cleanup tasks
          if (!db_num_rows(db_query('SELECT tid FROM {sn_snid_tid} WHERE snid = %d', $subs->snid))) {
            db_query('DELETE FROM {sn_subscriptions} WHERE snid = %d', $subs->snid);
            $watchdog = t('User %email deleted from the database.', array('%email'=>theme('placeholder', $subs->mail)));
            watchdog('newsletter', $watchdog);
          }
          drupal_goto();
        }
        else {
          $output .= simplenews_confirm_del_user_self($subs->mail, $newsletter->name);
        }
      }
      elseif ($op1 == 'add') {
        if ($_POST['edit']['confirm']) {
          $snid_tid = db_query("SELECT snid FROM {sn_snid_tid} WHERE snid = %d AND tid = %d", $subs->snid, $tid);
          if (!db_num_rows($snid_tid)) {
            db_query("INSERT INTO {sn_snid_tid} (snid, tid) VALUES (%d, %d)", $subs->snid, $tid);
          }
          drupal_set_message(t('%user was successfully added to the %newsletter subscription list.', array('%user'=>theme('placeholder', $subs->mail), '%newsletter'=>theme('placeholder',$newsletter->name))));
          drupal_goto();
        }
        else {
          $output .= simplenews_confirm_add_user_self($subs->mail, $newsletter->name);
        }
      }
    }
    return $output;
  }
  else {
    drupal_not_found();
  }
}

function simplenews_confirm_del_user_self($mail, $newsletter) {
  return confirm_form('simplenews_confirm_del_user',
                      $form,
                      t('Are you sure you want to remove %user from the %newsletter subscription list?', array('%user'=>theme('placeholder',$mail), '%newsletter'=>theme('placeholder',$newsletter))),
                      '',
                      t('This action will only remove you from the newsletter subscription list. If you are registered at our site, your account information will remain unchanged.'),
                      t('Delete'),
                      t('Cancel'));
}

function simplenews_confirm_add_user_self($mail, $newsletter) {
  return confirm_form('simplenews_confirm_del_user',
                      $form,
                      t('Are you sure you want to add %user to the %newsletter subscription list?', array('%user'=>theme('placeholder',$mail), '%newsletter'=>theme('placeholder',$newsletter))),
                      '',
                      t('You always have the possibility to unsubscribe later.'),
                      t('Subscribe'),
                      t('Cancel'));
}

function simplenews_replace_vars($node, $teaser = TRUE) {
  global $base_url;
  $user_mail = db_result(db_query('SELECT mail FROM {users} WHERE uid = %d', $node->uid));
  $variables = array('%site' => variable_get('site_name', 'drupal'), '%uri' => $base_url, '%uri_brief' => drupal_substr($base_url, drupal_strlen('http://')), '%mymail' => $user_mail, '%date' => format_date(time()), '%login_uri' => url('user/login', NULL, NULL, TRUE));
  $node->body = strtr($node->body, $variables);
  if ($teaser) {
    $node->teaser = strtr($node->teaser, $variables);
  }
  return $node;
}

function sn_time() {
   list($usec, $sec) = explode(" ", microtime());
   return ((float)$usec + (float)$sec);
}

function simplenews_private_key() {
  $key = variable_get('simplenews_private_key', FALSE);
    if (!$key) {
      //  This will create a 32 character identifier (a 128 bit hex number) that is extremely difficult to predict
      $key = md5(uniqid(rand()));
      variable_set('simplenews_private_key', $key);
    }
    return $key;
}

function theme_sn_item_list($items = array(), $title = NULL) {
  if (isset($title)) {
    $output = '<h3>'. $title .'</h3>';
  }
  if ($items) {
    foreach ($items as $item) {
      $output .= '<div class="sn-img-item">';
      $output .= '<div class="sn-img"></div>';
      $output .= '<div class="sn-item">'. $item .'</div>';
      $output .= '</div>';
    }
  }
  return $output;
}

function theme_sn_term_link($link, $title = NULL) {
  if (isset($title)) {
    $output = '<h3>'. $title .'</h3>';
  }
  if ($link) {
    $output .= '<div class="sn-term-link">';
    $output .= $link;
    $output .= '</div>';
  }
  return $output;
}

function theme_sn_feed_icon($url) {
  if ($image = theme('image', 'misc/feed.png', t('Syndicate content'), t('Syndicate content'))) {
    return '<div class="sn-feed-icon"><a href="'. $url .'">'. $image. '</a></div>';
  }
} 

