<?php
// $Id$

//TODO: Add table and field comments
function simplenews_schema() {
  $schema['simplenews_subscriptions'] = array(
    'description' => t(''),
    'fields' => array(
       'snid' => array(
        'description' => t(''),
        'type' => 'serial',
        'not null' => true,
      ),
      'activated' => array(
        'description' => t(''),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => true,
        'default' => 0,
      ),
      'mail' => array(
        'description' => t(''),
        'type' => 'varchar',
        'length' => 64,
        'not null' => true,
        'default' => '',
      ),
      'uid' => array(
        'description' => t(''),
        'type' => 'int',
        'not null' => true,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'mail' => array('mail'),
    ),
    'primary key' => array('snid'),
  );

  $schema['simplenews_newsletters'] = array(
    'description' => t(''),
    'fields' => array(
      'nid' => array(
        'description' => t(''),
        'type' => 'int',
        'not null' => true,
        'default' => 0,
      ),
      'vid' => array(
        'description' => t(''),
        'type' => 'int',
        'not null' => true,
        'default' => 0,
      ),
      'tid' => array(
        'description' => t(''),
        'type' => 'int',
        'not null' => true,
        'default' => 0,
      ),
      's_status' => array(
        'description' => t(''),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => true,
        'default' => 0,
      ),
      's_format' => array(
        'description' => t(''),
        'type' => 'varchar',
        'length' => 8,
        'not null' => true,
        'default' => '',
      ),
      'priority' => array(
        'description' => t(''),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => true,
        'default' => 0,
      ),
      'receipt' => array(
        'description' => t(''),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => true,
        'default' => 0,
      ),
    ),
    'primary key' => array('nid'),
  );

  $schema['simplenews_snid_tid'] = array(
    'description' => t(''),
    'fields' => array(
       'snid' => array(
        'description' => t(''),
        'type' => 'int',
        'not null' => true,
        'default' => 0,
      ),
       'tid' => array(
        'description' => t(''),
        'type' => 'int',
        'not null' => true,
        'default' => 0,
      ),
    ),
    'primary key' => array('snid', 'tid'),
  );
  $schema['simplenews_mail_cache'] = array(
    'description' => t(''),
    'fields' => array(
      'mcid' => array(
        'description' => t('The primary identifier for a mail cache record.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        ),
      'nid' => array(
        'description' => t('The {node}.nid of this newsletter.'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'tid' => array(
        'description' => t('The {term_data}.tid this newsletter issue belongs to.'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'subject' => array(
        'description' => t('The subject of this mail message.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'mail' => array(
        'description' => t('The formatted e-mail address of mail message receipient.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'status' => array(
        'description' => t('The send status of the e-mail (0 = hold, 1 = pending, 2 = send).'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'timestamp' => array(
        'description' => t('The time status was set or changed.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'message' => array(
        'description' => t('The mail message array.'),
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
      ),
    ),
    'primary key' => array('mcid'),
    'indexes' => array('tid' => array('tid'), 'status' => array('status')),
  );
  return $schema;
}

//TODO: contact MSSQL tester (issue ...)

/**
 * Implementation of hook_install
 */
function simplenews_install() {
  if (drupal_install_schema('simplenews')) {
    drupal_set_message(t('Simplenews module succesfully installed.'));
  }
  else {
    drupal_set_message(t('The installation of the Simplenews module was unsuccessful.'), 'error');
  }
}

/**
 * Implementation of hook_enable().
 */
function simplenews_enable() {
  if ($vocabulary = taxonomy_vocabulary_load(variable_get('simplenews_vid', ''))) {
    // Existing install. Add back newsletter node type, if the forums
    // vocabulary still exists. Keep all other node types intact there.
    $vocabulary = (array) $vocabulary;
    $vocabulary['nodes']['simplenews'] = 1;
    taxonomy_save_vocabulary($vocabulary);
  }
  else {
    // Create the simplenews vocabulary if it does not exist.
    $vocabulary = array(
      'name' => t('Newsletter'),
      'multiple' => '0',
      'required' => '0',
      'hierarchy' => '0',
      'relations' => '0',
      'module' => 'simplenews',
      'nodes' => array('simplenews' => 1)
    );
    taxonomy_save_vocabulary($vocabulary);
    variable_set('simplenews_vid', $vocabulary['vid']);
  }

  // Check to see if at least 1 term exists, else create one
  $tid = db_result(db_query('SELECT tid FROM {term_data} WHERE vid = %d', $vocabulary['vid']));
  if (!$tid) {
    $form_values = array(
      'name' => variable_get('site_name', 'Drupal') .' '. t('newsletter'),
      'vid' => $vocabulary['vid'],
      'weight' => 0,
    );
    switch (taxonomy_save_term($form_values)) {
      case SAVED_UPDATED:
        drupal_set_message(t('Updated term %name.', array('%name' => $form_values['name'])));
        break;
      case SAVED_DELETED:
        drupal_set_message(t('Deleted term %name.', array('%name' => $form_values['name'])));
        break;
    }
  }
}

/**
 * Implementation of hook_uninstall().
 */
function simplenews_uninstall() {
  drupal_uninstall_schema('simplenews');
  db_query("DELETE FROM {variable} WHERE name LIKE 'simplenews_%%'");
}

/**
 * Rename sn_* tables to simplenews_* to avoid namespace conflicts.
 */
function simplenews_update_2() {
  $ret = array();
  db_rename_table($ret, 'sn_snid_tid', 'simplenews_snid_tid');
  db_rename_table($ret, 'sn_newsletters', 'simplenews_snid_tid');
  db_rename_table($ret, 'sn_subscriptions', 'simplenews_subscriptions');
  return $ret;
}

/**
 * Add index to simplenews_subscriptions
 */
function simplenews_update_5000() {
  $ret = array();
  db_add_index($ret, 'simplenews_subscriptions', 'indexes', array('mail'));
  return $ret;
}

/**
 * Add index to simplenews_subscriptions
 */
function simplenews_update_6000() {
  $ret = array();

  // Convert the block delta: remove 'newsletter-' prefix from the delta.
  $result = db_query("SELECT module, delta FROM {blocks} WHERE module = 'simplenews' AND delta LIKE 'newsletter-%'");
  while ($data = db_fetch_object($result)) {
    $delta = strtr($data->delta, array('newsletter-' => ''));
    $ret[] = update_sql("UPDATE {blocks} SET delta = $delta WHERE module = 'simplenews' AND delta = 'newsletter-$delta'");
  }
  $result = db_query("SELECT module, delta FROM {blocks_roles} WHERE module = 'simplenews' AND delta LIKE 'newsletter-%'");
  while ($data = db_fetch_object($result)) {
    $delta = strtr($data->delta, array('newsletter-' => ''));
    $ret[] = update_sql("UPDATE {blocks_roles} SET delta = $delta WHERE module = 'simplenews' AND delta = 'newsletter-$delta'");
  }
  
  // Convert newsletter priority: change field type int to string
  db_change_field($ret, 'simplenews_newsletters', 'priority', 'priority', array(
    'type' => 'varchar',
    'length' => 8,
    'not null' => true,
    'default' => '',
    )
  );
  // Convert subscription field name: change a_status to activated
  db_change_field($ret, 'simplenews_subscriptions', 'a_status', 'activated', array(
    'type' => 'int',
    'size' => 'tiny',
    'not null' => true,
    'default' => 0,
    )
  );
  // Convert subscription field name: change s_status to is_send
  db_change_field($ret, 'simplenews_subscriptions', 's_status', 'is_send', array(
    'type' => 'int',
    'size' => 'tiny',
    'not null' => true,
    'default' => 0,
    )
  );
  return $ret;
}

function simplenews_update_6001() {
    $schema['simplenews_mail_cache'] = array(
    'description' => t(''),
    'fields' => array(
      'mcid' => array(
        'description' => t('The primary identifier for a mail cache record.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        ),
      'tid' => array(
        'description' => t('The {term_data}.tid this newsletter issue belongs to.'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'subject' => array(
        'description' => t('The subject of this mail message.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'mail' => array(
        'description' => t('The formatted e-mail address of mail message receipient.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'status' => array(
        'description' => t('The send status of the e-mail (0 = hold, 1 = pending, 2 = send).'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'timestamp' => array(
        'description' => t('The time status was set or changed.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'message' => array(
        'description' => t('The mail message array.'),
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
      ),
    ),
    'primary key' => array('mcid'),
    'indexes' => array('tid' => array('tid'), 'status' => array('status')),
  );
  $ret = array();
  // New table to buffer mail messages during sending
  db_create_table($ret, 'simplenews_mail_cache', $schema['simplenews_mail_cache']);

  // Remove is_send field. No longer required by the introduction of simplenews_mail_cache table
  db_drop_field($ret, 'simplenews_subscriptions', 'is_send');
  
    // Convert newsletter priority: change field type string back to int
  db_change_field($ret, 'simplenews_newsletters', 'priority', 'priority', array(
      'type' => 'int',
      'size' => 'tiny',
      'not null' => true,
      'default' => 0,
    )
  );
  return $ret;
}

function simplenews_update_6002() {
  $ret = array();
  db_add_field($ret, 'simplenews_newsletters', 'vid', array('type' => 'int', 'type' => 'int', 'not null' => true, 'default' => 0));
  db_add_field($ret, 'simplenews_mail_cache', 'nid', array('type' => 'int', 'not null' => TRUE, 'default' => 0));
  variable_del('simplenews_time');
  return $ret;
}
