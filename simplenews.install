<?php
// $Id$

/**
 * @file
 * Install, update and uninstall functions for the simplenews module
 */

/**
 * Implement hook_schema().
 */
function simplenews_schema() {
  $schema['simplenews_category'] = array(
    'description' => 'Simplenews newsletter categories.',
    'fields' => array(
      'scid' => array(
        'type' => 'serial',
        'description' => 'Primary key: Unique newsletter category ID.',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Name of the newsletter category.',
        'translatable' => TRUE,
      ),
      'machine_name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The newsletter category machine name.',
      ),
      'description' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'description' => 'Description of the newsletter category.',
        'translatable' => TRUE,
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The weight of this newsletter category relative to other newsletter categories.',
      ),
      'from_name' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'TODO',
      ),
      'email_subject' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'TODO',
      ),
      'from_address' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'TODO',
      ),
      'hyperlinks' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'TODO',
      ),
    ),
    'primary key' => array('scid'),
    'indexes' => array(
      'list' => array('weight', 'name'),
    ),
  );

  $schema['simplenews_newsletter'] = array(
    'description' => 'Simplenews newsletter data.',
    'fields' => array(
      'nid' => array(
        'description' => '{node} that is used as newsletter.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'vid' => array(
        'description' => 'The {node}.vid that identifies the version used as newsletter.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'scid' => array(
        'description' => 'The newsletter category {simplenews_category}.scid this newsletter belongs to.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      's_status' => array(
        'description' => 'sent status of the newsletter issue (0 = not sent; 1 = pending; 2 = sent). ',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      // TODO Move format to simplenews_category
      's_format' => array(
        'description' => 'Format of the newsletter (plain or html).',
        'type' => 'varchar',
        'length' => 8,
        'not null' => TRUE,
        'default' => '',
      ),
      // TODO Drop priority or move to simplenews_category
      'priority' => array(
        'description' => 'Email priority according to RFC 2156 and RFC 5231 (0 = none; 1 = highest; 2 = high; 3 = normal; 4 = low; 5 = lowest).',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      // TODO Drop receipt or move to simplenews_category
      'receipt' => array(
        'description' => 'Boolean indicating request for email receipt confirmation according to RFC 2822.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('nid'),
    'foreign keys' => array(
      'nid' => array('node' => 'nid'),
      'vid' => array('node' => 'vid'),
      'scid' => array('simplenews_category' => 'scid'),
    ),
  );

  $schema['simplenews_mailing_list'] = array(
    'description' => 'List to which a {simplenews_subscriber} can be (un)subscribed. Many-to-many relation via {simplenews_subscription}.',
    'fields' => array(
      'slid' => array(
        'description' => 'Primary key: Unique mailing list ID.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'scid' => array(
        'description' => '{simplews_category} that this mailing list belongs to.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Name of the mailing list.',
        'translatable' => TRUE,
      ),
      'machine_name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The mailing list machine name.',
      ),
      'description' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'description' => 'Description of the mailing list.',
        'translatable' => TRUE,
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The weight of this mailing list relative to other mailing list.',
      ),
      'new_account' => array(
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
        'description' => 'TODO',
      ),
      'opt_inout' => array(
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
        'description' => 'TODO',
      ),
    ),
    'primary key' => array('slid'),
    'indexes' => array(
      'list' => array('weight', 'name'),
    ),
  );

  $schema['simplenews_subscriber'] = array(
    'description' => 'Subscribers to {simplenews_mailing_list}. Many-to-many relation via {simplenews_subscription}',
    'fields' => array(
      'snid' => array(
        'description' => 'Primary key: Unique subscriber ID.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'activated' => array(
        'description' => 'Boolean indicating the status of the subscription.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'mail' => array(
        'description' => "The subscriber's email address.",
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'uid' => array(
        'description' => 'The {users}.uid that has the same email address.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'language' => array(
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Subscriber preferred language.',
      ),
    ),
    'primary key' => array('snid'),
    'indexes' => array(
      'mail' => array('mail'),
      'uid' => array('uid'),
    ),
    'foreign keys' => array(
      'uid' => array('users' => 'uid'),
    ),
  );

  $schema['simplenews_subscription'] = array(
    'description' => 'Newsletter subscription data. Which subscriber is subscribed to which mailing list.',
    'fields' => array(
      'snid' => array(
        'description' => 'The {simplenews_subscriber}.snid who is subscribed.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'slid' => array(
        'description' => 'The mailing list ({simplenews_mailing_list}.slid) the subscriber is subscribed to.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'A flag indicating whether the user is subscribed (1) or unsubscribed (0).',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'default' => 1,
      ),
      'timestamp' => array(
        'description' => 'UNIX timestamp of when the user is (un)subscribed.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'source' => array(
        'description' => 'The source via which the user is (un)subscription.',
        'type' => 'varchar',
        'length' => 24,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('snid', 'slid'),
    'foreign keys' => array(
      'snid' => array('simplenews_subscriber' => 'snid'),
      'slid' => array('simplenews_mailing_list' => 'slid'),
    ),
  );

  $schema['simplenews_mail_spool'] = array(
    'description' => 'Spool for temporary storage of newsletter emails.',
    'fields' => array(
      'msid' => array(
        'description' => 'The primary identifier for a mail spool record.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'mail' => array(
        'description' => 'The formatted email address of mail message receipient.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'nid' => array(
        'description' => 'The {node}.nid of this newsletter.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'scid' => array(
        'description' => 'The {simplenews_category}.scid this newsletter belongs to.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'The sent status of the email (0 = hold, 1 = pending, 2 = done).',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'error' => array(
        'description' => 'A boolean indicating whether an error occured while sending the email.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'timestamp' => array(
        'description' => 'The time status was set or changed.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('msid'),
    'indexes' => array(
      'tid' => array('tid'),
      'status' => array('status'),
    ),
    'foreign keys' => array(
      'nid' => array('node' => 'nid'),
      'vid' => array('node' => 'vid'),
      'scid' => array('simplenews_category' => 'scid'),
    ),
  );
  return $schema;
}

/**
 * Implement hook_install().
 */
function simplenews_install() {
  drupal_set_message(t('Simplenews installation instructions are available on the <a href="!simplenews_help">Simplenews help page</a>.', array('!simplenews_help' => url('admin/help/simplenews'))));
  // TODO is it still possible/usefull to detect faulty installation
  //  drupal_set_message(t('The installation of Simplenews was not successful.'), 'error');

  _simplenews_install_nodetype();
  variable_set('simplenews_content_types', array('simplenews' => 'simplenews'));

  _simplenews_init_simplenews_category();
}

/**
 * Implement hook_uninstall().
 */
function simplenews_uninstall() {
  db_query("DELETE FROM {variable} WHERE name LIKE 'simplenews_%%'");
}

/**
 * Create simplenews node type.
 */
function _simplenews_install_nodetype() {
  // Create a newsletter type. If exists, modify it.
  if ($type = node_type_get_type('simplenews')) {
    $type->module = 'node';
    $type->locked = FALSE;
    $type->custom = TRUE;
    node_type_save($type);
  }
  else {
    $type = node_type_set_defaults(array(
      'type' => 'simplenews',
      'name' => t('Newsletter issue'),
      'module' => 'node',
      'description' => t('A newsletter issue to be sent to subscribed email addresses.'),
      'locked' => FALSE,
      'custom' => TRUE,
    ));
    node_type_save($type);
  }
}

/**
 * Create initial simplenews category and mailing list.
 */
function _simplenews_init_simplenews_category() {
  $categories = simplenews_categories_load_multiple();
  if (empty($categories)) {
    $category->name =          t('@site_name newsletter', array('@site_name' => variable_get('site_name', 'Drupal')));
    $category->machine_name =  'newsletter';
    $category->description =   t('@site_name newsletters, to keep you informed.');
    $category->from_name =     variable_get('site_name', 'Drupal');
    $category->email_subject = '[[simplenews-newsletters-name]] [title-raw]';
    $category->from_address =  variable_get('site_mail', ini_get('sendmail_from'));
    $category->hyperlinks =    TRUE;
    simplenews_category_save($category);
  }
  else {
    $category = reset($categories);
  }

  // Check to see if at least 1 mailing list exists, else create one
  $lists = simplenews_get_mailing_lists(TRUE);
  if (empty($lists)) {
    $list = new stdClass();
    $list->name =         t('@site_name newsletter', array('@site_name' => variable_get('site_name', 'Drupal')));
    $list->machine_name = 'newsletter';
    $list->description =  t('@site_name newsletters, to keep you informed.');
    $list->scid =         $category->scid;
    $list->new_account =  'none';
    $list->opt_inout =    'double';
    simplenews_mailing_list_save($list);
  }
}

/**
 * Data conversion of block delta.
 * Field type conversions: newsletter priority.
 * Field name change in simplenews_subscriptions table.
 */
function simplenews_update_6000() {
  $ret = array();

  // Convert the block delta: remove 'newsletter-' prefix from the delta.
  $result = db_query("SELECT module, delta FROM {blocks} WHERE module = 'simplenews' AND delta LIKE 'newsletter-%'");
  while ($data = db_fetch_object($result)) {
    $delta = strtr($data->delta, array('newsletter-' => ''));
    $ret[] = update_sql("UPDATE {blocks} SET delta = '%s' WHERE module = 'simplenews' AND delta = 'newsletter-%s'", $delta, $delta);
  }
  $result = db_query("SELECT module, delta FROM {blocks_roles} WHERE module = 'simplenews' AND delta LIKE 'newsletter-%'");
  while ($data = db_fetch_object($result)) {
    $delta = strtr($data->delta, array('newsletter-' => ''));
    $ret[] = update_sql("UPDATE {blocks_roles} SET delta = '%s' WHERE module = 'simplenews' AND delta = 'newsletter-%s'", $delta, $delta);
  }

  // Convert newsletter priority: change field type int to string
  db_change_field($ret, 'simplenews_newsletters', 'priority', 'priority', array('type' => 'varchar', 'length' => 8, 'not null' => TRUE, 'default' => '')
  );
  // Convert subscription field name: change a_status to activated
  db_change_field($ret, 'simplenews_subscriptions', 'a_status', 'activated', array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE, 'default' => 0)
  );
  // Convert subscription field name: change s_status to is_send
  db_change_field($ret, 'simplenews_subscriptions', 's_status', 'is_send', array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE, 'default' => 0)
  );
  return $ret;
}

/**
 * Addition of simplenews_mail_cache table.
 * Related to this new table: the removal of simplenews_subscriptions is_send
 * status.
 * Correction of simplenews_newsletters priority field type.
 */
function simplenews_update_6001() {
  $schema['simplenews_mail_cache'] = array(
    'description' => '',
    'fields' => array(
      'mcid' => array(
        'description' => 'The primary identifier for a mail cache record.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'tid' => array(
        'description' => 'The {term_data}.tid this newsletter issue belongs to.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'subject' => array(
        'description' => 'The subject of this mail message.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'mail' => array(
        'description' => 'The formatted email address of mail message receipient.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'status' => array(
        'description' => 'The sent status of the email (0 = hold, 1 = pending, 2 = sent).',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'timestamp' => array(
        'description' => 'The time status was set or changed.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'message' => array(
        'description' => 'The mail message array.',
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
      ),
    ),
    'primary key' => array('mcid'),
    'indexes' => array(
      'tid' => array('tid'),
      'status' => array('status'),
    ),
  );
  $ret = array();
  // New table to buffer mail messages during sending
  db_create_table($ret, 'simplenews_mail_cache', $schema['simplenews_mail_cache']);

  // Remove is_send field. No longer required by the introduction of simplenews_mail_cache table
  db_drop_field($ret, 'simplenews_subscriptions', 'is_send');

  // Convert newsletter priority: change field type string back to int
  db_change_field($ret, 'simplenews_newsletters', 'priority', 'priority', array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE, 'default' => 0)
  );
  return $ret;
}

/**
 * Addition of node version to simplenews_newsletters in order to record the
 * node version which is being sent.
 * Addition of nid to simplenews_mail_cache to be able to check the newsletter
 * sent status.
 */
function simplenews_update_6002() {
  $ret = array();
  db_add_field($ret, 'simplenews_mail_cache', 'nid', array('type' => 'int', 'not null' => TRUE, 'default' => 0));
  variable_del('simplenews_time');
  return $ret;
}

/**
 * Addition of index to uid in simplenews_subscriptions.
 */
function simplenews_update_6003() {
  $ret = array();
  db_add_index($ret, 'simplenews_subscriptions', 'uid', array('uid'));
  return $ret;
}

/**
 * Add spool table and remove cache table.
 */
function simplenews_update_6004() {
  $schema['simplenews_mail_spool'] = array(
    'description' => 'Spool for temporary storage of newsletter emails.',
    'fields' => array(
      'msid' => array(
        'description' => 'The primary identifier for a mail spool record.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'mail' => array(
        'description' => 'The formatted email address of mail message receipient.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'nid' => array(
        'description' => 'The {node}.nid of this newsletter.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'vid' => array(
        'description' => 'The {node}.vid of this newsletter.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'tid' => array(
        'description' => 'The {term_data}.tid this newsletter issue belongs to.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'The sent status of the email (0 = hold, 1 = pending, 2 = sent).',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'timestamp' => array(
        'description' => 'The time status was set or changed.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('msid'),
    'indexes' => array(
      'tid' => array('tid'),
      'status' => array('status'),
    ),
  );
  $ret = array();
  // New table to buffer mail messages during sending
  db_create_table($ret, 'simplenews_mail_spool', $schema['simplenews_mail_spool']);
  db_drop_table($ret, 'simplenews_mail_cache');
  return $ret;
}

/**
 * Add language field to subscription table and set language of existing subscribers.
 */
function simplenews_update_6005() {
  $ret = array();
  db_add_field($ret, 'simplenews_subscriptions', 'language', array('type' => 'varchar', 'length' => 12, 'not null' => TRUE, 'default' => '', 'description' => 'Subscriber preferred language.')
  );

  // Set preferred language for all current none anonymous subscribers.
  $result = db_query('SELECT s.snid, u.language FROM {simplenews_subscriptions} s INNER JOIN {users} u ON u.uid = s.uid WHERE s.uid > %d', 0);
  while ($subscriber = db_fetch_object($result)) {
    $ret[] = update_sql("UPDATE {simplenews_subscriptions} SET language = '%s' WHERE snid = %d", $subscriber->language, $subscriber->snid);
  }
  return $ret;
}

/**
 * Make the simplenews content type a custom type.
 */
function simplenews_update_6006() {
  $ret = array();

  // Convert existing node type or re-create it.
  // If _node_types_build() if called before update, the simplenews
  // node type gets deleted because simplenews_node_info() no longer exists.
  // In that case we re-create the node type.
  $types = node_type_get_types();
  if ($type = $types['simplenews']) {
    $type->module = 'node';
    $type->locked = FALSE;
    $type->custom = TRUE;
    node_type_save($type);
  }
  else {
    _simplenews_install_nodetype();
  }

  return $ret;
}

/**
 * Rename old permissions.
 */
function simplenews_update_6007() {
  $ret = array();
  $result = db_query("SELECT rid, perm FROM {permission} ORDER BY rid");
  while ($role = db_fetch_object($result)) {
    $patterns = array('/create newsletter/', '/edit own newsletter/', '/edit any newsletter/', '/delete own newsletter/', '/delete any newsletter/');
    $replacements = array('create simplenews content', 'edit own simplenews content', 'edit any simplenews content', 'delete own simplenews content', 'delete any simplenews content');
    $renamed_permission = preg_replace($patterns, $replacements, $role->perm);
    if ($renamed_permission != $role->perm) {
      $ret[] = update_sql("UPDATE {permission} SET perm = '$renamed_permission' WHERE rid = $role->rid");
    }
  }
  return $ret;
}

/**
 * Make vocabulary required.
 */
function simplenews_update_6008() {
  $vocabulary = (array) taxonomy_vocabulary_load(variable_get('simplenews_vid', ''));
  $vocabulary['required'] = TRUE;
  taxonomy_save_vocabulary($vocabulary);
  return array();
}

/**
 * Add (un)subscription data to table simplenews_snid_tid.
 */
function simplenews_update_6100() {
  $ret = array();
  db_add_field($ret, 'simplenews_snid_tid', 'status', array('description' => 'A flag indicating whether the user is subscribed (1) or unsubscribed (0).', 'type' => 'int', 'size' => 'small', 'not null' => TRUE, 'default' => 1)
  );
  db_add_field($ret, 'simplenews_snid_tid', 'timestamp', array('description' => 'UNIX timestamp of when the user is (un)subscribed.', 'type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0)
  );
  db_add_field($ret, 'simplenews_snid_tid', 'source', array('description' => 'The source via which the user is (un)subscription.', 'type' => 'varchar', 'length' => 24, 'not null' => TRUE, 'default' => '')
  );
  return $ret;
}

/**
 * Convert Simplenews custom tokens to Token tokens.
 */
function simplenews_update_6101() {
  $ret = array();

  $old = array('!site', '!mailto', '!date', '!login_uri', '!uri', '!confirm_subscribe_url', '!confirm_unsubscribe_url', '!newsletter_url', '!newsletter_name');
  $new = array('[site-name]', '[user-mail]', '[site-date]', '[site-url]/user', '[site-url]', '[simplenews-subscribe-url]', '[simplenews-unsubscribe-url]', '[simplenews-newsletter-url]', '[simplenews-newsletters-name]');
  $variables = array('simplenews_confirm_subscribe_subject', 'simplenews_confirm_subscribe_unsubscribed', 'simplenews_confirm_subscribe_subscribed', 'simplenews_confirm_unsubscribe_subscribed', 'simplenews_confirm_unsubscribe_unsubscribed');
  foreach ($variables as $variable) {
    if ($text = variable_get($variable, FALSE)) {
      $text = str_replace($old, $new, $text);
      variable_set($variable, $text);
    }
  }
  drupal_set_message(t('Simplenews custom tokens have been deprecated. An attempt was made to replace custom tokens in the confirmation messages. Check the messages at <a href="!url">Simplenews subscription settings</a>. Manually replace Simplenews tokens in (unsent) newsletter issues.', array('!url' => url('admin/config/simplenews/subscription'))));
  return $ret;
}

/**
 * Addition of error to simplenews_mail_cache to mark an email error.
 */
function simplenews_update_6200() {
  $ret = array();
  db_add_field($ret, 'simplenews_mail_spool', 'error', array('type' => 'int', 'not null' => TRUE, 'default' => 0));
  return $ret;
}

/**
 * Addition of Simplenews newsletter category table.
 */
function simplenews_update_7000() {
  $schema = simplenews_schema();
  // TODO Test schema update !!
  // See: http://api.drupal.org/api/function/db_change_field/7
  // TODO Test data update !!
  
  // TODO replace $schema['x'] with full definition of the schema.
  // Because this will break if schema gets updated.
  db_create_table('simplenews_category', $schema['simplenews_category']);
  db_create_table('simplenews_mailing_list', $schema['simplenews_mailing_list']);

  // Change table simplenews_subscriptions to simplenews_subscriber.
  db_rename_table('simplenews_subscriptions', 'simplenews_subscriber');
  /*
  // TODO There does not seem to be a way to change the name of a serial primary key.
  db_change_field('simplenews_subscriber', 'snid', 'ssid', 
    array(
      'description' => 'Primary key: Unique subscriber ID.',
      'type' => 'serial',
      'not null' => TRUE,
    ),
    array('primary key' => array('ssid'))
  );
  */

  // Change table simplenews_newsletters to simplenews_newsletter.
  db_rename_table('simplenews_newsletters', 'simplenews_newsletter');
  db_change_field('simplenews_newsletter', 'tid', 'scid', array(
    'description' => 'The newsletter category {simplenews_category}.scid this newsletter belongs to.',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  ));

  // Change table simplenews_snid_tid to simplenews_subscription.
  db_drop_primary_key('simplenews_snid_tid');
  db_rename_table('simplenews_snid_tid', 'simplenews_subscription');
  /*
  db_change_field('simplenews_subscription', 'snid', 'ssid', array(
    'description' => 'The {simplenews_subscriber}.ssid who is subscribed.',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  ));
  */
  db_change_field('simplenews_subscription', 'tid', 'slid',
    array(
      'description' => 'The mailing list ({simplenews_mailing_list}.slid) the subscriber is subscribed to.',
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
    ),
    array('primary key' => array('snid', 'slid'))
  );
  
  // Change table simplenews_mail_spool
  db_drop_field('simplenews_mail_spool', 'vid');
  db_change_field('simplenews_mail_spool', 'tid', 'scid', array(
    'description' => 'The {simplenews_category}.scid this newsletter belongs to.',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  ));
}


// @todo Add doxygen comment to new update functions: http://drupal.org/node/224333#update_php
// @todo D7 update_N() functions must return string or exception: http://drupal.org/node/224333#update_sql